{"./":{"url":"./","title":"前言","keywords":"","body":"初衷 在这个信息爆炸，前端生态百花齐放的时代，我们每找寻一个答案都要换一种形式 ，所以搜集了网上的一些常见常问的一些面试题来做一个分享！ 提示 本网站内容均来源于网络！ 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/array.html":{"url":"es6/array.html","title":"数组新增了那些扩展","keywords":"","body":"面试官：数组新增了哪些扩展？ 一、扩展运算符的应用 ES6通过扩展元素符...，好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列 console.log(...[1, 2, 3]) // 1 2 3 console.log(1, ...[2, 3, 4], 5) // 1 2 3 4 5 [...document.querySelectorAll('div')] // [, , ] 主要用于函数调用的时候，将一个数组变为参数序列 function push(array, ...items) { array.push(...items); } function add(x, y) { return x + y; } const numbers = [4, 38]; add(...numbers) // 42 可以将某些数据结构转为数组 [...document.querySelectorAll('div')] 能够更简单实现数组复制 const a1 = [1, 2]; const [...a2] = a1; // [1,2] 数组的合并也更为简洁了 const arr1 = ['a', 'b']; const arr2 = ['c']; const arr3 = ['d', 'e']; [...arr1, ...arr2, ...arr3] // [ 'a', 'b', 'c', 'd', 'e' ] 注意：通过扩展运算符实现的是浅拷贝，修改了引用指向的值，会同步反映到新数组 下面看个例子就清楚多了 const arr1 = ['a', 'b',[1,2]]; const arr2 = ['c']; const arr3 = [...arr1,...arr2] arr[1][0] = 9999 // 修改arr1里面数组成员值 console.log(arr[3]) // 影响到arr3,['a','b',[9999,2],'c'] 扩展运算符可以与解构赋值结合起来，用于生成数组 const [first, ...rest] = [1, 2, 3, 4, 5]; first // 1 rest // [2, 3, 4, 5] const [first, ...rest] = []; first // undefined rest // [] const [first, ...rest] = [\"foo\"]; first // \"foo\" rest // [] 如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错 const [...butLast, last] = [1, 2, 3, 4, 5]; // 报错 const [first, ...middle, last] = [1, 2, 3, 4, 5]; // 报错 可以将字符串转为真正的数组 [...'hello'] // [ \"h\", \"e\", \"l\", \"l\", \"o\" ] 定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组 let nodeList = document.querySelectorAll('div'); let array = [...nodeList]; let map = new Map([ [1, 'one'], [2, 'two'], [3, 'three'], ]); let arr = [...map.keys()]; // [1, 2, 3] 如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错 const obj = {a: 1, b: 2}; let arr = [...obj]; // TypeError: Cannot spread non-iterable object 二、构造函数新增的方法 关于构造函数，数组新增的方法有如下： Array.from() Array.of() Array.from() 将两类对象转为真正的数组：类似数组的对象和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map） let arrayLike = { '0': 'a', '1': 'b', '2': 'c', length: 3 }; let arr2 = Array.from(arrayLike); // ['a', 'b', 'c'] 还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组 Array.from([1, 2, 3], (x) => x * x) // [1, 4, 9] Array.of() 用于将一组值，转换为数组 Array.of(3, 11, 8) // [3,11,8] 没有参数的时候，返回一个空数组 当参数只有一个的时候，实际上是指定数组的长度 参数个数不少于 2 个时，Array()才会返回由参数组成的新数组 Array() // [] Array(3) // [, , ,] Array(3, 11, 8) // [3, 11, 8] 三、实例对象新增的方法 关于数组实例对象新增的方法有如下： copyWithin() find()、findIndex() fill() entries()，keys()，values() includes() flat()，flatMap() copyWithin() 将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组 参数如下： target（必需）：从该位置开始替换数据。如果为负值，表示倒数。 start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。 end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。 [1, 2, 3, 4, 5].copyWithin(0, 3) // 将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2 // [4, 5, 3, 4, 5] find()、findIndex() find()用于找出第一个符合条件的数组成员 参数是一个回调函数，接受三个参数依次为当前的值、当前的位置和原数组 [1, 5, 10, 15].find(function(value, index, arr) { return value > 9; }) // 10 findIndex返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1 [1, 5, 10, 15].findIndex(function(value, index, arr) { return value > 9; }) // 2 这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。 function f(v){ return v > this.age; } let person = {name: 'John', age: 20}; [10, 12, 26, 15].find(f, person); // 26 fill() 使用给定值，填充一个数组 ['a', 'b', 'c'].fill(7) // [7, 7, 7] new Array(3).fill(7) // [7, 7, 7] 还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置 ['a', 'b', 'c'].fill(7, 1, 2) // ['a', 7, 'c'] 注意，如果填充的类型为对象，则是浅拷贝 entries()，keys()，values() keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历 or (let index of ['a', 'b'].keys()) { console.log(index); } // 0 // 1 for (let elem of ['a', 'b'].values()) { console.log(elem); } // 'a' // 'b' for (let [index, elem] of ['a', 'b'].entries()) { console.log(index, elem); } // 0 \"a\" includes() 用于判断数组是否包含给定的值 [1, 2, 3].includes(2) // true [1, 2, 3].includes(4) // false [1, 2, NaN].includes(NaN) // true 方法的第二个参数表示搜索的起始位置，默认为0 参数为负数则表示倒数的位置 [1, 2, 3].includes(3, 3); // false [1, 2, 3].includes(3, -1); // true flat()，flatMap() 将数组扁平化处理，返回一个新数组，对原数据没有影响 [1, 2, [3, 4]].flat() // [1, 2, 3, 4] flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1 [1, 2, [3, [4, 5]]].flat() // [1, 2, 3, [4, 5]] [1, 2, [3, [4, 5]]].flat(2) // [1, 2, 3, 4, 5] flatMap()方法对原数组的每个成员执行一个函数相当于执行Array.prototype.map()，然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组 // 相当于 [[2, 4], [3, 6], [4, 8]].flat() [2, 3, 4].flatMap((x) => [x, x * 2]) // [2, 4, 3, 6, 4, 8] flatMap()方法还可以有第二个参数，用来绑定遍历函数里面的this 四、数组的空位 数组的空位指，数组的某一个位置没有任何值 ES6 则是明确将空位转为undefined，包括Array.from、扩展运算符、copyWithin()、fill()、entries()、keys()、values()、find()和findIndex() 建议大家在日常书写中，避免出现空位 五、排序稳定性 将sort()默认设置为稳定的排序算法 const arr = [ 'peach', 'straw', 'apple', 'spork' ]; const stableSorting = (s1, s2) => { if (s1[0] 排序结果中，straw在spork的前面，跟原始顺序一致 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/function.html":{"url":"es6/function.html","title":"函数新增了那些扩展","keywords":"","body":"面试官：函数新增了哪些扩展？ 一、参数 ES6允许为函数的参数设置默认值 function log(x, y = 'World') { console.log(x, y); } console.log('Hello') // Hello World console.log('Hello', 'China') // Hello China console.log('Hello', '') // Hello 函数的形参是默认声明的，不能使用let或const再次声明 function foo(x = 5) { let x = 1; // error const x = 2; // error } 参数默认值可以与解构赋值的默认值结合起来使用 function foo({x, y = 5}) { console.log(x, y); } foo({}) // undefined 5 foo({x: 1}) // 1 5 foo({x: 1, y: 2}) // 1 2 foo() // TypeError: Cannot read property 'x' of undefined 上面的foo函数，当参数为对象的时候才能进行解构，如果没有提供参数的时候，变量x和y就不会生成，从而报错，这里设置默认值避免 function foo({x, y = 5} = {}) { console.log(x, y); } foo() // undefined 5 参数默认值应该是函数的尾参数，如果不是非尾部的参数设置默认值，实际上这个参数是没发省略的 function f(x = 1, y) { return [x, y]; } f() // [1, undefined] f(2) // [2, undefined] f(, 1) // 报错 f(undefined, 1) // [1, 1] 二、属性 函数的length属性 length将返回没有指定默认值的参数个数 (function (a) {}).length // 1 (function (a = 5) {}).length // 0 (function (a, b, c = 5) {}).length // 2 rest 参数也不会计入length属性 (function(...args) {}).length // 0 如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了 (function (a = 0, b, c) {}).length // 0 (function (a, b = 1, c) {}).length // 1 name属性 返回该函数的函数名 var f = function () {}; // ES5 f.name // \"\" // ES6 f.name // \"f\" 如果将一个具名函数赋值给一个变量，则 name属性都返回这个具名函数原本的名字 const bar = function baz() {}; bar.name // \"baz\" Function构造函数返回的函数实例，name属性的值为anonymous (new Function).name // \"anonymous\" bind返回的函数，name属性值会加上bound前缀 function foo() {}; foo.bind({}).name // \"bound foo\" (function(){}).bind({}).name // \"bound \" 三、作用域 一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域 等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的 下面例子中，y=x会形成一个单独作用域，x没有被定义，所以指向全局变量x let x = 1; function f(y = x) { // 等同于 let y = x let x = 2; console.log(y); } f() // 1 四、严格模式 只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错 // 报错 function doSomething(a, b = a) { 'use strict'; // code } // 报错 const doSomething = function ({a, b}) { 'use strict'; // code }; // 报错 const doSomething = (...a) => { 'use strict'; // code }; const obj = { // 报错 doSomething({a, b}) { 'use strict'; // code } }; 五、箭头函数 使用“箭头”（=>）定义函数 var f = v => v; // 等同于 var f = function (v) { return v; }; 如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分 var f = () => 5; // 等同于 var f = function () { return 5 }; var sum = (num1, num2) => num1 + num2; // 等同于 var sum = function(num1, num2) { return num1 + num2; }; 如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回 var sum = (num1, num2) => { return num1 + num2; } 如果返回对象，需要加括号将对象包裹 let getTempItem = id => ({ id: id, name: \"Temp\" }); 注意点： 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替 不可以使用yield命令，因此箭头函数不能用作 Generator 函数 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/object.html":{"url":"es6/object.html","title":"对象新增了那些扩展","keywords":"","body":"面试官：对象新增了哪些扩展？ 一、属性的简写 ES6中，当对象键名与对应值名相等的时候，可以进行简写 const baz = {foo:foo} // 等同于 const baz = {foo} 方法也能够进行简写 const o = { method() { return \"Hello!\"; } }; // 等同于 const o = { method: function() { return \"Hello!\"; } } 在函数内作为返回值，也会变得方便很多 function getPoint() { const x = 1; const y = 10; return {x, y}; } getPoint() // {x:1, y:10} 注意：简写的对象方法不能用作构造函数，否则会报错 const obj = { f() { this.foo = 'bar'; } }; new obj.f() // 报错 二、属性名表达式 ES6 允许字面量定义对象时，将表达式放在括号内 let lastWord = 'last word'; const a = { 'first word': 'hello', [lastWord]: 'world' }; a['first word'] // \"hello\" a[lastWord] // \"world\" a['last word'] // \"world\" 表达式还可以用于定义方法名 let obj = { ['h' + 'ello']() { return 'hi'; } }; obj.hello() // hi 注意，属性名表达式与简洁表示法，不能同时使用，会报错 // 报错 const foo = 'bar'; const bar = 'abc'; const baz = { [foo] }; // 正确 const foo = 'bar'; const baz = { [foo]: 'abc'}; 注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object] const keyA = {a: 1}; const keyB = {b: 2}; const myObject = { [keyA]: 'valueA', [keyB]: 'valueB' }; myObject // Object {[object Object]: \"valueB\"} 三、super关键字 this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象 const proto = { foo: 'hello' }; const obj = { foo: 'world', find() { return super.foo; } }; Object.setPrototypeOf(obj, proto); // 为obj设置原型对象 obj.find() // \"hello\" 四、扩展运算符的应用 在解构赋值中，未被读取的可遍历的属性，分配到指定的对象上面 let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 }; x // 1 y // 2 z // { a: 3, b: 4 } 注意：解构赋值必须是最后一个参数，否则会报错 解构赋值是浅拷贝 let obj = { a: { b: 1 } }; let { ...x } = obj; obj.a.b = 2; // 修改obj里面a属性中键值 x.a.b // 2，影响到了结构出来x的值 对象的扩展运算符等同于使用Object.assign()方法 五、属性的遍历 ES6 一共有 5 种方法可以遍历对象的属性。 for...in：循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性） Object.keys(obj)：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名 Object.getOwnPropertyNames(obj)：回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名 Object.getOwnPropertySymbols(obj)：返回一个数组，包含对象自身的所有 Symbol 属性的键名 Reflect.ownKeys(obj)：返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举 上述遍历，都遵守同样的属性遍历的次序规则： 首先遍历所有数值键，按照数值升序排列 其次遍历所有字符串键，按照加入时间升序排列 最后遍历所有 Symbol 键，按照加入时间升序排 Reflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 }) // ['2', '10', 'b', 'a', Symbol()] 六、对象新增的方法 关于对象新增的方法，分别有以下： Object.is() Object.assign() Object.getOwnPropertyDescriptors() Object.setPrototypeOf()，Object.getPrototypeOf() Object.keys()，Object.values()，Object.entries() Object.fromEntries() Object.is() 严格判断两个值是否相等，与严格比较运算符（===）的行为基本一致，不同之处只有两个：一是+0不等于-0，二是NaN等于自身 +0 === -0 //true NaN === NaN // false Object.is(+0, -0) // false Object.is(NaN, NaN) // true Object.assign() Object.assign()方法用于对象的合并，将源对象source的所有可枚举属性，复制到目标对象target Object.assign()方法的第一个参数是目标对象，后面的参数都是源对象 const target = { a: 1, b: 1 }; const source1 = { b: 2, c: 2 }; const source2 = { c: 3 }; Object.assign(target, source1, source2); target // {a:1, b:2, c:3} 注意：Object.assign()方法是浅拷贝，遇到同名属性会进行替换 Object.getOwnPropertyDescriptors() 返回指定对象所有自身属性（非继承属性）的描述对象 const obj = { foo: 123, get bar() { return 'abc' } }; Object.getOwnPropertyDescriptors(obj) // { foo: // { value: 123, // writable: true, // enumerable: true, // configurable: true }, // bar: // { get: [Function: get bar], // set: undefined, // enumerable: true, // configurable: true } } Object.setPrototypeOf() Object.setPrototypeOf方法用来设置一个对象的原型对象 Object.setPrototypeOf(object, prototype) // 用法 const o = Object.setPrototypeOf({}, null); Object.getPrototypeOf() 用于读取一个对象的原型对象 Object.getPrototypeOf(obj); Object.keys() 返回自身的（不含继承的）所有可遍历（enumerable）属性的键名的数组 var obj = { foo: 'bar', baz: 42 }; Object.keys(obj) // [\"foo\", \"baz\"] Object.values() 返回自身的（不含继承的）所有可遍历（enumerable）属性的键对应值的数组 const obj = { foo: 'bar', baz: 42 }; Object.values(obj) // [\"bar\", 42] Object.entries() 返回一个对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对的数组 const obj = { foo: 'bar', baz: 42 }; Object.entries(obj) // [ [\"foo\", \"bar\"], [\"baz\", 42] ] Object.fromEntries() 用于将一个键值对数组转为对象 Object.fromEntries([ ['foo', 'bar'], ['baz', 42] ]) // { foo: \"bar\", baz: 42 } 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/decorator.html":{"url":"es6/decorator.html","title":"ES6中装饰器 Decorator","keywords":"","body":"面试官：你是怎么理解ES6中 Decorator 的？使用场景？ 一、介绍 Decorator，即装饰器，从名字上很容易让我们联想到装饰者模式 简单来讲，装饰者模式就是一种在不改变原类和使用继承的情况下，动态地扩展对象功能的设计理论。 ES6中Decorator功能亦如此，其本质也不是什么高大上的结构，就是一个普通的函数，用于扩展类属性和类方法 这里定义一个士兵，这时候他什么装备都没有 class soldier{ } 定义一个得到 AK 装备的函数，即装饰器 function strong(target){ target.AK = true } 使用该装饰器对士兵进行增强 @strong class soldier{ } 这时候士兵就有武器了 soldier.AK // true 上述代码虽然简单，但也能够清晰看到了使用Decorator两大优点： 代码可读性变强了，装饰器命名相当于一个注释 在不改变原有代码情况下，对原来功能进行扩展 二、用法 Docorator修饰对象为下面两种： 类的装饰 类属性的装饰 类的装饰 当对类本身进行装饰的时候，能够接受一个参数，即类本身 将装饰器行为进行分解，大家能够有个更深入的了解 @decorator class A {} // 等同于 class A {} A = decorator(A) || A; 下面@testable就是一个装饰器，target就是传入的类，即MyTestableClass，实现了为类添加静态属性 @testable class MyTestableClass { // ... } function testable(target) { target.isTestable = true; } MyTestableClass.isTestable // true 如果想要传递参数，可以在装饰器外层再封装一层函数 function testable(isTestable) { return function(target) { target.isTestable = isTestable; } } @testable(true) class MyTestableClass {} MyTestableClass.isTestable // true @testable(false) class MyClass {} MyClass.isTestable // false 类属性的装饰 当对类属性进行装饰的时候，能够接受三个参数： 类的原型对象 需要装饰的属性名 装饰属性名的描述对象 首先定义一个readonly装饰器 function readonly(target, name, descriptor){ descriptor.writable = false; // 将可写属性设为false return descriptor; } 使用readonly装饰类的name方法 class Person { @readonly name() { return `${this.first} ${this.last}` } } 相当于以下调用 readonly(Person.prototype, 'name', descriptor); 如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行 function dec(id){ console.log('evaluated', id); return (target, property, descriptor) =>console.log('executed', id); } class Example { @dec(1) @dec(2) method(){} } // evaluated 1 // evaluated 2 // executed 2 // executed 1 外层装饰器@dec(1)先进入，但是内层装饰器@dec(2)先执行 注意 装饰器不能用于修饰函数，因为函数存在变量声明情况 var counter = 0; var add = function () { counter++; }; @add function foo() { } 编译阶段，变成下面 var counter; var add; @add function foo() { } counter = 0; add = function () { counter++; }; 意图是执行后counter等于 1，但是实际上结果是counter等于 0 三、使用场景 基于Decorator强大的作用，我们能够完成各种场景的需求，下面简单列举几种： 使用react-redux的时候，如果写成下面这种形式，既不雅观也很麻烦 class MyReactComponent extends React.Component {} export default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent); 通过装饰器就变得简洁多了 @connect(mapStateToProps, mapDispatchToProps) export default class MyReactComponent extends React.Component {} 将mixins，也可以写成装饰器，让使用更为简洁了 function mixins(...list) { return function (target) { Object.assign(target.prototype, ...list); }; } // 使用 const Foo = { foo() { console.log('foo') } }; @mixins(Foo) class MyClass {} let obj = new MyClass(); obj.foo() // \"foo\" 下面再讲讲core-decorators.js几个常见的装饰器 @antobind autobind装饰器使得方法中的this对象，绑定原始对象 import { autobind } from 'core-decorators'; class Person { @autobind getPerson() { return this; } } let person = new Person(); let getPerson = person.getPerson; getPerson() === person; // true @readonly readonly装饰器使得属性或方法不可写 import { readonly } from 'core-decorators'; class Meal { @readonly entree = 'steak'; } var dinner = new Meal(); dinner.entree = 'salmon'; // Cannot assign to read only property 'entree' of [object Object] @deprecate deprecate或deprecated装饰器在控制台显示一条警告，表示该方法将废除 import { deprecate } from 'core-decorators'; class Person { @deprecate facepalm() {} @deprecate('功能废除了') facepalmHard() {} } let person = new Person(); person.facepalm(); // DEPRECATION Person#facepalm: This function will be removed in future versions. person.facepalmHard(); // DEPRECATION Person#facepalmHard: 功能废除了 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/generator.html":{"url":"es6/generator.html","title":"ES6中Generator函数","keywords":"","body":"面试官：你是怎么理解ES6中 Generator的？使用场景？ 一、介绍 Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同 回顾下上文提到的解决异步的手段： 回调函数 promise 那么，上文我们提到promsie已经是一种比较流行的解决异步方案，那么为什么还出现Generator？甚至async/await呢？ 该问题我们留在后面再进行分析，下面先认识下Generator Generator函数 执行 Generator 函数会返回一个遍历器对象，可以依次遍历 Generator 函数内部的每一个状态 形式上，Generator函数是一个普通函数，但是有两个特征： function关键字与函数名之间有一个星号 函数体内部使用yield表达式，定义不同的内部状态 function* helloWorldGenerator() { yield 'hello'; yield 'world'; return 'ending'; } 二、使用 Generator 函数会返回一个遍历器对象，即具有Symbol.iterator属性，并且返回给自己 function* gen(){ // some code } var g = gen(); g[Symbol.iterator]() === g // true 通过yield关键字可以暂停generator函数返回的遍历器对象的状态 function* helloWorldGenerator() { yield 'hello'; yield 'world'; return 'ending'; } var hw = helloWorldGenerator(); 上述存在三个状态：hello、world、return 通过next方法才会遍历到下一个内部状态，其运行逻辑如下： 遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。 下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式 如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。 如果该函数没有return语句，则返回的对象的value属性值为undefined hw.next() // { value: 'hello', done: false } hw.next() // { value: 'world', done: false } hw.next() // { value: 'ending', done: true } hw.next() // { value: undefined, done: true } done用来判断是否存在下个状态，value对应状态值 yield表达式本身没有返回值，或者说总是返回undefined 通过调用next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值 function* foo(x) { var y = 2 * (yield (x + 1)); var z = yield (y / 3); return (x + y + z); } var a = foo(5); a.next() // Object{value:6, done:false} a.next() // Object{value:NaN, done:false} a.next() // Object{value:NaN, done:true} var b = foo(5); b.next() // { value:6, done:false } b.next(12) // { value:8, done:false } b.next(13) // { value:42, done:true } 正因为Generator函数返回Iterator对象，因此我们还可以通过for...of进行遍历 function* foo() { yield 1; yield 2; yield 3; yield 4; yield 5; return 6; } for (let v of foo()) { console.log(v); } // 1 2 3 4 5 原生对象没有遍历接口，通过Generator函数为它加上这个接口，就能使用for...of进行遍历了 function* objectEntries(obj) { let propKeys = Reflect.ownKeys(obj); for (let propKey of propKeys) { yield [propKey, obj[propKey]]; } } let jane = { first: 'Jane', last: 'Doe' }; for (let [key, value] of objectEntries(jane)) { console.log(`${key}: ${value}`); } // first: Jane // last: Doe 三、异步解决方案 回顾之前展开异步解决的方案： 回调函数 Promise 对象 generator 函数 async/await 这里通过文件读取案例，将几种解决异步的方案进行一个比较： 回调函数 所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，再调用这个函数 fs.readFile('/etc/fstab', function (err, data) { if (err) throw err; console.log(data); fs.readFile('/etc/shells', function (err, data) { if (err) throw err; console.log(data); }); }); readFile函数的第三个参数，就是回调函数，等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行 Promise Promise就是为了解决回调地狱而产生的，将回调函数的嵌套，改成链式调用 const fs = require('fs'); const readFile = function (fileName) { return new Promise(function (resolve, reject) { fs.readFile(fileName, function(error, data) { if (error) return reject(error); resolve(data); }); }); }; readFile('/etc/fstab').then(data =>{ console.log(data) return readFile('/etc/shells') }).then(data => { console.log(data) }) 这种链式操作形式，使异步任务的两段执行更清楚了，但是也存在了很明显的问题，代码变得冗杂了，语义化并不强 generator yield表达式可以暂停函数执行，next方法用于恢复函数执行，这使得Generator函数非常适合将异步任务同步化 const gen = function* () { const f1 = yield readFile('/etc/fstab'); const f2 = yield readFile('/etc/shells'); console.log(f1.toString()); console.log(f2.toString()); }; async/await 将上面Generator函数改成async/await形式，更为简洁，语义化更强了 const asyncReadFile = async function () { const f1 = await readFile('/etc/fstab'); const f2 = await readFile('/etc/shells'); console.log(f1.toString()); console.log(f2.toString()); }; 区别： 通过上述代码进行分析，将promise、Generator、async/await进行比较： promise和async/await是专门用于处理异步操作的 Generator并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署Interator接口...） promise编写代码相比Generator、async更为复杂化，且可读性也稍差 Generator、async需要与promise对象搭配处理异步情况 async实质是Generator的语法糖，相当于会自动执行Generator函数 async使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案 四、使用场景 Generator是异步解决的一种方案，最大特点则是将异步操作同步化表达出来 function* loadUI() { showLoadingScreen(); yield loadUIDataAsynchronously(); hideLoadingScreen(); } var loader = loadUI(); // 加载UI loader.next() // 卸载UI loader.next() 包括redux-saga中间件也充分利用了Generator特性 import { call, put, takeEvery, takeLatest } from 'redux-saga/effects' import Api from '...' function* fetchUser(action) { try { const user = yield call(Api.fetchUser, action.payload.userId); yield put({type: \"USER_FETCH_SUCCEEDED\", user: user}); } catch (e) { yield put({type: \"USER_FETCH_FAILED\", message: e.message}); } } function* mySaga() { yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser); } function* mySaga() { yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser); } export default mySaga; 还能利用Generator函数，在对象上实现Iterator接口 function* iterEntries(obj) { let keys = Object.keys(obj); for (let i=0; i 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/module.html":{"url":"es6/module.html","title":"ES6中Module","keywords":"","body":"面试官：你是怎么理解ES6中Module的？使用场景？ 一、介绍 模块，（Module），是能够单独命名并独立地完成一定功能的程序语句的集合（即程序代码和数据结构的集合体）。 两个基本的特征：外部特征和内部特征 外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能 内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码） 为什么需要模块化 代码抽象 代码封装 代码复用 依赖管理 如果没有模块化，我们代码会怎样？ 变量和方法不容易维护，容易污染全局作用域 加载资源的方式通过script标签从上到下。 依赖的环境主观逻辑偏重，代码较多就会比较复杂。 大型项目资源难以维护，特别是多人合作的情况下，资源的引入会让人奔溃 因此，需要一种将JavaScript程序模块化的机制，如 CommonJs (典型代表：node.js早期) AMD (典型代表：require.js) CMD (典型代表：sea.js) AMD Asynchronous ModuleDefinition（AMD），异步模块定义，采用异步方式加载模块。所有依赖模块的语句，都定义在一个回调函数中，等到模块加载完成之后，这个回调函数才会运行 代表库为require.js /** main.js 入口文件/主模块 **/ // 首先用config()指定各模块路径和引用名 require.config({ baseUrl: \"js/lib\", paths: { \"jquery\": \"jquery.min\", //实际路径为js/lib/jquery.min.js \"underscore\": \"underscore.min\", } }); // 执行基本操作 require([\"jquery\",\"underscore\"],function($,_){ // some code here }); CommonJs CommonJS 是一套 Javascript 模块规范，用于服务端 // a.js module.exports={ foo , bar} // b.js const { foo,bar } = require('./a.js') 其有如下特点： 所有代码都运行在模块作用域，不会污染全局作用域 模块是同步加载的，即只有加载完成，才能执行后面的操作 模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存 require返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值 既然存在了AMD以及CommonJs机制，ES6的Module又有什么不一样？ ES6 在语言标准的层面上，实现了Module，即模块功能，完全可以取代 CommonJS和 AMD规范，成为浏览器和服务器通用的模块解决方案 CommonJS 和AMD 模块，都只能在运行时确定这些东西。比如，CommonJS模块就是对象，输入时必须查找对象属性 // CommonJS模块 let { stat, exists, readfile } = require('fs'); // 等同于 let _fs = require('fs'); let stat = _fs.stat; let exists = _fs.exists; let readfile = _fs.readfile; ES6设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量 // ES6模块 import { stat, exists, readFile } from 'fs'; 上述代码，只加载3个方法，其他方法不加载，即 ES6 可以在编译时就完成模块加载 由于编译加载，使得静态分析成为可能。包括现在流行的typeScript也是依靠静态分析实现功能 二、使用 ES6模块内部自动采用了严格模式，这里就不展开严格模式的限制，毕竟这是ES5之前就已经规定好 模块功能主要由两个命令构成： export：用于规定模块的对外接口 import：用于输入其他模块提供的功能 export 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量 // profile.js export var firstName = 'Michael'; export var lastName = 'Jackson'; export var year = 1958; 或 // 建议使用下面写法，这样能瞬间确定输出了哪些变量 var firstName = 'Michael'; var lastName = 'Jackson'; var year = 1958; export { firstName, lastName, year }; 输出函数或类 export function multiply(x, y) { return x * y; }; 通过as可以进行输出变量的重命名 function v1() { ... } function v2() { ... } export { v1 as streamV1, v2 as streamV2, v2 as streamLatestVersion }; import 使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块 // main.js import { firstName, lastName, year } from './profile.js'; function setName(element) { element.textContent = firstName + ' ' + lastName; } 同样如果想要输入变量起别名，通过as关键字 import { lastName as surname } from './profile.js'; 当加载整个模块的时候，需要用到星号* // circle.js export function area(radius) { return Math.PI * radius * radius; } export function circumference(radius) { return 2 * Math.PI * radius; } // main.js import * as circle from './circle'; console.log(circle) // {area:area,circumference:circumference} 输入的变量都是只读的，不允许修改，但是如果是对象，允许修改属性 import {a} from './xxx.js' a.foo = 'hello'; // 合法操作 a = {}; // Syntax Error : 'a' is read-only; 不过建议即使能修改，但我们不建议。因为修改之后，我们很难差错 import后面我们常接着from关键字，from指定模块文件的位置，可以是相对路径，也可以是绝对路径 import { a } from './a'; 如果只有一个模块名，需要有配置文件，告诉引擎模块的位置 import { myMethod } from 'util'; 在编译阶段，import会提升到整个模块的头部，首先执行 foo(); import { foo } from 'my_module'; 多次重复执行同样的导入，只会执行一次 import 'lodash'; import 'lodash'; 上面的情况，大家都能看到用户在导入模块的时候，需要知道加载的变量名和函数，否则无法加载 如果不需要知道变量名或函数就完成加载，就要用到export default命令，为模块指定默认输出 // export-default.js export default function () { console.log('foo'); } 加载该模块的时候，import命令可以为该函数指定任意名字 // import-default.js import customName from './export-default'; customName(); // 'foo' 动态加载 允许您仅在需要时动态加载模块，而不必预先加载所有模块，这存在明显的性能优势 这个新功能允许您将import()作为函数调用，将其作为参数传递给模块的路径。 它返回一个 promise，它用一个模块对象来实现，让你可以访问该对象的导出 import('/modules/myModule.mjs') .then((module) => { // Do something with the module. }); 复合写法 如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起 export { foo, bar } from 'my_module'; // 可以简单理解为 import { foo, bar } from 'my_module'; export { foo, bar }; 同理能够搭配as、*搭配使用 三、使用场景 如今，ES6模块化已经深入我们日常项目开发中，像vue、react项目搭建项目，组件化开发处处可见，其也是依赖模块化实现 vue组件 组件化开发 ---- 模块化 export default { name: 'HelloWorld', props: { msg: String } } react组件 function App() { return ( 组件化开发 ---- 模块化 ); } export default App; 包括完成一些复杂应用的时候，我们也可以拆分成各个模块 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/promise.html":{"url":"es6/promise.html","title":"ES6中的promise","keywords":"","body":"面试官：你是怎么理解ES6中 Promise的？使用场景？ 一、介绍 Promise，译为承诺，是异步编程的一种解决方案，比传统的解决方案（回调函数）更加合理和更加强大 在以往我们如果处理多层异步操作，我们往往会像下面那样编写我们的代码 doSomething(function(result) { doSomethingElse(result, function(newResult) { doThirdThing(newResult, function(finalResult) { console.log('得到最终结果: ' + finalResult); }, failureCallback); }, failureCallback); }, failureCallback); 阅读上面代码，是不是很难受，上述形成了经典的回调地狱 现在通过Promise的改写上面的代码 doSomething().then(function(result) { return doSomethingElse(result); }) .then(function(newResult) { return doThirdThing(newResult); }) .then(function(finalResult) { console.log('得到最终结果: ' + finalResult); }) .catch(failureCallback); 瞬间感受到promise解决异步操作的优点： 链式操作减低了编码难度 代码可读性明显增强 下面我们正式来认识promise： 状态 promise对象仅有三种状态 pending（进行中） fulfilled（已成功） rejected（已失败） 特点 对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态 一旦状态改变（从pending变为fulfilled和从pending变为rejected），就不会再变，任何时候都可以得到这个结果 流程 认真阅读下图，我们能够轻松了解promise整个流程 二、用法 Promise对象是一个构造函数，用来生成Promise实例 const promise = new Promise(function(resolve, reject) {}); Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功” reject函数的作用是，将Promise对象的状态从“未完成”变为“失败” 实例方法 Promise构建出来的实例存在以下方法： then() then() catch() finally() then() then是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数 then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因 getJSON(\"/posts.json\").then(function(json) { return json.post; }).then(function(post) { // ... }); catch catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数 getJSON('/posts.json').then(function(posts) { // ... }).catch(function(error) { // 处理 getJSON 和 前一个回调函数运行时发生的错误 console.log('发生错误！', error); }); Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止 getJSON('/post/1.json').then(function(post) { return getJSON(post.commentURL); }).then(function(comments) { // some code }).catch(function(error) { // 处理前面三个Promise产生的错误 }); 一般来说，使用catch方法代替then()第二个参数 Promise对象抛出的错误不会传递到外层代码，即不会有任何反应 const someAsyncThing = function() { return new Promise(function(resolve, reject) { // 下面一行会报错，因为x没有声明 resolve(x + 2); }); }; 浏览器运行到这一行，会打印出错误提示ReferenceError: x is not defined，但是不会退出进程 catch()方法之中，还能再抛出错误，通过后面catch方法捕获到 finally() finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作 promise .then(result => {···}) .catch(error => {···}) .finally(() => {···}); 构造函数方法 Promise构造函数存在以下方法： all() race() allSettled() resolve() reject() try() all() Promise.all()方法用于将多个 Promise实例，包装成一个新的 Promise实例 const p = Promise.all([p1, p2, p3]); 接受一个数组（迭代对象）作为参数，数组成员都应为Promise实例 实例p的状态由p1、p2、p3决定，分为两种： 只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数 只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数 注意，如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法 const p1 = new Promise((resolve, reject) => { resolve('hello'); }) .then(result => result) .catch(e => e); const p2 = new Promise((resolve, reject) => { throw new Error('报错了'); }) .then(result => result) .catch(e => e); Promise.all([p1, p2]) .then(result => console.log(result)) .catch(e => console.log(e)); // [\"hello\", Error: 报错了] 如果p2没有自己的catch方法，就会调用Promise.all()的catch方法 const p1 = new Promise((resolve, reject) => { resolve('hello'); }) .then(result => result); const p2 = new Promise((resolve, reject) => { throw new Error('报错了'); }) .then(result => result); Promise.all([p1, p2]) .then(result => console.log(result)) .catch(e => console.log(e)); // Error: 报错了 race() Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例 const p = Promise.race([p1, p2, p3]); 只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变 率先改变的 Promise 实例的返回值则传递给p的回调函数 const p = Promise.race([ fetch('/resource-that-may-take-a-while'), new Promise(function (resolve, reject) { setTimeout(() => reject(new Error('request timeout')), 5000) }) ]); p .then(console.log) .catch(console.error); allSettled() Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例 只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束 const promises = [ fetch('/api-1'), fetch('/api-2'), fetch('/api-3'), ]; await Promise.allSettled(promises); removeLoadingIndicator(); resolve() 将现有对象转为 Promise对象 Promise.resolve('foo') // 等价于 new Promise(resolve => resolve('foo')) 参数可以分成四种情况，分别如下： 参数是一个 Promise 实例，promise.resolve将不做任何修改、原封不动地返回这个实例 参数是一个thenable对象，promise.resolve会将这个对象转为 Promise对象，然后就立即执行thenable对象的then()方法 参数不是具有then()方法的对象，或根本就不是对象，Promise.resolve()会返回一个新的 Promise 对象，状态为resolved 没有参数时，直接返回一个resolved状态的 Promise 对象 reject() Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected const p = Promise.reject('出错了'); // 等同于 const p = new Promise((resolve, reject) => reject('出错了')) p.then(null, function (s) { console.log(s) }); // 出错了 Promise.reject()方法的参数，会原封不动地变成后续方法的参数 Promise.reject('出错了') .catch(e => { console.log(e === '出错了') }) // true 三、使用场景 将图片的加载写成一个Promise，一旦加载完成，Promise的状态就发生变化 const preloadImage = function (path) { return new Promise(function (resolve, reject) { const image = new Image(); image.onload = resolve; image.onerror = reject; image.src = path; }); }; 通过链式操作，将多个渲染数据分别给个then，让其各司其职。或当下个异步请求依赖上个请求结果的时候，我们也能够通过链式操作友好解决问题 // 各司其职 getInfo().then(res=>{ let { bannerList } = res //渲染轮播图 console.log(bannerList) return res }).then(res=>{ let { storeList } = res //渲染店铺列表 console.log(storeList) return res }).then(res=>{ let { categoryList } = res console.log(categoryList) //渲染分类列表 return res }) 通过all()实现多个请求合并在一起，汇总所有请求结果，只需设置一个loading即可 function initLoad(){ // loading.show() //加载loading Promise.all([getBannerList(),getStoreList(),getCategoryList()]).then(res=>{ console.log(res) loading.hide() //关闭loading }).catch(err=>{ console.log(err) loading.hide()//关闭loading }) } //数据初始化 initLoad() 通过race可以设置图片请求超时 //请求某个图片资源 function requestImg(){ var p = new Promise(function(resolve, reject){ var img = new Image(); img.onload = function(){ resolve(img); } //img.src = \"https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg\"; 正确的 img.src = \"https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1\"; }); return p; } //延时函数，用于给请求计时 function timeout(){ var p = new Promise(function(resolve, reject){ setTimeout(function(){ reject('图片请求超时'); }, 5000); }); return p; } Promise .race([requestImg(), timeout()]) .then(function(results){ console.log(results); }) .catch(function(reason){ console.log(reason); }); 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/proxy.html":{"url":"es6/proxy.html","title":"ES6中的Proxy与使用场景","keywords":"","body":"面试官：你是怎么理解ES6中Proxy的？使用场景? 一、介绍 定义： 用于定义基本操作的自定义行为 本质： 修改的是程序默认形为，就形同于在编程语言层面上做修改，属于元编程(meta programming) 元编程（Metaprogramming，又译超编程，是指某类计算机程序的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作 一段代码来理解 #!/bin/bash # metaprogram echo '#!/bin/bash' >program for ((I=1; I>program done chmod +x program 这段程序每执行一次能帮我们生成一个名为program的文件，文件内容为1024行echo，如果我们手动来写1024行代码，效率显然低效 元编程优点：与手工编写全部代码相比，程序员可以获得更高的工作效率，或者给与程序更大的灵活度去处理新的情形而无需重新编译 Proxy 亦是如此，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等） 二、用法 Proxy为 构造函数，用来生成 Proxy实例 var proxy = new Proxy(target, handler) 参数 target表示所要拦截的目标对象（任何类型的对象，包括原生数组，函数，甚至另一个代理）） handler通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为 handler解析 关于handler拦截属性，有如下： get(target,propKey,receiver)：拦截对象属性的读取 set(target,propKey,value,receiver)：拦截对象属性的设置 has(target,propKey)：拦截propKey in proxy的操作，返回一个布尔值 deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值 ownKeys(target)：拦截Object.keys(proxy)、for...in等循环，返回一个数组 getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象 defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc），返回一个布尔值 preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值 getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象 isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值 setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值 apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作 construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作 Reflect 若需要在Proxy内部调用对象的默认行为，建议使用Reflect，其是ES6中操作对象而提供的新 API 基本特点： 只要Proxy对象具有的代理方法，Reflect对象全部具有，以静态方法的形式存在 修改某些Object方法的返回结果，让其变得更合理（定义不存在属性行为的时候不报错而是返回false） 让Object操作都变成函数行为 下面我们介绍proxy几种用法： get() get接受三个参数，依次为目标对象、属性名和 proxy 实例本身，最后一个参数可选 var person = { name: \"张三\" }; var proxy = new Proxy(person, { get: function(target, propKey) { return Reflect.get(target,propKey) } }); proxy.name // \"张三\" get能够对数组增删改查进行拦截，下面是试下你数组读取负数的索引 function createArray(...elements) { let handler = { get(target, propKey, receiver) { let index = Number(propKey); if (index 注意：如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则会报错 const target = Object.defineProperties({}, { foo: { value: 123, writable: false, configurable: false }, }); const handler = { get(target, propKey) { return 'abc'; } }; const proxy = new Proxy(target, handler); proxy.foo // TypeError: Invariant check failed set() set方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身 假定Person对象有一个age属性，该属性应该是一个不大于 200 的整数，那么可以使用Proxy保证age的属性值符合要求 let validator = { set: function(obj, prop, value) { if (prop === 'age') { if (!Number.isInteger(value)) { throw new TypeError('The age is not an integer'); } if (value > 200) { throw new RangeError('The age seems invalid'); } } // 对于满足条件的 age 属性以及其他属性，直接保存 obj[prop] = value; } }; let person = new Proxy({}, validator); person.age = 100; person.age // 100 person.age = 'young' // 报错 person.age = 300 // 报错 如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用 const obj = {}; Object.defineProperty(obj, 'foo', { value: 'bar', writable: false, }); const handler = { set: function(obj, prop, value, receiver) { obj[prop] = 'baz'; } }; const proxy = new Proxy(obj, handler); proxy.foo = 'baz'; proxy.foo // \"bar\" 注意，严格模式下，set代理如果没有返回true，就会报错 'use strict'; const handler = { set: function(obj, prop, value, receiver) { obj[prop] = receiver; // 无论有没有下面这一行，都会报错 return false; } }; const proxy = new Proxy({}, handler); proxy.foo = 'bar'; // TypeError: 'set' on proxy: trap returned falsish for property 'foo' deleteProperty() deleteProperty方法用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除 var handler = { deleteProperty (target, key) { invariant(key, 'delete'); Reflect.deleteProperty(target,key) return true; } }; function invariant (key, action) { if (key[0] === '_') { throw new Error(`无法删除私有属性`); } } var target = { _prop: 'foo' }; var proxy = new Proxy(target, handler); delete proxy._prop // Error: 无法删除私有属性 注意，目标对象自身的不可配置（configurable）的属性，不能被deleteProperty方法删除，否则报错 取消代理 Proxy.revocable(target, handler); 三、使用场景 Proxy其功能非常类似于设计模式中的代理模式，常用功能如下： 拦截和监视外部对对象的访问 降低函数或类的复杂度 在复杂操作前对操作进行校验或对所需资源进行管理 使用 Proxy 保障数据类型的准确性 let numericDataStore = { count: 0, amount: 1234, total: 14 }; numericDataStore = new Proxy(numericDataStore, { set(target, key, value, proxy) { if (typeof value !== 'number') { throw Error(\"属性只能是number类型\"); } return Reflect.set(target, key, value, proxy); } }); numericDataStore.count = \"foo\" // Error: 属性只能是number类型 numericDataStore.count = 333 // 赋值成功 声明了一个私有的 apiKey，便于 api 这个对象内部的方法调用，但不希望从外部也能够访问 api._apiKey let api = { _apiKey: '123abc456def', getUsers: function(){ }, getUser: function(userId){ }, setUser: function(userId, config){ } }; const RESTRICTED = ['_apiKey']; api = new Proxy(api, { get(target, key, proxy) { if(RESTRICTED.indexOf(key) > -1) { throw Error(`${key} 不可访问.`); } return Reflect.get(target, key, proxy); }, set(target, key, value, proxy) { if(RESTRICTED.indexOf(key) > -1) { throw Error(`${key} 不可修改`); } return Reflect.get(target, key, value, proxy); } }); console.log(api._apiKey) api._apiKey = '987654321' // 上述都抛出错误 还能通过使用Proxy实现观察者模式 观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行 observable函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数 const queuedObservers = new Set(); const observe = fn => queuedObservers.add(fn); const observable = obj => new Proxy(obj, {set}); function set(target, key, value, receiver) { const result = Reflect.set(target, key, value, receiver); queuedObservers.forEach(observer => observer()); return result; } 观察者函数都放进Set集合，当修改obj的值，在会set函数中拦截，自动执行Set所有的观察者 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/set_map.html":{"url":"es6/set_map.html","title":"ES6新增Set、Map两种数据结构","keywords":"","body":"面试官：你是怎么理解ES6新增Set、Map两种数据结构的？ 如果要用一句来描述，我们可以说 Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构 什么是集合？什么又是字典？ 集合是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合 字典是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同 区别？ 共同点：集合、字典都可以存储不重复的值 不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储 一、Set Set是es6新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合 Set本身是一个构造函数，用来生成 Set 数据结构 const s = new Set(); 增删改查 Set的实例关于增删改查的方法： add() delete() has() clear() add() 添加某个值，返回 Set 结构本身 当添加实例中已经存在的元素，set不会进行处理添加 s.add(1).add(2).add(2); // 2只被添加了一次 delete() 删除某个值，返回一个布尔值，表示删除是否成功 s.delete(1) has() 返回一个布尔值，判断该值是否为Set的成员 s.has(2) clear() 清除所有成员，没有返回值 s.clear() 遍历 Set实例遍历的方法有如下： 关于遍历的方法，有如下： keys()：返回键名的遍历器 values()：返回键值的遍历器 entries()：返回键值对的遍历器 forEach()：使用回调函数遍历每个成员 Set的遍历顺序就是插入顺序 keys方法、values方法、entries方法返回的都是遍历器对象 let set = new Set(['red', 'green', 'blue']); for (let item of set.keys()) { console.log(item); } // red // green // blue for (let item of set.values()) { console.log(item); } // red // green // blue for (let item of set.entries()) { console.log(item); } // [\"red\", \"red\"] // [\"green\", \"green\"] // [\"blue\", \"blue\"] forEach()用于对每个成员执行某种操作，没有返回值，键值、键名都相等，同样的forEach方法有第二个参数，用于绑定处理函数的this let set = new Set([1, 4, 9]); set.forEach((value, key) => console.log(key + ' : ' + value)) // 1 : 1 // 4 : 4 // 9 : 9 扩展运算符和Set 结构相结合实现数组或字符串去重 // 数组 let arr = [3, 5, 2, 2, 5, 5]; let unique = [...new Set(arr)]; // [3, 5, 2] // 字符串 let str = \"352255\"; let unique = [...new Set(str)].join(\"\"); // \"\" 实现并集、交集、和差集 let a = new Set([1, 2, 3]); let b = new Set([4, 3, 2]); // 并集 let union = new Set([...a, ...b]); // Set {1, 2, 3, 4} // 交集 let intersect = new Set([...a].filter(x => b.has(x))); // set {2, 3} // （a 相对于 b 的）差集 let difference = new Set([...a].filter(x => !b.has(x))); // Set {1} 二、Map Map类型是键值对的有序列表，而键和值都可以是任意类型 Map本身是一个构造函数，用来生成 Map 数据结构 const m = new Map() 增删改查 Map 结构的实例针对增删改查有以下属性和操作方法： size 属性 set() get() has() delete() clear() size size属性返回 Map 结构的成员总数。 const map = new Map(); map.set('foo', true); map.set('bar', false); map.size // 2 set() 设置键名key对应的键值为value，然后返回整个 Map 结构 如果key已经有值，则键值会被更新，否则就新生成该键 同时返回的是当前Map对象，可采用链式写法 const m = new Map(); m.set('edition', 6) // 键是字符串 m.set(262, 'standard') // 键是数值 m.set(undefined, 'nah') // 键是 undefined m.set(1, 'a').set(2, 'b').set(3, 'c') // 链式操作 get() get方法读取key对应的键值，如果找不到key，返回undefined const m = new Map(); const hello = function() {console.log('hello');}; m.set(hello, 'Hello ES6!') // 键是函数 m.get(hello) // Hello ES6! has() has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中 const m = new Map(); m.set('edition', 6); m.set(262, 'standard'); m.set(undefined, 'nah'); m.has('edition') // true m.has('years') // false m.has(262) // true m.has(undefined) // true delete() delete方法删除某个键，返回true。如果删除失败，返回false const m = new Map(); m.set(undefined, 'nah'); m.has(undefined) // true m.delete(undefined) m.has(undefined) // false clear() clear方法清除所有成员，没有返回值 let map = new Map(); map.set('foo', true); map.set('bar', false); map.size // 2 map.clear() map.size // 0 遍历 Map结构原生提供三个遍历器生成函数和一个遍历方法： keys()：返回键名的遍历器 values()：返回键值的遍历器 entries()：返回所有成员的遍历器 forEach()：遍历 Map 的所有成员 遍历顺序就是插入顺序 const map = new Map([ ['F', 'no'], ['T', 'yes'], ]); for (let key of map.keys()) { console.log(key); } // \"F\" // \"T\" for (let value of map.values()) { console.log(value); } // \"no\" // \"yes\" for (let item of map.entries()) { console.log(item[0], item[1]); } // \"F\" \"no\" // \"T\" \"yes\" // 或者 for (let [key, value] of map.entries()) { console.log(key, value); } // \"F\" \"no\" // \"T\" \"yes\" // 等同于使用map.entries() for (let [key, value] of map) { console.log(key, value); } // \"F\" \"no\" // \"T\" \"yes\" map.forEach(function(value, key, map) { console.log(\"Key: %s, Value: %s\", key, value); }); 三、WeakSet 和 WeakMap WeakSet 创建WeakSet实例 const ws = new WeakSet(); WeakSet可以接受一个具有 Iterable接口的对象作为参数 const a = [[1, 2], [3, 4]]; const ws = new WeakSet(a); // WeakSet {[1, 2], [3, 4]} 在API中WeakSet与Set有两个区别： 没有遍历操作的API 没有size属性 WeackSet只能成员只能是引用类型，而不能是其他类型的值 let ws=new WeakSet(); // 成员不是引用类型 let weakSet=new WeakSet([2,3]); console.log(weakSet) // 报错 // 成员为引用类型 let obj1={name:1} let obj2={name:1} let ws=new WeakSet([obj1,obj2]); console.log(ws) WeakSet里面的引用只要在外部消失，它在 WeakSet里面的引用就会自动消失 WeakMap WeakMap结构与Map结构类似，也是用于生成键值对的集合 在API中WeakMap与Map有两个区别： 没有遍历操作的API 没有clear清空方法 // WeakMap 可以使用 set 方法添加成员 const wm1 = new WeakMap(); const key = {foo: 1}; wm1.set(key, 2); wm1.get(key) // 2 // WeakMap 也可以接受一个数组， // 作为构造函数的参数 const k1 = [1, 2, 3]; const k2 = [4, 5, 6]; const wm2 = new WeakMap([[k1, 'foo'], [k2, 'bar']]); wm2.get(k2) // \"bar\" WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名 const map = new WeakMap(); map.set(1, 2) // TypeError: 1 is not an object! map.set(Symbol(), 2) // TypeError: Invalid value used as weak map key map.set(null, 2) // TypeError: Invalid value used as weak map key WeakMap的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用 举个场景例子： 在网页的 DOM 元素上添加数据，就可以使用WeakMap结构，当该 DOM 元素被清除，其所对应的WeakMap记录就会自动被移除 const wm = new WeakMap(); const element = document.getElementById('example'); wm.set(element, 'some information'); wm.get(element) // \"some information\" 注意：WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用 下面代码中，键值obj会在WeakMap产生新的引用，当你修改obj不会影响到内部 const wm = new WeakMap(); let key = {}; let obj = {foo: 1}; wm.set(key, obj); obj = null; wm.get(key) // Object {foo: 1} 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"es6/var_let_const.html":{"url":"es6/var_let_const.html","title":"var、let、const之间的区别","keywords":"","body":"面试官：说说var、let、const之间的区别 一、var 在ES5中，顶层对象的属性和全局变量是等价的，用var声明的变量既是全局变量，也是顶层变量 注意：顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象 var a = 10; console.log(window.a) // 10 使用var声明的变量存在变量提升的情况 console.log(a) // undefined var a = 20 在编译阶段，编译器会将其变成以下执行 var a console.log(a) a = 20 使用var，我们能够对一个变量进行多次声明，后面声明的变量会覆盖前面的变量声明 var a = 20 var a = 30 console.log(a) // 30 在函数中使用使用var声明变量时候，该变量是局部的 var a = 20 function change(){ var a = 30 } change() console.log(a) // 20 而如果在函数内不使用var，该变量是全局的 var a = 20 function change(){ a = 30 } change() console.log(a) // 30 二、let let是ES6新增的命令，用来声明变量 用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效 { let a = 20 } console.log(a) // ReferenceError: a is not defined. 不存在变量提升 console.log(a) // 报错ReferenceError let a = 2 这表示在声明它之前，变量a是不存在的，这时如果用到它，就会抛出一个错误 只要块级作用域内存在let命令，这个区域就不再受外部影响 var a = 123 if (true) { a = 'abc' // ReferenceError let a; } 使用let声明变量前，该变量都不可用，也就是大家常说的“暂时性死区” 最后，let不允许在相同作用域中重复声明 let a = 20 let a = 30 // Uncaught SyntaxError: Identifier 'a' has already been declared 注意的是相同作用域，下面这种情况是不会报错的 let a = 20 { let a = 30 } 因此，我们不能在函数内部重新声明参数 function func(arg) { let arg; } func() // Uncaught SyntaxError: Identifier 'arg' has already been declared 三、const const声明一个只读的常量，一旦声明，常量的值就不能改变 const a = 1 a = 3 // TypeError: Assignment to constant variable. 这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值 const a; // SyntaxError: Missing initializer in const declaration 如果之前用var或let声明过变量，再用const声明同样会报错 var a = 20 let b = 20 const a = 30 const b = 30 // 都会报错 const实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动 对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量 对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的，并不能确保改变量的结构不变 const foo = {}; // 为 foo 添加一个属性，可以成功 foo.prop = 123; foo.prop // 123 // 将 foo 指向另一个对象，就会报错 foo = {}; // TypeError: \"foo\" is read-only 其它情况，const与let一致 四、区别 var、let、const三者区别可以围绕下面五点展开： 变量提升 暂时性死区 块级作用域 重复声明 修改声明的变量 使用 变量提升 var声明的变量存在变量提升，即变量可以在声明之前调用，值为undefined let和const不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错 // var console.log(a) // undefined var a = 10 // let console.log(b) // Cannot access 'b' before initialization let b = 10 // const console.log(c) // Cannot access 'c' before initialization const c = 10 暂时性死区 var不存在暂时性死区 let和const存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量 // var console.log(a) // undefined var a = 10 // let console.log(b) // Cannot access 'b' before initialization let b = 10 // const console.log(c) // Cannot access 'c' before initialization const c = 10 块级作用域 var不存在块级作用域 let和const存在块级作用域 // var { var a = 20 } console.log(a) // 20 // let { let b = 20 } console.log(b) // Uncaught ReferenceError: b is not defined // const { const c = 20 } console.log(c) // Uncaught ReferenceError: c is not defined 重复声明 var允许重复声明变量 let和const在同一作用域不允许重复声明变量 // var var a = 10 var a = 20 // 20 // let let b = 10 let b = 20 // Identifier 'b' has already been declared // const const c = 10 const c = 20 // Identifier 'c' has already been declared 修改声明的变量 var和let可以 const声明一个只读的常量。一旦声明，常量的值就不能改变 // var var a = 10 a = 20 console.log(a) // 20 //let let b = 10 b = 20 console.log(b) // 20 // const const c = 10 c = 20 console.log(c) // Uncaught TypeError: Assignment to constant variable 使用 能用const的情况尽量使用const，其他情况下大多数使用let，避免使用var 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/== _===.html":{"url":"JavaScript/== _===.html","title":"== 和 ===区别","keywords":"","body":"面试官：== 和 ===区别，分别在什么情况使用 一、等于操作符 等于操作符用两个等于号（ == ）表示，如果操作数相等，则会返回 true 前面文章，我们提到在JavaScript中存在隐式转换。等于操作符（==）在比较中会先进行类型转换，再确定操作数是否相等 遵循以下规则： 如果任一操作数是布尔值，则将其转换为数值再比较是否相等 let result1 = (true == 1); // true 如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等 let result1 = (\"55\" == 55); // true 如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法取得其原始值，再根据前面的规则进行比较 let obj = {valueOf:function(){return 1}} let result1 = (obj == 1); // true null和undefined相等 let result1 = (null == undefined ); // true 如果有任一操作数是 NaN ，则相等操作符返回 false let result1 = (NaN == NaN ); // false 如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true let obj1 = {name:\"xxx\"} let obj2 = {name:\"xxx\"} let result1 = (obj1 == obj2 ); // false 下面进一步做个小结： 两个都为简单类型，字符串和布尔值都会转换成数值，再比较 简单类型与引用类型比较，对象转化成其原始类型的值，再比较 两个都为引用类型，则比较它们是否指向同一个对象 null 和 undefined 相等 存在 NaN 则返回 false 二、全等操作符 全等操作符由 3 个等于号（ === ）表示，只有两个操作数在不转换的前提下相等才返回 true。即类型相同，值也需相同 let result1 = (\"55\" === 55); // false，不相等，因为数据类型不同 let result2 = (55 === 55); // true，相等，因为数据类型相同值也相同 undefined 和 null 与自身严格相等 let result1 = (null === null) //true let result2 = (undefined === undefined) //true 三、区别 相等操作符（==）会做类型转换，再进行值的比较，全等运算符不会做类型转换 let result1 = (\"55\" === 55); // false，不相等，因为数据类型不同 let result2 = (55 === 55); // true，相等，因为数据类型相同值也相同 null 和 undefined 比较，相等操作符（==）为true，全等为false let result1 = (null == undefined ); // true let result2 = (null === undefined); // false 小结 相等运算符隐藏的类型转换，会带来一些违反直觉的结果 '' == '0' // false 0 == '' // true 0 == '0' // true false == 'false' // false false == '0' // true false == undefined // false false == null // false null == undefined // true ' \\t\\r\\n' == 0 // true 但在比较null的情况的时候，我们一般使用相等操作符== const obj = {}; if(obj.x == null){ console.log(\"1\"); //执行 } 等同于下面写法 if(obj.x === null || obj.x === undefined) { ... } 使用相等操作符（==）的写法明显更加简洁了 所以，除了在比较对象属性为null或者undefined的情况下，我们可以使用相等操作符（==），其他情况建议一律使用全等操作符（===） 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/BOM.html":{"url":"JavaScript/BOM.html","title":"BOM理解","keywords":"","body":"面试官：说说你对BOM的理解，常见的BOM对象你了解哪些？ 一、是什么 BOM (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象 其作用就是跟浏览器做一些交互效果,比如如何进行页面的后退，前进，刷新，浏览器的窗口发生变化，滚动条的滚动，以及获取客户的一些信息如：浏览器品牌版本，屏幕分辨率 浏览器的全部内容可以看成DOM，整个浏览器可以看成BOM。区别如下： 二、window Bom的核心对象是window，它表示浏览器的一个实例 在浏览器中，window对象有双重角色，即是浏览器窗口的一个接口，又是全局对象 因此所有在全局作用域中声明的变量、函数都会变成window对象的属性和方法 var name = 'js每日一题'; function lookName(){ alert(this.name); } console.log(window.name); //js每日一题 lookName(); //js每日一题 window.lookName(); //js每日一题 关于窗口控制方法如下： moveBy(x,y)：从当前位置水平移动窗体x个像素，垂直移动窗体y个像素，x为负数，将向左移动窗体，y为负数，将向上移动窗体 moveTo(x,y)：移动窗体左上角到相对于屏幕左上角的(x,y)点 resizeBy(w,h)：相对窗体当前的大小，宽度调整w个像素，高度调整h个像素。如果参数为负值，将缩小窗体，反之扩大窗体 resizeTo(w,h)：把窗体宽度调整为w个像素，高度调整为h个像素 scrollTo(x,y)：如果有滚动条，将横向滚动条移动到相对于窗体宽度为x个像素的位置，将纵向滚动条移动到相对于窗体高度为y个像素的位置 scrollBy(x,y)： 如果有滚动条，将横向滚动条向左移动x个像素，将纵向滚动条向下移动y个像素 window.open() 既可以导航到一个特定的url，也可以打开一个新的浏览器窗口 如果 window.open() 传递了第二个参数，且该参数是已有窗口或者框架的名称，那么就会在目标窗口加载第一个参数指定的URL window.open('htttp://www.vue3js.cn','topFrame') ==> window.open() 会返回新窗口的引用，也就是新窗口的 window 对象 const myWin = window.open('http://www.vue3js.cn','myWin') window.close() 仅用于通过 window.open() 打开的窗口 新创建的 window 对象有一个 opener 属性，该属性指向打开他的原始窗口对象 三、location url地址如下： http://foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents location属性描述如下： 属性名 例子 说明 hash \"#contents\" utl中#后面的字符，没有则返回空串 host www.wrox.com:80 服务器名称和端口号 hostname www.wrox.com 域名，不带端口号 href http://www.wrox.com:80/WileyCDA/?q=javascript#contents 完整url pathname \"/WileyCDA/\" 服务器下面的文件路径 port 80 url的端口号，没有则为空 protocol http: 使用的协议 search ?q=javascript url的查询字符串，通常为？后面的内容 除了 hash之外，只要修改location的一个属性，就会导致页面重新加载新URL location.reload()，此方法可以重新刷新当前页面。这个方法会根据最有效的方式刷新页面，如果页面自上一次请求以来没有改变过，页面就会从浏览器缓存中重新加载 如果要强制从服务器中重新加载，传递一个参数true即可 四、navigator navigator 对象主要用来获取浏览器的属性，区分浏览器类型。属性较多，且兼容性比较复杂 下表列出了navigator对象接口定义的属性和方法： 五、screen 保存的纯粹是客户端能力信息，也就是浏览器窗口外面的客户端显示器的信息，比如像素宽度和像素高度 六、history history对象主要用来操作浏览器URL的历史记录，可以通过参数向前，向后，或者向指定URL跳转 常用的属性如下： history.go() 接收一个整数数字或者字符串参数：向最近的一个记录中包含指定字符串的页面跳转， history.go('maixaofei.com') 当参数为整数数字的时候，正数表示向前跳转指定的页面，负数为向后跳转指定的页面 history.go(3) //向前跳转三个记录 history.go(-1) //向后跳转一个记录 history.forward()：向前跳转一个页面 history.back()：向后跳转一个页面 history.length：获取历史记录数 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/Dom.html":{"url":"JavaScript/Dom.html","title":"Dom理解","keywords":"","body":"面试官：DOM常见的操作有哪些？ 一、DOM 文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口 它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容 任何 HTML或XML文档都可以用 DOM表示为一个由节点构成的层级结构 节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示： Page Hello World! DOM像原子包含着亚原子微粒那样，也有很多类型的DOM节点包含着其他类型的节点。接下来我们先看看其中的三种： content 上述结构中，div、p就是元素节点，content就是文本节点，title就是属性节点 二、操作 日常前端开发，我们都离不开DOM操作 在以前，我们使用Jquery，zepto等库来操作DOM，之后在vue，Angular，React等框架出现后，我们通过操作数据来控制DOM（绝大多数时候），越来越少的去直接操作DOM 但这并不代表原生操作不重要。相反，DOM操作才能有助于我们理解框架深层的内容 下面就来分析DOM常见的操作，主要分为： 创建节点 查询节点 更新节点 添加节点 删除节点 创建节点 createElement 创建新元素，接受一个参数，即要创建元素的标签名 const divEl = document.createElement(\"div\"); createTextNode 创建一个文本节点 const textEl = document.createTextNode(\"content\"); createDocumentFragment 用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到DOM中 const fragment = document.createDocumentFragment(); 当请求把一个DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment自身，而是它的所有子孙节点 createAttribute 创建属性节点，可以是自定义属性 const dataAttribute = document.createAttribute('custom'); consle.log(dataAttribute); 获取节点 querySelector 传入任何有效的css 选择器，即可选中单个 DOM元素（首个）： document.querySelector('.element') document.querySelector('#element') document.querySelector('div') document.querySelector('[name=\"username\"]') document.querySelector('div + p > span') 如果页面上没有指定的元素时，返回 null querySelectorAll 返回一个包含节点子树内所有与之相匹配的Element节点列表，如果没有相匹配的，则返回一个空节点列表 const notLive = document.querySelectorAll(\"p\"); 需要注意的是，该方法返回的是一个 NodeList的静态实例，它是一个静态的“快照”，而非“实时”的查询 关于获取DOM元素的方法还有如下，就不一一述说 document.getElementById('id属性值');返回拥有指定id的对象的引用 document.getElementsByClassName('class属性值');返回拥有指定class的对象集合 document.getElementsByTagName('标签名');返回拥有指定标签名的对象集合 document.getElementsByName('name属性值'); 返回拥有指定名称的对象结合 document/element.querySelector('CSS选择器'); 仅返回第一个匹配的元素 document/element.querySelectorAll('CSS选择器'); 返回所有匹配的元素 document.documentElement; 获取页面中的HTML标签 document.body; 获取页面中的BODY标签 document.all['']; 获取页面中的所有元素节点的对象集合型 除此之外，每个DOM元素还有parentNode、childNodes、firstChild、lastChild、nextSibling、previousSibling属性，关系图如下图所示 更新节点 innerHTML 不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树 // 获取... var p = document.getElementById('p'); // 设置文本为abc: p.innerHTML = 'ABC'; // ABC // 设置HTML: p.innerHTML = 'ABC RED XYZ'; // ...的内部结构已修改 innerText、textContent 自动对字符串进行HTML编码，保证无法设置任何HTML标签 // 获取... var p = document.getElementById('p-id'); // 设置文本: p.innerText = 'alert(\"Hi\")'; // HTML被自动编码，无法设置一个节点: // &lt;script&gt;alert(\"Hi\")&lt;/script&gt; 两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本 style DOM节点的style属性对应所有的CSS，可以直接获取或设置。遇到-需要转化为驼峰命名 // 获取... const p = document.getElementById('p-id'); // 设置CSS: p.style.color = '#ff0000'; p.style.fontSize = '20px'; // 驼峰命名 p.style.paddingTop = '2em'; 添加节点 innerHTML 如果这个DOM节点是空的，例如，，那么，直接使用innerHTML = 'child'就可以修改DOM节点的内容，相当于添加了新的DOM节点 如果这个DOM节点不是空的，那就不能这么做，因为innerHTML会直接替换掉原来的所有子节点 appendChild 把一个子节点添加到父节点的最后一个子节点 举个例子 JavaScript Java Python Scheme 添加一个p元素 const js = document.getElementById('js') js.innerHTML = \"JavaScript\" const list = document.getElementById('list'); list.appendChild(js); 现在HTML结构变成了下面 Java Python Scheme JavaScript 上述代码中，我们是获取DOM元素后再进行添加操作，这个js节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置 如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置 const list = document.getElementById('list'), const haskell = document.createElement('p'); haskell.id = 'haskell'; haskell.innerText = 'Haskell'; list.appendChild(haskell); insertBefore 把子节点插入到指定的位置，使用方法如下： parentElement.insertBefore(newElement, referenceElement) 子节点会插入到referenceElement之前 setAttribute 在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值 const div = document.getElementById('id') div.setAttribute('class', 'white');//第一个参数属性名，第二个参数属性值。 删除节点 删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉 // 拿到待删除节点: const self = document.getElementById('to-be-removed'); // 拿到父节点: const parent = self.parentElement; // 删除: const removed = parent.removeChild(self); removed === self; // true 删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置 相关链接 https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/ajax.html":{"url":"JavaScript/ajax.html","title":"Ajax原理与实现","keywords":"","body":"面试官：ajax原理是什么？如何实现？ 一、是什么 AJAX全称(Async Javascript and XML) 即异步的JavaScript 和XML，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页 Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用JavaScript来操作DOM而更新页面 流程图如下： 下面举个例子： 领导想找小李汇报一下工作，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作 Ajax请求数据流程与“领导想找小李汇报一下工作”类似，上述秘书就相当于XMLHttpRequest对象，领导相当于浏览器，响应数据相当于小李 浏览器可以发送HTTP请求后，接着做其他事情，等收到XHR返回来的数据再进行操作 二、实现过程 实现 Ajax异步交互需要服务器逻辑进行配合，需要完成以下步骤： 创建 Ajax的核心对象 XMLHttpRequest对象 通过 XMLHttpRequest 对象的 open() 方法与服务端建立连接 构建请求所需的数据内容，并通过XMLHttpRequest 对象的 send() 方法发送给服务器端 通过 XMLHttpRequest 对象提供的 onreadystatechange 事件监听服务器端你的通信状态 接受并处理服务端向客户端响应的数据结果 将处理结果更新到 HTML页面中 创建XMLHttpRequest对象 通过XMLHttpRequest() 构造函数用于初始化一个 XMLHttpRequest 实例对象 const xhr = new XMLHttpRequest(); 与服务器建立连接 通过 XMLHttpRequest 对象的 open() 方法与服务器建立连接 xhr.open(method, url, [async][, user][, password]) 参数说明： method：表示当前的请求方式，常见的有GET、POST url：服务端地址 async：布尔值，表示是否异步执行操作，默认为true user: 可选的用户名用于认证用途；默认为`null password: 可选的密码用于认证用途，默认为`null 给服务端发送数据 通过 XMLHttpRequest 对象的 send() 方法，将客户端页面的数据发送给服务端 xhr.send([body]) body: 在 XHR 请求中要发送的数据体，如果不传递数据则为 null 如果使用GET请求发送数据的时候，需要注意如下： 将请求数据添加到open()方法中的url地址中 发送请求数据中的send()方法中参数设置为null 绑定onreadystatechange事件 onreadystatechange 事件用于监听服务器端的通信状态，主要监听的属性为XMLHttpRequest.readyState , 关于XMLHttpRequest.readyState属性有五个状态，如下图显示 只要 readyState属性值一变化，就会触发一次 readystatechange 事件 XMLHttpRequest.responseText属性用于接收服务器端的响应结果 举个例子： const request = new XMLHttpRequest() request.onreadystatechange = function(e){ if(request.readyState === 4){ // 整个请求过程完毕 if(request.status >= 200 && request.status =400){ console.log(\"错误信息：\" + request.status) } } } request.open('POST','http://xxxx') request.send() 三、封装 通过上面对XMLHttpRequest对象的了解，下面来封装一个简单的ajax请求 //封装一个ajax请求 function ajax(options) { //创建XMLHttpRequest对象 const xhr = new XMLHttpRequest() //初始化参数的内容 options = options || {} options.type = (options.type || 'GET').toUpperCase() options.dataType = options.dataType || 'json' const params = options.data //发送请求 if (options.type === 'GET') { xhr.open('GET', options.url + '?' + params, true) xhr.send(null) } else if (options.type === 'POST') { xhr.open('POST', options.url, true) xhr.send(params) //接收请求 xhr.onreadystatechange = function () { if (xhr.readyState === 4) { let status = xhr.status if (status >= 200 && status 使用方式如下 ajax({ type: 'post', dataType: 'json', data: {}, url: 'https://xxxx', success: function(text,xml){//请求成功后的回调函数 console.log(text) }, fail: function(status){////请求失败后的回调函数 console.log(status) } }) 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/array_api.html":{"url":"JavaScript/array_api.html","title":"数组常用方法","keywords":"","body":"面试官：数组的常用方法有哪些？ 一、操作方法 数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会 下面对数组常用的操作方法做一个归纳 增 下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响 push() unshift() splice() concat() push() push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度 let colors = []; // 创建一个数组 let count = colors.push(\"red\", \"green\"); // 推入两项 console.log(count) // 2 unshift() unshift()在数组开头添加任意多个值，然后返回新的数组长度 let colors = new Array(); // 创建一个数组 let count = colors.unshift(\"red\", \"green\"); // 从数组开头推入两项 alert(count); // 2 splice 传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组 let colors = [\"red\", \"green\", \"blue\"]; let removed = colors.splice(1, 0, \"yellow\", \"orange\") console.log(colors) // red,yellow,orange,green,blue console.log(removed) // [] concat() 首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组 let colors = [\"red\", \"green\", \"blue\"]; let colors2 = colors.concat(\"yellow\", [\"black\", \"brown\"]); console.log(colors); // [\"red\", \"green\",\"blue\"] console.log(colors2); // [\"red\", \"green\", \"blue\", \"yellow\", \"black\", \"brown\"] 删 下面三种都会影响原数组，最后一项不影响原数组： pop() shift() splice() slice() pop() pop() 方法用于删除数组的最后一项，同时减少数组的length 值，返回被删除的项 let colors = [\"red\", \"green\"] let item = colors.pop(); // 取得最后一项 console.log(item) // green console.log(colors.length) // 1 shift() shift()方法用于删除数组的第一项，同时减少数组的length 值，返回被删除的项 let colors = [\"red\", \"green\"] let item = colors.shift(); // 取得第一项 console.log(item) // red console.log(colors.length) // 1 splice() 传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组 let colors = [\"red\", \"green\", \"blue\"]; let removed = colors.splice(0,1); // 删除第一项 console.log(colors); // green,blue console.log(removed); // red，只有一个元素的数组 slice() slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组 let colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]; let colors2 = colors.slice(1); let colors3 = colors.slice(1, 4); console.log(colors) // red,green,blue,yellow,purple concole.log(colors2); // green,blue,yellow,purple concole.log(colors3); // green,blue,yellow 改 即修改原来数组的内容，常用splice splice() 传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响 let colors = [\"red\", \"green\", \"blue\"]; let removed = colors.splice(1, 1, \"red\", \"purple\"); // 插入两个值，删除一个元素 console.log(colors); // red,red,purple,blue console.log(removed); // green，只有一个元素的数组 查 即查找元素，返回元素坐标或者元素值 indexOf() includes() find() indexOf() 返回要查找的元素在数组中的位置，如果没找到则返回 -1 let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; numbers.indexOf(4) // 3 includes() 返回要查找的元素在数组中的位置，找到返回true，否则false let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; numbers.includes(4) // true find() 返回第一个匹配的元素 const people = [ { name: \"Matt\", age: 27 }, { name: \"Nicholas\", age: 29 } ]; people.find((element, index, array) => element.age 二、排序方法 数组有两个方法可以用来对元素重新排序： reverse() sort() reverse() 顾名思义，将数组元素方向反转 let values = [1, 2, 3, 4, 5]; values.reverse(); alert(values); // 5,4,3,2,1 sort() sort()方法接受一个比较函数，用于判断哪个值应该排在前面 function compare(value1, value2) { if (value1 value2) { return 1; } else { return 0; } } let values = [0, 1, 5, 10, 15]; values.sort(compare); alert(values); // 0,1,5,10,15 三、转换方法 常见的转换方法有： join() join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串 let colors = [\"red\", \"green\", \"blue\"]; alert(colors.join(\",\")); // red,green,blue alert(colors.join(\"||\")); // red||green||blue 四、迭代方法 常用来迭代数组的方法（都不改变原数组）有如下： some() every() forEach() filter() map() some() 对数组每一项都运行传入的函数，如果有一项函数返回 true ，则这个方法返回 true let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; let someResult = numbers.every((item, index, array) => item > 2); console.log(someResult) // true every() 对数组每一项都运行传入的函数，如果对每一项函数都返回 true ，则这个方法返回 true let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; let everyResult = numbers.every((item, index, array) => item > 2); console.log(everyResult) // false forEach() 对数组每一项都运行传入的函数，没有返回值 let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; numbers.forEach((item, index, array) => { // 执行某些操作 }); filter() 对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回 let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; let filterResult = numbers.filter((item, index, array) => item > 2); console.log(filterResult); // 3,4,5,4,3 map() 对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组 let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]; let mapResult = numbers.map((item, index, array) => item * 2); console.log(mapResult) // 2,4,6,8,10,8,6,4,2 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/bind_call_apply.html":{"url":"JavaScript/bind_call_apply.html","title":"Bind Call Apply 区别","keywords":"","body":"面试官：bind、call、apply 区别？如何实现一个bind? 一、作用 call、apply、bind作用是改变函数执行时的上下文，简而言之就是改变函数运行时的this指向 那么什么情况下需要改变this的指向呢？下面举个例子 const name=\"lucy\"; const obj={ name:\"martin\", say:function () { console.log(this.name); } }; obj.say(); //martin，this指向obj对象 setTimeout(obj.say,0); //lucy，this指向window对象 从上面可以看到，正常情况say方法输出martin 但是我们把say放在setTimeout方法中，在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候this指向window，所以输出lucy 我们实际需要的是this指向obj对象，这时候就需要该改变this指向了 setTimeout(obj.say.bind(obj),0); //martin，this指向obj对象 二、区别 下面再来看看apply、call、bind的使用 apply apply接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入 改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次 function fn(...args){ console.log(this,args); } let obj = { myname:\"张三\" } fn.apply(obj,[1,2]); // this会变成传入的obj，传入的参数必须是一个数组； fn(1,2) // this指向window 当第一个参数为null、undefined的时候，默认指向window(在浏览器中) fn.apply(null,[1,2]); // this指向window fn.apply(undefined,[1,2]); // this指向window call call方法的第一个参数也是this的指向，后面传入的是一个参数列表 跟apply一样，改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次 function fn(...args){ console.log(this,args); } let obj = { myname:\"张三\" } fn.call(obj,1,2); // this会变成传入的obj，传入的参数必须是一个数组； fn(1,2) // this指向window 同样的，当第一个参数为null、undefined的时候，默认指向window(在浏览器中) fn.call(null,[1,2]); // this指向window fn.call(undefined,[1,2]); // this指向window bind bind方法和call很相似，第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入) 改变this指向后不会立即执行，而是返回一个永久改变this指向的函数 function fn(...args){ console.log(this,args); } let obj = { myname:\"张三\" } const bindFn = fn.bind(obj); // this 也会变成传入的obj ，bind不是立即执行需要执行一次 bindFn(1,2) // this指向obj fn(1,2) // this指向window 小结 从上面可以看到，apply、call、bind三者的区别在于： 三者都可以改变函数的this对象指向 三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window 三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入 bind是返回绑定this之后的函数，apply、call 则是立即执行 三、实现 实现bind的步骤，我们可以分解成为三部分： 修改this指向 动态传递参数 // 方式一：只在bind中传递函数参数 fn.bind(obj,1,2)() // 方式二：在bind中传递函数参数，也在返回函数中传递参数 fn.bind(obj,1)(2) 兼容new关键字 整体实现代码如下： Function.prototype.myBind = function (context) { // 判断调用对象是否为函数 if (typeof this !== \"function\") { throw new TypeError(\"Error\"); } // 获取参数 const args = [...arguments].slice(1), fn = this; return function Fn() { // 根据调用方式，传入不同绑定值 return fn.apply(this instanceof Fn ? new fn(...arguments) : context, args.concat(...arguments)); } } 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/cache.html":{"url":"JavaScript/cache.html","title":"Javascript本地存储","keywords":"","body":"面试官：Javascript本地存储的方式有哪些？区别及应用场景？ 一、方式 javaScript本地缓存的方法我们主要讲述以下四种： cookie sessionStorage localStorage indexedDB cookie Cookie，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 HTTP无状态导致的问题 作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 cookie有效期、安全性、使用范围的可选属性组成 但是cookie在每次请求中都会被发送，如果不使用 HTTPS并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 cookie保持登录态的网站上，如果 cookie被窃取，他人很容易利用你的 cookie来假扮成你登录网站 关于cookie常用的属性如下： Expires 用于设置 Cookie 的过期时间 Expires=Wed, 21 Oct 2015 07:28:00 GMT Max-Age 用于设置在 Cookie 失效之前需要经过的秒数（优先级比Expires高） Max-Age=604800 Domain指定了 Cookie 可以送达的主机名 Path指定了一个 URL路径，这个路径必须出现在要请求的资源的路径中才可以发送 Cookie 首部 Path=/docs # /docs/Web/ 下的资源会带 Cookie 首部 标记为 Secure的 Cookie只应通过被HTTPS协议加密过的请求发送给服务端 通过上述，我们可以看到cookie又开始的作用并不是为了缓存而设计出来，只是借用了cookie的特性实现缓存 关于cookie的使用如下： document.cookie = '名字=值'; 关于cookie的修改，首先要确定domain和path属性都是相同的才可以，其中有一个不同得时候都会创建出一个新的cookie Set-Cookie:name=aa; domain=aa.net; path=/ # 服务端设置 document.cookie =name=bb; domain=aa.net; path=/ # 客户端设置 最后cookie的删除，最常用的方法就是给cookie设置一个过期的事件，这样cookie过期后会被浏览器删除 localStorage HTML5新方法，IE8及以上浏览器都兼容 特点 生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的 存储的信息在同一域中是共享的 当本页操作（新增、修改、删除）了localStorage的时候，本页面不会触发storage事件,但是别的页面会触发storage事件。 大小：5M（跟浏览器厂商有关系） localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡 受同源策略的限制 下面再看看关于localStorage的使用 设置 localStorage.setItem('username','cfangxu'); 获取 localStorage.getItem('username') 获取键名 localStorage.key(0) //获取第一个键名 删除 localStorage.removeItem('username') 一次性清除所有存储 localStorage.clear() localStorage 也不是完美的，它有两个缺点： 无法像Cookie一样设置过期时间 只能存入字符串，无法直接存对象 localStorage.setItem('key', {name: 'value'}); console.log(localStorage.getItem('key')); // '[object, Object]' sessionStorage sessionStorage和 localStorage使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，sessionStorage 将会删除数据 扩展的前端存储方式 indexedDB是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索 虽然 Web Storage对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案 优点： 储存量理论上没有上限 所有操作都是异步的，相比 LocalStorage 同步操作性能更高，尤其是数据量较大时 原生支持储存JS的对象 是个正经的数据库，意味着数据库能干的事它都能干 缺点： 操作非常繁琐 本身有一定门槛 关于indexedDB的使用基本使用步骤如下： 打开数据库并且开始一个事务 创建一个 object store 构建一个请求来执行一些数据库操作，像增加或提取数据等。 通过监听正确类型的 DOM 事件以等待操作完成。 在操作结果上进行一些操作（可以在 request对象中找到） 关于使用indexdb的使用会比较繁琐，大家可以通过使用Godb.js库进行缓存，最大化的降低操作难度 二、区别 关于cookie、sessionStorage、localStorage三者的区别主要如下： 存储大小：cookie数据大小不能超过4k，sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 有效时间：localStorage存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； sessionStorage数据在当前浏览器窗口关闭后自动删除；cookie设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 数据与服务器之间的交互方式，cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端； sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 三、应用场景 在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择： 标记用户与跟踪用户行为的情况，推荐使用cookie 适合长期保存在本地的数据（令牌），推荐使用localStorage 敏感账号一次性登录，推荐使用sessionStorage 存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用indexedDB 相关连接 https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ https://github.com/chenstarx/GoDB.js 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/closure.html":{"url":"JavaScript/closure.html","title":"闭包的理解","keywords":"","body":"面试官：说说你对闭包的理解？闭包使用场景 一、是什么 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure） 也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域 在 JavaScript中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁 下面给出一个简单的例子 function init() { var name = \"Mozilla\"; // name 是一个被 init 创建的局部变量 function displayName() { // displayName() 是内部函数，一个闭包 alert(name); // 使用了父函数中声明的变量 } displayName(); } init(); displayName() 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量 二、使用场景 任何闭包的使用场景都离不开这两点： 创建私有变量 延长变量的生命周期 一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的 下面举个例子： 在页面上添加一些可以调整字号的按钮 function makeSizer(size) { return function() { document.body.style.fontSize = size + 'px'; }; } var size12 = makeSizer(12); var size14 = makeSizer(14); var size16 = makeSizer(16); document.getElementById('size-12').onclick = size12; document.getElementById('size-14').onclick = size14; document.getElementById('size-16').onclick = size16; 柯里化函数 柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用 // 假设我们有一个求长方形面积的函数 function getArea(width, height) { return width * height } // 如果我们碰到的长方形的宽老是10 const area1 = getArea(10, 20) const area2 = getArea(10, 30) const area3 = getArea(10, 40) // 我们可以使用闭包柯里化这个计算面积的函数 function getArea(width) { return height => { return width * height } } const getTenWidthArea = getArea(10) // 之后碰到宽度为10的长方形就可以这样计算面积 const area1 = getTenWidthArea(20) // 而且如果遇到宽度偶尔变化也可以轻松复用 const getTwentyWidthArea = getArea(20) 使用闭包模拟私有方法 在JavaScript中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法 下面举个例子： var Counter = (function() { var privateCounter = 0; function changeBy(val) { privateCounter += val; } return { increment: function() { changeBy(1); }, decrement: function() { changeBy(-1); }, value: function() { return privateCounter; } } })(); var Counter1 = makeCounter(); var Counter2 = makeCounter(); console.log(Counter1.value()); /* logs 0 */ Counter1.increment(); Counter1.increment(); console.log(Counter1.value()); /* logs 2 */ Counter1.decrement(); console.log(Counter1.value()); /* logs 1 */ console.log(Counter2.value()); /* logs 0 */ 上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式 两个计数器 Counter1 和 Counter2 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量 其他 例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期 三、注意事项 如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响 例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。 原因在于每个对象的创建，方法都会被重新赋值 function MyObject(name, message) { this.name = name.toString(); this.message = message.toString(); this.getName = function() { return this.name; }; this.getMessage = function() { return this.message; }; } 上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下： function MyObject(name, message) { this.name = name.toString(); this.message = message.toString(); } MyObject.prototype.getName = function() { return this.name; }; MyObject.prototype.getMessage = function() { return this.message; }; 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/context_stack.html":{"url":"JavaScript/context_stack.html","title":"执行上下文和执行栈","keywords":"","body":"面试官：JavaScript中执行上下文和执行栈是什么？ 一、执行上下文 简单的来说，执行上下文是一种对Javascript代码执行环境的抽象概念，也就是说只要有Javascript代码运行，那么它就一定是运行在执行上下文中 执行上下文的类型分为三种： 全局执行上下文：只有一个，浏览器中的全局对象就是 window对象，this 指向这个全局对象 函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文 Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用 下面给出全局上下文和函数上下文的例子： 紫色框住的部分为全局上下文，蓝色和橘色框起来的是不同的函数上下文。只有全局上下文（的变量）能被其他任何上下文访问 可以有任意多个函数上下文，每次调用函数创建一个新的上下文，会创建一个私有作用域，函数内部声明的任何变量都不能在当前函数作用域外部直接访问 二、生命周期 执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段 创建阶段 创建阶段即当函数被调用，但未执行任何其内部代码之前 创建阶段做了三件事： 确定 this 的值，也被称为 This Binding LexicalEnvironment（词法环境） 组件被创建 VariableEnvironment（变量环境） 组件被创建 伪代码如下： ExecutionContext = { ThisBinding = , // 确定this LexicalEnvironment = { ... }, // 词法环境 VariableEnvironment = { ... }, // 变量环境 } This Binding 确定this的值我们前面讲到，this的值是在执行的时候才能确认，定义的时候不能确认 词法环境 词法环境有两个组成部分： 全局环境：是一个没有外部环境的词法环境，其外部环境引用为null，有一个全局对象，this 的值指向这个全局对象 函数环境：用户在函数中定义的变量被存储在环境记录中，包含了arguments 对象，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境 伪代码如下： GlobalExectionContext = { // 全局执行上下文 LexicalEnvironment: { // 词法环境 EnvironmentRecord: { // 环境记录 Type: \"Object\", // 全局环境 // 标识符绑定在这里 outer: // 对外部环境的引用 } } FunctionExectionContext = { // 函数执行上下文 LexicalEnvironment: { // 词法环境 EnvironmentRecord: { // 环境记录 Type: \"Declarative\", // 函数环境 // 标识符绑定在这里 // 对外部环境的引用 outer: } } 变量环境 变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性 在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定 举个例子 let a = 20; const b = 30; var c; function multiply(e, f) { var g = 20; return e * f * g; } c = multiply(20, 30); 执行上下文如下： GlobalExectionContext = { ThisBinding: , LexicalEnvironment: { // 词法环境 EnvironmentRecord: { Type: \"Object\", // 标识符绑定在这里 a: , b: , multiply: } outer: }, VariableEnvironment: { // 变量环境 EnvironmentRecord: { Type: \"Object\", // 标识符绑定在这里 c: undefined, } outer: } } FunctionExectionContext = { ThisBinding: , LexicalEnvironment: { EnvironmentRecord: { Type: \"Declarative\", // 标识符绑定在这里 Arguments: {0: 20, 1: 30, length: 2}, }, outer: }, VariableEnvironment: { EnvironmentRecord: { Type: \"Declarative\", // 标识符绑定在这里 g: undefined }, outer: } } 留意上面的代码，let和const定义的变量a和b在创建阶段没有被赋值，但var声明的变量从在创建阶段被赋值为undefined 这是因为，创建阶段，会在代码中扫描变量和函数声明，然后将函数声明存储在环境中 但变量会被初始化为undefined(var声明的情况下)和保持uninitialized(未初始化状态)(使用let和const声明的情况下) 这就是变量提升的实际原因 执行阶段 在这阶段，执行变量赋值、代码执行 如果 Javascript 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 undefined 值 回收阶段 执行上下文出栈等待虚拟机回收执行上下文 二、执行栈 执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文 当Javascript引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中 每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中 引擎会执行位于执行栈栈顶的执行上下文(一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文 举个例子： let a = 'Hello World!'; function first() { console.log('Inside first function'); second(); console.log('Again inside first function'); } function second() { console.log('Inside second function'); } first(); console.log('Inside Global Execution Context'); 转化成图的形式 简单分析一下流程： 创建全局上下文请压入执行栈 first函数被调用，创建函数执行上下文并压入栈 执行first函数过程遇到second函数，再创建一个函数执行上下文并压入栈 second函数执行完毕，对应的函数执行上下文被推出执行栈，执行下一个执行上下文first函数 first函数执行完毕，对应的函数执行上下文也被推出栈中，然后执行全局上下文 所有代码执行完毕，全局上下文也会被推出栈中，程序结束 参考文献 https://zhuanlan.zhihu.com/p/107552264 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/continue_to_upload.html":{"url":"JavaScript/continue_to_upload.html","title":"大文件上传","keywords":"","body":"面试官：大文件上传如何做断点续传？ 一、是什么 不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂 文件上传简单，文件变大就复杂 上传大文件时，以下几个变量会影响我们的用户体验 服务器处理数据的能力 请求超时 网络波动 上传时间会变长，高频次文件上传失败，失败后又需要重新上传等等 为了解决上述问题，我们需要对大文件上传单独处理 这里涉及到分片上传及断点续传两个概念 分片上传 分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传 如下图 上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件 大致流程如下： 将需要上传的文件按照一定的分割规则，分割成相同大小的数据块； 初始化一个分片上传任务，返回本次分片上传唯一标识； 按照一定的策略（串行或并行）发送各个分片数据块； 发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件 断点续传 断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分 每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度 一般实现方式有两种： 服务器端返回，告知从哪开始 浏览器端自行处理 上传过程中将文件在服务器写为临时文件，等全部写完了（文件上传完），将此临时文件重命名为正式文件即可 如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可 二、实现思路 整体思路比较简单，拿到文件，保存文件唯一性标识，切割文件，分段上传，每次上传一段，根据唯一性标识判断文件上传进度，直到文件的全部片段上传完毕 下面的内容都是伪代码 读取文件内容： const input = document.querySelector('input'); input.addEventListener('change', function() { var file = this.files[0]; }); 可以使用md5实现文件的唯一性 const md5code = md5(file); 然后开始对文件进行分割 var reader = new FileReader(); reader.readAsArrayBuffer(file); reader.addEventListener(\"load\", function(e) { //每10M切割一段,这里只做一个切割演示，实际切割需要循环切割， var slice = e.target.result.slice(0, 10*1024*1024); }); h5上传一个（一片） const formdata = new FormData(); formdata.append('0', slice); //这里是有一个坑的，部分设备无法获取文件名称，和文件类型，这个在最后给出解决方案 formdata.append('filename', file.filename); var xhr = new XMLHttpRequest(); xhr.addEventListener('load', function() { //xhr.responseText }); xhr.open('POST', ''); xhr.send(formdata); xhr.addEventListener('progress', updateProgress); xhr.upload.addEventListener('progress', updateProgress); function updateProgress(event) { if (event.lengthComputable) { //进度条 } } 这里给出常见的图片和视频的文件类型判断 function checkFileType(type, file, back) { /** * type png jpg mp4 ... * file input.change=> this.files[0] * back callback(boolean) */ var args = arguments; if (args.length != 3) { back(0); } var type = args[0]; // type = '(png|jpg)' , 'png' var file = args[1]; var back = typeof args[2] == 'function' ? args[2] : function() {}; if (file.type == '') { // 如果系统无法获取文件类型，则读取二进制流，对二进制进行解析文件类型 var imgType = [ 'ff d8 ff', //jpg '89 50 4e', //png '0 0 0 14 66 74 79 70 69 73 6F 6D', //mp4 '0 0 0 18 66 74 79 70 33 67 70 35', //mp4 '0 0 0 0 66 74 79 70 33 67 70 35', //mp4 '0 0 0 0 66 74 79 70 4D 53 4E 56', //mp4 '0 0 0 0 66 74 79 70 69 73 6F 6D', //mp4 '0 0 0 18 66 74 79 70 6D 70 34 32', //m4v '0 0 0 0 66 74 79 70 6D 70 34 32', //m4v '0 0 0 14 66 74 79 70 71 74 20 20', //mov '0 0 0 0 66 74 79 70 71 74 20 20', //mov '0 0 0 0 6D 6F 6F 76', //mov '4F 67 67 53 0 02', //ogg '1A 45 DF A3', //ogg '52 49 46 46 x x x x 41 56 49 20', //avi (RIFF fileSize fileType LIST)(52 49 46 46,DC 6C 57 09,41 56 49 20,4C 49 53 54) ]; var typeName = [ 'jpg', 'png', 'mp4', 'mp4', 'mp4', 'mp4', 'mp4', 'm4v', 'm4v', 'mov', 'mov', 'mov', 'ogg', 'ogg', 'avi', ]; var sliceSize = /png|jpg|jpeg/.test(type) ? 3 : 12; var reader = new FileReader(); reader.readAsArrayBuffer(file); reader.addEventListener(\"load\", function(e) { var slice = e.target.result.slice(0, sliceSize); reader = null; if (slice && slice.byteLength == sliceSize) { var view = new Uint8Array(slice); var arr = []; view.forEach(function(v) { arr.push(v.toString(16)); }); view = null; var idx = arr.join(' ').indexOf(imgType); if (idx > -1) { back(typeName[idx]); } else { arr = arr.map(function(v) { if (i > 3 && i -1) { back(typeName[idx]); } else { back(false); } } } else { back(false); } }); } else { var type = file.name.match(/\\.(\\w+)$/)[1]; back(type); } } 调用方法如下 checkFileType('(mov|mp4|avi)',file,function(fileType){ // fileType = mp4, // 如果file的类型不在枚举之列，则返回false }); 上面上传文件的一步，可以改成： formdata.append('filename', md5code+'.'+fileType); 有了切割上传后，也就有了文件唯一标识信息，断点续传变成了后台的一个小小的逻辑判断 后端主要做的内容为：根据前端传给后台的md5值，到服务器磁盘查找是否有之前未完成的文件合并信息（也就是未完成的半成品文件切片），取到之后根据上传切片的数量，返回数据告诉前端开始从第几节上传 如果想要暂停切片的上传，可以使用XMLHttpRequest的 abort方法 三、使用场景 大文件加速上传：当文件大小超过预期大小时，使用分片上传可实现并行上传多个 Part， 以加快上传速度 网络环境较差：建议使用分片上传。当出现上传失败的时候，仅需重传失败的Part 流式上传：可以在需要上传的文件大小还不确定的情况下开始上传。这种场景在视频监控等行业应用中比较常见 小结 当前的伪代码，只是提供一个简单的思路，想要把事情做到极致，我们还需要考虑到更多场景，比如 切片上传失败怎么办 上传过程中刷新页面怎么办 如何进行并行上传 切片什么时候按数量切，什么时候按大小切 如何结合 Web Work 处理大文件上传 如何实现秒传 人生又何尝不是如此，极致的人生体验有无限可能，越是后面才发现越是精彩 ~_~ 参考文献 https://segmentfault.com/a/1190000009448892 https://baike.baidu.com/ 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/copy.html":{"url":"JavaScript/copy.html","title":"深拷贝浅拷贝的区别","keywords":"","body":"面试官：深拷贝浅拷贝的区别？如何实现一个深拷贝？ 一、数据类型存储 前面文章我们讲到，JavaScript中存在两大数据类型： 基本类型 引用类型 基本类型数据保存在在栈内存中 引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中 二、浅拷贝 浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝 如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址 即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址 下面简单实现一个浅拷贝 function shallowClone(obj) { const newObj = {}; for(let prop in obj) { if(obj.hasOwnProperty(prop)){ newObj[prop] = obj[prop]; } } return newObj; } 在JavaScript中，存在浅拷贝的现象有： Object.assign Array.prototype.slice(), Array.prototype.concat() 使用拓展运算符实现的复制 Object.assign var obj = { age: 18, nature: ['smart', 'good'], names: { name1: 'fx', name2: 'xka' }, love: function () { console.log('fx is a great girl') } } var newObj = Object.assign({}, fxObj); slice() const fxArr = [\"One\", \"Two\", \"Three\"] const fxArrs = fxArr.slice(0) fxArrs[1] = \"love\"; console.log(fxArr) // [\"One\", \"Two\", \"Three\"] console.log(fxArrs) // [\"One\", \"love\", \"Three\"] concat() const fxArr = [\"One\", \"Two\", \"Three\"] const fxArrs = fxArr.concat() fxArrs[1] = \"love\"; console.log(fxArr) // [\"One\", \"Two\", \"Three\"] console.log(fxArrs) // [\"One\", \"love\", \"Three\"] 拓展运算符 const fxArr = [\"One\", \"Two\", \"Three\"] const fxArrs = [...fxArr] fxArrs[1] = \"love\"; console.log(fxArr) // [\"One\", \"Two\", \"Three\"] console.log(fxArrs) // [\"One\", \"love\", \"Three\"] 三、深拷贝 深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性 常见的深拷贝方式有： _.cloneDeep() jQuery.extend() JSON.stringify() 手写循环递归 _.cloneDeep() const _ = require('lodash'); const obj1 = { a: 1, b: { f: { g: 1 } }, c: [1, 2, 3] }; const obj2 = _.cloneDeep(obj1); console.log(obj1.b.f === obj2.b.f);// false jQuery.extend() const $ = require('jquery'); const obj1 = { a: 1, b: { f: { g: 1 } }, c: [1, 2, 3] }; const obj2 = $.extend(true, {}, obj1); console.log(obj1.b.f === obj2.b.f); // false JSON.stringify() const obj2=JSON.parse(JSON.stringify(obj1)); 但是这种方式存在弊端，会忽略undefined、symbol和函数 const obj = { name: 'A', name1: undefined, name3: function() {}, name4: Symbol('A') } const obj2 = JSON.parse(JSON.stringify(obj)); console.log(obj2); // {name: \"A\"} 循环递归 function deepClone(obj, hash = new WeakMap()) { if (obj === null) return obj; // 如果是null或者undefined我就不进行拷贝操作 if (obj instanceof Date) return new Date(obj); if (obj instanceof RegExp) return new RegExp(obj); // 可能是对象或者普通的值 如果是函数的话是不需要深拷贝 if (typeof obj !== \"object\") return obj; // 是对象的话就要进行深拷贝 if (hash.get(obj)) return hash.get(obj); let cloneObj = new obj.constructor(); // 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身 hash.set(obj, cloneObj); for (let key in obj) { if (obj.hasOwnProperty(key)) { // 实现一个递归拷贝 cloneObj[key] = deepClone(obj[key], hash); } } return cloneObj; } 四、区别 下面首先借助两张图，可以更加清晰看到浅拷贝与深拷贝的区别 从上图发现，浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样 浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象 // 浅拷贝 const obj1 = { name : 'init', arr : [1,[2,3],4], }; const obj3=shallowClone(obj1) // 一个浅拷贝方法 obj3.name = \"update\"; obj3.arr[1] = [5,6,7] ; // 新旧对象还是共享同一块内存 console.log('obj1',obj1) // obj1 { name: 'init', arr: [ 1, [ 5, 6, 7 ], 4 ] } console.log('obj3',obj3) // obj3 { name: 'update', arr: [ 1, [ 5, 6, 7 ], 4 ] } 但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象 // 深拷贝 const obj1 = { name : 'init', arr : [1,[2,3],4], }; const obj4=deepClone(obj1) // 一个深拷贝方法 obj4.name = \"update\"; obj4.arr[1] = [5,6,7] ; // 新对象跟原对象不共享内存 console.log('obj1',obj1) // obj1 { name: 'init', arr: [ 1, [ 2, 3 ], 4 ] } console.log('obj4',obj4) // obj4 { name: 'update', arr: [ 1, [ 5, 6, 7 ], 4 ] } 小结 前提为拷贝类型为引用类型的情况下： 浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址 深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/data_type.html":{"url":"JavaScript/data_type.html","title":"js数据类型","keywords":"","body":"面试官：说说JavaScript中的数据类型？存储上的差别？ 前言 在JavaScript中，我们可以分成两种类型： 基本类型 复杂类型 两种类型的区别是：存储位置不同 一、基本类型 基本类型主要为以下6种： Number String Boolean Undefined null symbol Number 数值最常见的整数类型格式则为十进制，还可以设置八进制（零开头）、十六进制（0x开头） let intNum = 55 // 10进制的55 let num1 = 070 // 8进制的56 let hexNum1 = 0xA //16进制的10 浮点类型则在数值汇总必须包含小数点，还可通过科学计数法表示 let floatNum1 = 1.1; let floatNum2 = 0.1; let floatNum3 = .1; // 有效，但不推荐 let floatNum = 3.125e7; // 等于 31250000 在数值类型中，存在一个特殊数值NaN，意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误） console.log(0/0); // NaN console.log(-0/+0); // NaN Undefined Undefined 类型只有一个值，就是特殊值 undefined。当使用 var或 let声明了变量但没有初始化时，就相当于给变量赋予了 undefined值 let message; console.log(message == undefined); // true 包含undefined 值的变量跟未定义变量是有区别的 let message; // 这个变量被声明了，只是值为 undefined console.log(message); // \"undefined\" console.log(age); // 没有声明过这个变量，报错 String 字符串可以使用双引号（\"）、单引号（'）或反引号（`）标示 let firstName = \"John\"; let lastName = 'Jacob'; let lastName = `Jingleheimerschmidt` 字符串是不可变的，意思是一旦创建，它们的值就不能变了 let lang = \"Java\"; lang = lang + \"Script\"; // 先销毁再创建 Null Null类型同样只有一个值，即特殊值 null 逻辑上讲， null 值表示一个空对象指针，这也是给typeof传一个 null 会返回 \"object\" 的原因 let car = null; console.log(typeof car); // \"object\" undefined 值是由 null值派生而来 console.log(null == undefined); // true 只要变量要保存对象，而当时又没有那个对象可保存，就可用 null来填充该变量 Boolean Boolean（布尔值）类型有两个字面值： true 和false 通过Boolean可以将其他类型的数据转化成布尔值 规则如下： 数据类型 转换为 true 的值 转换为 false 的值 String 非空字符串 \"\" Number 非零数值（包括无穷值） 0 、 NaN Object 任意对象 null Undefined N/A （不存在） undefined Symbol Symbol （符号）是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险 let genericSymbol = Symbol(); let otherGenericSymbol = Symbol(); console.log(genericSymbol == otherGenericSymbol); // false let fooSymbol = Symbol('foo'); let otherFooSymbol = Symbol('foo'); console.log(fooSymbol == otherFooSymbol); // false 二、引用类型 复杂类型统称为Object，我们这里主要讲述下面三种： Object Array Function Object 创建object常用方式为对象字面量表示法，属性名可以是字符串或数值 let person = { name: \"Nicholas\", \"age\": 29, 5: true }; Array JavaScript数组是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。并且，数组也是动态大小的，会随着数据添加而自动增长 let colors = [\"red\", 2, {age: 20 }] colors.push(2) Function 函数实际上是对象，每个函数都是 Function类型的实例，而 Function也有属性和方法，跟其他引用类型一样 函数存在三种常见的表达方式： 函数声明 // 函数声明 function sum (num1, num2) { return num1 + num2; } 函数表达式 let sum = function(num1, num2) { return num1 + num2; }; 箭头函数 函数声明和函数表达式两种方式 let sum = (num1, num2) => { return num1 + num2; }; 其他引用类型 除了上述说的三种之外，还包括Date、RegExp、Map、Set等...... 三、存储区别 基本数据类型和引用数据类型存储在内存中的位置不同： 基本数据类型存储在栈中 引用类型的对象存储于堆中 当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值 下面来举个例子 基本类型 let a = 10; let b = a; // 赋值操作 b = 20; console.log(a); // 10值 a的值为一个基本类型，是存储在栈中，将a的值赋给b，虽然两个变量的值相等，但是两个变量保存了两个不同的内存地址 下图演示了基本类型赋值的过程： 引用类型 var obj1 = {} var obj2 = obj1; obj2.name = \"Xxx\"; console.log(obj1.name); // xxx 引用类型数据存放在内对内中，每个堆内存中有一个引用地址，该引用地址存放在栈中 obj1是一个引用类型，在赋值操作过程汇总，实际是将堆内存对象在栈内存的引用地址复制了一份给了obj2，实际上他们共同指向了同一个堆内存对象，所以更改obj2会对obj1产生影响 下图演示这个引用类型赋值过程 小结 声明变量时不同的内存地址分配： 简单类型的值存放在栈中，在栈中存放的是对应的值 引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址 不同的类型数据导致赋值变量时的不同： 简单类型赋值，是生成相同的值，两个对象对应不同的地址 复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/debounce_throttle.html":{"url":"JavaScript/debounce_throttle.html","title":"函数的防抖和节流","keywords":"","body":"面试官：什么是防抖和节流？有什么区别？如何实现？ 一、是什么 本质上是优化高频率执行代码的一种手段 如：浏览器的 resize、scroll、keypress、mousemove 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能 为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用throttle（防抖）和debounce（节流）的方式来减少调用频率 定义 节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效 防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时 一个经典的比喻: 想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应 假设电梯有两种运行策略 debounce 和 throttle，超时设定为15秒，不考虑容量限制 电梯第一个人进来后，15秒后准时运送一次，这是节流 电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是防抖 代码实现 节流 完成节流可以使用时间戳与定时器的写法 使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行 function throttled1(fn, delay = 500) { let oldtime = Date.now() return function (...args) { let newtime = Date.now() if (newtime - oldtime >= delay) { fn.apply(null, args) oldtime = Date.now() } } } 使用定时器写法，delay毫秒后第一次执行，第二次事件停止触发后依然会再一次执行 function throttled2(fn, delay = 500) { let timer = null return function (...args) { if (!timer) { timer = setTimeout(() => { fn.apply(this, args) timer = null }, delay); } } } 可以将时间戳写法的特性与定时器写法的特性相结合，实现一个更加精确的节流。实现如下 function throttled(fn, delay) { let timer = null let starttime = Date.now() return function () { let curTime = Date.now() // 当前时间 let remaining = delay - (curTime - starttime) // 从上一次到现在，还剩下多少多余时间 let context = this let args = arguments clearTimeout(timer) if (remaining 防抖 简单版本的实现 function debounce(func, wait) { let timeout; return function () { let context = this; // 保存this指向 let args = arguments; // 拿到event对象 clearTimeout(timeout) timeout = setTimeout(function(){ func.apply(context, args) }, wait); } } 防抖如果需要立即执行，可加入第三个参数用于判断，实现如下： function debounce(func, wait, immediate) { let timeout; return function () { let context = this; let args = arguments; if (timeout) clearTimeout(timeout); // timeout 不为null if (immediate) { let callNow = !timeout; // 第一次会立即执行，以后只有事件执行后才会再次触发 timeout = setTimeout(function () { timeout = null; }, wait) if (callNow) { func.apply(context, args) } } else { timeout = setTimeout(function () { func.apply(context, args) }, wait); } } } 二、区别 相同点： 都可以通过使用 setTimeout 实现 目的都是，降低回调执行频率。节省计算资源 不同点： 函数防抖，在一段连续操作结束后，处理回调，利用clearTimeout和 setTimeout实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能 函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次 例如，都设置时间频率为500ms，在2秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在2s后，只会执行一次 如下图所示： 三、应用场景 防抖在连续的事件，只需触发一次回调的场景有： 搜索框搜索输入。只需用户最后一次输入完，再发送请求 手机号、邮箱验证输入检测 窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。 节流在间隔一段时间执行一次回调的场景有： 滚动加载，加载更多或滚到底部监听 搜索框，搜索联想功能 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/event_Model.html":{"url":"JavaScript/event_Model.html","title":"事件模型","keywords":"","body":"面试官：说说JavaScript中的事件模型 一、事件与事件流 javascript中的事件，可以理解就是在HTML文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等 由于DOM是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念 事件流都会经历三个阶段： 事件捕获阶段(capture phase) 处于目标阶段(target phase) 事件冒泡阶段(bubbling phase) 事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是DOM中最高层的父节点 Event Bubbling Click Me 然后，我们给button和它的父元素，加入点击事件 var button = document.getElementById('clickMe'); button.onclick = function() { console.log('1.Button'); }; document.body.onclick = function() { console.log('2.body'); }; document.onclick = function() { console.log('3.document'); }; window.onclick = function() { console.log('4.window'); }; 点击按钮，输出如下 1.button 2.body 3.document 4.window 点击事件首先在button元素上发生，然后逐级向上传播 事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接受事件, 而最具体的节点（触发节点）最后接受事件 二、事件模型 事件模型可以分为三种： 原始事件模型（DOM0级） 标准事件模型（DOM2级） IE事件模型（基本不用） 原始事件模型 事件绑定监听函数比较简单, 有两种方式： HTML代码中直接绑定 通过JS代码绑定 var btn = document.getElementById('.btn'); btn.onclick = fun; 特性 绑定速度快 DOM0级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行 只支持冒泡，不支持捕获 同一个类型的事件只能绑定一次 var btn = document.getElementById('.btn'); btn.onclick = fun2; 如上，当希望为同一个元素绑定多个同类型事件的时候（上面的这个btn元素绑定2个点击事件），是不被允许的，后绑定的事件会覆盖之前的事件 删除 DOM0 级事件处理程序只要将对应事件属性置为null即可 btn.onclick = null; 标准事件模型 在该事件模型中，一次事件共有三个过程: 事件捕获阶段：事件从document一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数 事件冒泡阶段：事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行 事件绑定监听函数的方式如下: addEventListener(eventType, handler, useCapture) 事件移除监听函数的方式如下: removeEventListener(eventType, handler, useCapture) 参数如下： eventType指定事件类型(不要加on) handler是事件处理函数 useCapture是一个boolean用于指定是否在捕获阶段进行处理，一般设置为false与IE浏览器保持一致 举个例子： var btn = document.getElementById('.btn'); btn.addEventListener(‘click’, showMessage, false); btn.removeEventListener(‘click’, showMessage, false); 特性 可以在一个DOM元素上绑定多个事件处理器，各自并不会冲突 btn.addEventListener(‘click’, showMessage1, false); btn.addEventListener(‘click’, showMessage2, false); btn.addEventListener(‘click’, showMessage3, false); 执行时机 当第三个参数(useCapture)设置为true就在捕获过程中执行，反之在冒泡过程中执行处理函数 下面举个例子： Click Me! 设置点击事件 var div = document.getElementById('div'); var p = document.getElementById('p'); function onClickFn (event) { var tagName = event.currentTarget.tagName; var phase = event.eventPhase; console.log(tagName, phase); } div.addEventListener('click', onClickFn, false); p.addEventListener('click', onClickFn, false); 上述使用了eventPhase，返回一个代表当前执行阶段的整数值。1为捕获阶段、2为事件对象触发阶段、3为冒泡阶段 点击Click Me!，输出如下 P 3 DIV 3 可以看到，p和div都是在冒泡阶段响应了事件，由于冒泡的特性，裹在里层的p率先做出响应 如果把第三个参数都改为true div.addEventListener('click', onClickFn, true); p.addEventListener('click', onClickFn, true); 输出如下 DIV 1 P 1 两者都是在捕获阶段响应事件，所以div比p标签先做出响应 IE事件模型 IE事件模型共有两个过程: 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。 事件冒泡阶段：事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行 事件绑定监听函数的方式如下: attachEvent(eventType, handler) 事件移除监听函数的方式如下: detachEvent(eventType, handler) 举个例子： var btn = document.getElementById('.btn'); btn.attachEvent(‘onclick’, showMessage); btn.detachEvent(‘onclick’, showMessage); 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/event_agent.html":{"url":"JavaScript/event_agent.html","title":"事件代理","keywords":"","body":"面试官：解释下什么是事件代理？应用场景？ 一、是什么 事件代理，俗地来讲，就是把一个元素响应事件（click、keydown......）的函数委托到另一个元素 前面讲到，事件流的都会经过三个阶段： 捕获阶段 -> 目标阶段 -> 冒泡阶段，而事件委托就是在冒泡阶段完成 事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素 当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数 下面举个例子： 比如一个宿舍的同学同时快递到了，一种笨方法就是他们一个个去领取 较优方法就是把这件事情委托给宿舍长，让一个人出去拿好所有快递，然后再根据收件人一一分发给每个同学 在这里，取快递就是一个事件，每个同学指的是需要响应事件的 DOM元素，而出去统一领取快递的宿舍长就是代理的元素 所以真正绑定事件的是这个元素，按照收件人分发快递的过程就是在事件执行中，需要判断当前响应的事件应该匹配到被代理元素中的哪一个或者哪几个 二、应用场景 如果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件 item 1 item 2 item 3 ...... item n 如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的 // 获取目标元素 const lis = document.getElementsByTagName(\"li\") // 循环遍历绑定事件 for (let i = 0; i 这时候就可以事件委托，把点击事件绑定在父级元素ul上面，然后执行事件的时候再去匹配目标元素 // 给父层元素绑定事件 document.getElementById('list').addEventListener('click', function (e) { // 兼容性处理 var event = e || window.event; var target = event.target || event.srcElement; // 判断是否匹配目标元素 if (target.nodeName.toLocaleLowerCase === 'li') { console.log('the content is: ', target.innerHTML); } }); 还有一种场景是上述列表项并不多，我们给每个列表项都绑定了事件 但是如果用户能够随时动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件 如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的 举个例子： 下面html结构中，点击input可以动态添加元素 item 1 item 2 item 3 item 4 使用事件委托 const oBtn = document.getElementById(\"btn\"); const oUl = document.getElementById(\"ul1\"); const num = 4; //事件委托，添加的子元素也有事件 oUl.onclick = function (ev) { ev = ev || window.event; const target = ev.target || ev.srcElement; if (target.nodeName.toLowerCase() == 'li') { console.log('the content is: ', target.innerHTML); } }; //添加新节点 oBtn.onclick = function () { num++; const oLi = document.createElement('li'); oLi.innerHTML = `item ${num}`; oUl.appendChild(oLi); }; 可以看到，使用事件委托，在动态绑定事件的情况下是可以减少很多重复工作的 三、总结 适合事件委托的事件有：click，mousedown，mouseup，keydown，keyup，keypress 从上面应用场景中，我们就可以看到使用事件委托存在两大优点： 减少整个页面所需的内存，提升整体性能 动态绑定，减少重复工作 但是使用事件委托也是存在局限性： focus、blur这些事件没有事件冒泡机制，所以无法进行委托绑定事件 mousemove、mouseout这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的 如果把所有事件都用事件代理，可能会出现事件误判，即本不该被触发的事件被绑定上了事件 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/event_loop.html":{"url":"JavaScript/event_loop.html","title":"事件循环","keywords":"","body":"面试官：说说你对事件循环的理解 一、是什么 首先，JavaScript是一门单线程的语言，意味着同一时间内只能做一件事，但是这并不意味着单线程就是阻塞，而实现单线程非阻塞的方法就是事件循环 在JavaScript中，所有的任务都可以分为 同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行 异步任务：异步执行的任务，比如ajax网络请求，setTimeout定时函数等 同步任务与异步任务的运行流程图如下： 从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就事件循环 二、宏任务与微任务 如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子： console.log(1) setTimeout(()=>{ console.log(2) }, 0) new Promise((resolve, reject)=>{ console.log('new Promise') resolve() }).then(()=>{ console.log('then') }) console.log(3) 如果按照上面流程图来分析代码，我们会得到下面的执行步骤： console.log(1)，同步任务，主线程中执行 setTimeout() ，异步任务，放到 Event Table，0 毫秒后console.log(2)回调推入 Event Queue 中 new Promise ，同步任务，主线程直接执行 .then ，异步任务，放到 Event Table console.log(3)，同步任务，主线程执行 所以按照分析，它的结果应该是 1 => 'new Promise' => 3 => 2 => 'then' 但是实际结果是：1=>'new Promise'=> 3 => 'then' => 2 出现分歧的原因在于异步任务执行顺序，事件队列其实是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取 例子中 setTimeout回调事件是先进入队列中的，按理说应该先于 .then 中的执行，但是结果却偏偏相反 原因在于异步任务还可以细分为微任务与宏任务 微任务 一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前 常见的微任务有： Promise.then MutaionObserver Object.observe（已废弃；Proxy 对象替代） process.nextTick（Node.js） 宏任务 宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合 常见的宏任务有： script (可以理解为外层同步代码) setTimeout/setInterval UI rendering/UI事件 postMessage、MessageChannel setImmediate、I/O（Node.js） 这时候，事件循环，宏任务，微任务的关系如图所示 按照这个流程，它的执行机制是： 执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中 当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完 回到上面的题目 console.log(1) setTimeout(()=>{ console.log(2) }, 0) new Promise((resolve, reject)=>{ console.log('new Promise') resolve() }).then(()=>{ console.log('then') }) console.log(3) 流程如下 // 遇到 console.log(1) ，直接打印 1 // 遇到定时器，属于新的宏任务，留着后面执行 // 遇到 new Promise，这个是直接执行的，打印 'new Promise' // .then 属于微任务，放入微任务队列，后面再执行 // 遇到 console.log(3) 直接打印 3 // 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 'then' // 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2 三、async与await async 是异步的意思，await则可以理解为 async wait。所以可以理解async就是用来声明一个异步方法，而 await是用来等待异步方法执行 async async函数返回一个promise对象，下面两种方法是等效的 function f() { return Promise.resolve('TEST'); } // asyncF is equivalent to f! async function asyncF() { return 'TEST'; } await 正常情况下，await命令后面是一个 Promise对象，返回该对象的结果。如果不是 Promise对象，就直接返回对应的值 async function f(){ // 等同于 // return 123 return await 123 } f().then(v => console.log(v)) // 123 不管await后面跟着的是什么，await都会阻塞后面的代码 async function fn1 (){ console.log(1) await fn2() console.log(2) // 阻塞 } async function fn2 (){ console.log('fn2') } fn1() console.log(3) 上面的例子中，await 会阻塞下面的代码（即加入微任务队列），先执行 async外面的同步代码，同步代码执行完，再回到 async 函数中，再执行之前阻塞的代码 所以上述输出结果为：1，fn2，3，2 四、流程分析 通过对上面的了解，我们对JavaScript对各种场景的执行顺序有了大致的了解 这里直接上代码： async function async1() { console.log('async1 start') await async2() console.log('async1 end') } async function async2() { console.log('async2') } console.log('script start') setTimeout(function () { console.log('settimeout') }) async1() new Promise(function (resolve) { console.log('promise1') resolve() }).then(function () { console.log('promise2') }) console.log('script end') 分析过程： 执行整段代码，遇到 console.log('script start') 直接打印结果，输出 script start 遇到定时器了，它是宏任务，先放着不执行 遇到 async1()，执行 async1 函数，先打印 async1 start，下面遇到await怎么办？先执行 async2，打印 async2，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码 跳到 new Promise 这里，直接执行，打印 promise1，下面遇到 .then()，它是微任务，放到微任务列表等待执行 最后一行直接打印 script end，现在同步代码执行完了，开始执行微任务，即 await下面的代码，打印 async1 end 继续执行下一个微任务，即执行 then 的回调，打印 promise2 上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 settimeout 所以最后的结果是：script start、async1 start、async2、promise1、script end、async1 end、promise2、settimeout 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/function_cache.html":{"url":"JavaScript/function_cache.html","title":"函数缓存","keywords":"","body":"面试官：Javascript中如何实现函数缓存？函数缓存有哪些应用场景？ 一、是什么 函数缓存，就是将函数运算过的结果进行缓存 本质上就是用空间（缓存存储）换时间（计算过程） 常用于缓存数据计算结果和缓存对象 const add = (a,b) => a+b; const calc = memoize(add); // 函数缓存 calc(10,20);// 30 calc(10,20);// 30 缓存 缓存只是一个临时的数据存储，它保存数据，以便将来对该数据的请求能够更快地得到处理 二、如何实现 实现函数缓存主要依靠闭包、柯里化、高阶函数，这里再简单复习下： 闭包 闭包可以理解成，函数 + 函数体内可访问的变量总和 (function() { var a = 1; function add() { const b = 2 let sum = b + a console.log(sum); // 3 } add() })() add函数本身，以及其内部可访问的变量，即 a = 1，这两个组合在⼀起就形成了闭包 柯里化 把接受多个参数的函数转换成接受一个单一参数的函数 // 非函数柯里化 var add = function (x,y) { return x+y; } add(3,4) //7 // 函数柯里化 var add2 = function (x) { //**返回函数** return function (y) { return x+y; } } add2(3)(4) //7 将一个二元函数拆分成两个一元函数 高阶函数 通过接收其他函数作为参数或返回其他函数的函数 function foo(){ var a = 2; function bar() { console.log(a); } return bar; } var baz = foo(); baz();//2 函数 foo 如何返回另一个函数 bar，baz 现在持有对 foo 中定义的bar 函数的引用。由于闭包特性，a的值能够得到 下面再看看如何实现函数缓存，实现原理也很简单，把参数和对应的结果数据存在一个对象中，调用时判断参数对应的数据是否存在，存在就返回对应的结果数据，否则就返回计算结果 如下所示 const memoize = function (func, content) { let cache = Object.create(null) content = content || this return (...key) => { if (!cache[key]) { cache[key] = func.apply(content, key) } return cache[key] } } 调用方式也很简单 const calc = memoize(add); const num1 = calc(100,200) const num2 = calc(100,200) // 缓存得到的结果 过程分析： 在当前函数作用域定义了一个空对象，用于缓存运行结果 运用柯里化返回一个函数，返回的函数由于闭包特性，可以访问到cache 然后判断输入参数是不是在cache的中。如果已经存在，直接返回cache的内容，如果没有存在，使用函数func对输入参数求值，然后把结果存储在cache中 三、应用场景 虽然使用缓存效率是非常高的，但并不是所有场景都适用，因此千万不要极端的将所有函数都添加缓存 以下几种情况下，适合使用缓存： 对于昂贵的函数调用，执行复杂计算的函数 对于具有有限且高度重复输入范围的函数 对于具有重复输入值的递归函数 对于纯函数，即每次使用特定输入调用时返回相同输出的函数 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/functional_programming.html":{"url":"JavaScript/functional_programming.html","title":"函数式编程","keywords":"","body":"面试官：说说你对函数式编程的理解？优缺点？ 一、是什么 函数式编程是一种\"编程范式\"（programming paradigm），一种编写程序的方法论 主要的编程范式有三种：命令式编程，声明式编程和函数式编程 相比命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程 举个例子，将数组每个元素进行平方操作，命令式编程与函数式编程如下 // 命令式编程 var array = [0, 1, 2, 3] for(let i = 0; i Math.pow(num, 2)) 简单来讲，就是要把过程逻辑写成函数，定义好输入参数，只关心它的输出结果 即是一种描述集合和集合之间的转换关系，输入通过函数都会返回有且只有一个输出值 可以看到，函数实际上是一个关系，或者说是一种映射，而这种映射关系是可以组合的，一旦我们知道一个函数的输出类型可以匹配另一个函数的输入，那他们就可以进行组合 二、概念 纯函数 函数式编程旨在尽可能的提高代码的无状态性和不变性。要做到这一点，就要学会使用无副作用的函数，也就是纯函数 纯函数是对给定的输入返还相同输出的函数，并且要求你所有的数据都是不可变的，即纯函数=无状态+数据不可变 举一个简单的例子 let double = value=>value*2; 特性： 函数内部传入指定的值，就会返回确定唯一的值 不会造成超出作用域的变化，例如修改全局变量或引用传递的参数 优势： 使用纯函数，我们可以产生可测试的代码 test('double(2) 等于 4', () => { expect(double(2)).toBe(4); }) 不依赖外部环境计算，不会产生副作用，提高函数的复用性 可读性更强 ，函数不管是否是纯函数 都会有一个语义化的名称，更便于阅读 可以组装成复杂任务的可能性。符合模块化概念及单一职责原则 高阶函数 在我们的编程世界中，我们需要处理的其实也只有“数据”和“关系”，而关系就是函数 编程工作也就是在找一种映射关系，一旦关系找到了，问题就解决了，剩下的事情，就是让数据流过这种关系，然后转换成另一个数据，如下图所示 在这里，就是高阶函数的作用。高级函数，就是以函数作为输入或者输出的函数被称为高阶函数 通过高阶函数抽象过程，注重结果，如下面例子 const forEach = function(arr,fn){ for(let i=0;i{ console.log(item); }) 上面通过高阶函数 forEach来抽象循环如何做的逻辑，直接关注做了什么 高阶函数存在缓存的特性，主要是利用闭包作用 const once = (fn)=>{ let done = false; return function(){ if(!done){ fn.apply(this,fn); }else{ console.log(\"该函数已经执行\"); } done = true; } } 柯里化 柯里化是把一个多参数函数转化成一个嵌套的一元函数的过程 一个二元函数如下： let fn = (x,y)=>x+y; 转化成柯里化函数如下： const curry = function(fn){ return function(x){ return function(y){ return fn(x,y); } } } let myfn = curry(fn); console.log( myfn(1)(2) ); 上面的curry函数只能处理二元情况，下面再来实现一个实现多参数的情况 // 多参数柯里化； const curry = function(fn){ return function curriedFn(...args){ if(args.lengthx+y+z+a; const myfn = curry(fn); console.log(myfn(1)(2)(3)(1)); 关于柯里化函数的意义如下： 让纯函数更纯，每次接受一个参数，松散解耦 惰性执行 组合与管道 组合函数，目的是将多个函数组合成一个函数 举个简单的例子： function afn(a){ return a*2; } function bfn(b){ return b*3; } const compose = (a,b)=>c=>a(b(c)); let myfn = compose(afn,bfn); console.log( myfn(2)); 可以看到compose实现一个简单的功能：形成了一个新的函数，而这个函数就是一条从 bfn -> afn 的流水线 下面再来看看如何实现一个多函数组合： const compose = (...fns)=>val=>fns.reverse().reduce((acc,fn)=>fn(acc),val); compose执行是从右到左的。而管道函数，执行顺序是从左到右执行的 const pipe = (...fns)=>val=>fns.reduce((acc,fn)=>fn(acc),val); 组合函数与管道函数的意义在于：可以把很多小函数组合起来完成更复杂的逻辑 三、优缺点 优点 更好的管理状态：因为它的宗旨是无状态，或者说更少的状态，能最大化的减少这些未知、优化代码、减少出错情况 更简单的复用：固定输入->固定输出，没有其他外部变量影响，并且无副作用。这样代码复用时，完全不需要考虑它的内部实现和外部影响 更优雅的组合：往大的说，网页是由各个组件组成的。往小的说，一个函数也可能是由多个小函数组成的。更强的复用性，带来更强大的组合性 隐性好处。减少代码量，提高维护性 缺点： 性能：函数式编程相对于指令式编程，性能绝对是一个短板，因为它往往会对一个方法进行过度包装，从而产生上下文切换的性能开销 资源占用：在 JS 中为了实现对象状态的不可变，往往会创建新的对象，因此，它对垃圾回收所产生的压力远远超过其他编程方式 递归陷阱：在函数式编程中，为了实现迭代，通常会采用递归操作 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/inherit.html":{"url":"JavaScript/inherit.html","title":"js继承","keywords":"","body":"面试官：Javascript如何实现继承？ 一、是什么 继承（inheritance）是面向对象软件技术当中的一个概念。 如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类” 继承的优点 继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码 在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能 虽然JavaScript并不是真正的面向对象语言，但它天生的灵活性，使应用场景更加丰富 关于继承，我们举个形象的例子： 定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量等 class Car{ constructor(color,speed){ this.color = color this.speed = speed // ... } } 由汽车这个类可以派生出“轿车”和“货车”两个类，在汽车的基础属性上，为轿车添加一个后备厢、给货车添加一个大货箱 // 货车 class Truck extends Car{ constructor(color,speed){ super(color,speed) this.Container = true // 货箱 } } 这样轿车和货车就是不一样的，但是二者都属于汽车这个类，汽车、轿车继承了汽车的属性，而不需要再次在“轿车”中定义汽车已经有的属性 在“轿车”继承“汽车”的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与“汽车”这个父类不同的属性和方法 class Truck extends Car{ constructor(color,speed){ super(color,speed) this.color = \"black\" //覆盖 this.Container = true // 货箱 } } 从这个例子中就能详细说明汽车、轿车以及卡车之间的继承关系 二、实现方式 下面给出JavaScripy常见的继承方式： 原型链继承 构造函数继承（借助 call） 组合继承 原型式继承 寄生式继承 寄生组合式继承 原型链继承 原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针 举个例子 function Parent() { this.name = 'parent1'; this.play = [1, 2, 3] } function Child() { this.type = 'child2'; } Child1.prototype = new Parent(); console.log(new Child()) 上面代码看似没问题，实际存在潜在问题 var s1 = new Child2(); var s2 = new Child2(); s1.play.push(4); console.log(s1.play, s2.play); // [1,2,3,4] 改变s1的play属性，会发现s2也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的 构造函数继承 借助 call调用Parent函数 function Parent(){ this.name = 'parent1'; } Parent.prototype.getName = function () { return this.name; } function Child(){ Parent1.call(this); this.type = 'child' } let child = new Child(); console.log(child); // 没问题 console.log(child.getName()); // 会报错 可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法 相比第一种原型链继承方式，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法 组合继承 前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来 function Parent3 () { this.name = 'parent3'; this.play = [1, 2, 3]; } Parent3.prototype.getName = function () { return this.name; } function Child3() { // 第二次调用 Parent3() Parent3.call(this); this.type = 'child3'; } // 第一次调用 Parent3() Child3.prototype = new Parent3(); // 手动挂上构造器，指向自己的构造函数 Child3.prototype.constructor = Child3; var s3 = new Child3(); var s4 = new Child3(); s3.play.push(4); console.log(s3.play, s4.play); // 不互相影响 console.log(s3.getName()); // 正常输出'parent3' console.log(s4.getName()); // 正常输出'parent3' 这种方式看起来就没什么问题，方式一和方式二的问题都解决了，但是从上面代码我们也可以看到Parent3 执行了两次，造成了多构造一次的性能开销 原型式继承 这里主要借助Object.create方法实现普通对象的继承 同样举个例子 let parent4 = { name: \"parent4\", friends: [\"p1\", \"p2\", \"p3\"], getName: function() { return this.name; } }; let person4 = Object.create(parent4); person4.name = \"tom\"; person4.friends.push(\"jerry\"); let person5 = Object.create(parent4); person5.friends.push(\"lucy\"); console.log(person4.name); // tom console.log(person4.name === person4.getName()); // true console.log(person5.name); // parent4 console.log(person4.friends); // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"] console.log(person5.friends); // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"] 这种继承方式的缺点也很明显，因为Object.create方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能 寄生式继承 寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法 let parent5 = { name: \"parent5\", friends: [\"p1\", \"p2\", \"p3\"], getName: function() { return this.name; } }; function clone(original) { let clone = Object.create(original); clone.getFriends = function() { return this.friends; }; return clone; } let person5 = clone(parent5); console.log(person5.getName()); // parent5 console.log(person5.getFriends()); // [\"p1\", \"p2\", \"p3\"] 其优缺点也很明显，跟上面讲的原型式继承一样 寄生组合式继承 寄生组合式继承，借助解决普通对象的继承问题的Object.create 方法，在亲全面几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式 function clone (parent, child) { // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程 child.prototype = Object.create(parent.prototype); child.prototype.constructor = child; } function Parent6() { this.name = 'parent6'; this.play = [1, 2, 3]; } Parent6.prototype.getName = function () { return this.name; } function Child6() { Parent6.call(this); this.friends = 'child5'; } clone(Parent6, Child6); Child6.prototype.getFriends = function () { return this.friends; } let person6 = new Child6(); console.log(person6); //{friends:\"child5\",name:\"child5\",play:[1,2,3],__proto__:Parent6} console.log(person6.getName()); // parent6 console.log(person6.getFriends()); // child5 可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题 文章一开头，我们是使用ES6 中的extends关键字直接实现 JavaScript的继承 class Person { constructor(name) { this.name = name } // 原型方法 // 即 Person.prototype.getName = function() { } // 下面可以简写为 getName() {...} getName = function () { console.log('Person:', this.name) } } class Gamer extends Person { constructor(name, age) { // 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。 super(name) this.age = age } } const asuna = new Gamer('Asuna', 20) asuna.getName() // 成功访问到父类的方法 利用babel工具进行转换，我们会发现extends实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式 三、总结 下面以一张图作为总结： 通过Object.create 来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而 extends 的语法糖和寄生组合继承的方式基本类似 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/loss_accuracy.html":{"url":"JavaScript/loss_accuracy.html","title":"Javascript 数字精度丢失","keywords":"","body":"面试官：说说 Javascript 数字精度丢失的问题，如何解决？ 一、场景复现 一个经典的面试题 0.1 + 0.2 === 0.3 // false 为什么是false呢? 先看下面这个比喻 比如一个数 1÷3=0.33333333...... 3会一直无限循环，数学可以表示，但是计算机要存储，方便下次取出来再使用，但0.333333...... 这个数无限循环，再大的内存它也存不下，所以不能存储一个相对于数学来说的值，只能存储一个近似值，当计算机存储后再取出时就会出现精度丢失问题 二、浮点数 “浮点数”是一种表示数字的标准，整数也可以用浮点数的格式来存储 我们也可以理解成，浮点数就是小数 在JavaScript中，现在主流的数值类型是Number，而Number采用的是IEEE754规范中64位双精度浮点数编码 这样的存储结构优点是可以归一化处理整数和小数，节省存储空间 对于一个整数，可以很轻易转化成十进制或者二进制。但是对于一个浮点数来说，因为小数点的存在，小数点的位置不是固定的。解决思路就是使用科学计数法，这样小数点位置就固定了 而计算机只能用二进制（0或1）表示，二进制转换为科学记数法的公式如下： 其中，a的值为0或者1，e为小数点移动的位置 举个例子： 27.0转化成二进制为11011.0 ，科学计数法表示为： 前面讲到，javaScript存储方式是双精度浮点数，其长度为8个字节，即64位比特 64位比特又可分为三个部分： 符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数 指数位E：中间的 11 位存储指数（exponent），用来表示次方数，可以为正负数。在双精度浮点数中，指数的固定偏移量为1023 尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零 如下图所示： 举个例子： 27.5 转换为二进制11011.1 11011.1转换为科学记数法 符号位为1(正数)，指数位为4+，1023+4，即1027 因为它是十进制的需要转换为二进制，即 10000000011，小数部分为10111，补够52位即： 1011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000` 所以27.5存储为计算机的二进制标准形式（符号位+指数位+小数部分 (阶数)），既下面所示 0+10000000011+011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000` 二、问题分析 再回到问题上 0.1 + 0.2 === 0.3 // false 通过上面的学习，我们知道，在javascript语言中，0.1 和 0.2 都转化成二进制后再进行运算 // 0.1 和 0.2 都转化成二进制后再进行运算 0.00011001100110011001100110011001100110011001100110011010 + 0.0011001100110011001100110011001100110011001100110011010 = 0.0100110011001100110011001100110011001100110011001100111 // 转成十进制正好是 0.30000000000000004 所以输出false 再来一个问题，那么为什么x=0.1得到0.1？ 主要是存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度 它的长度是 16，所以可以使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理 .10000000000000000555.toPrecision(16) // 返回 0.1000000000000000，去掉末尾的零后正好为 0.1 但看到的 0.1 实际上并不是 0.1。不信你可用更高的精度试试： 0.1.toPrecision(21) = 0.100000000000000005551 如果整数大于 9007199254740992 会出现什么情况呢？ 由于指数位最大值是1023，所以最大可以表示的整数是 2^1024 - 1，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 2^1024 开始就变成了 Infinity > Math.pow(2, 1023) 8.98846567431158e+307 > Math.pow(2, 1024) Infinity 那么对于 (2^53, 2^63) 之间的数会出现什么情况呢？ (2^53, 2^54) 之间的数会两个选一个，只能精确表示偶数 (2^54, 2^55) 之间的数会四个选一个，只能精确表示4个倍数 ... 依次跳过更多2的倍数 要想解决大数的问题你可以引用第三方库 bignumber.js，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生差很多 小结 计算机存储双精度浮点数需要先把十进制数转换为二进制的科学记数法的形式，然后计算机以自己的规则{符号位+(指数位+指数偏移量的二进制)+小数部分}存储二进制的科学记数法 因为存储时有位数限制（64位），并且某些十进制的浮点数在转换为二进制数时会出现无限循环，会造成二进制的舍入操作(0舍1入)，当再转换为十进制时就造成了计算误差 三、解决方案 理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果 当你拿到 1.4000000000000001 这样的数据要展示时，建议使用 toPrecision 凑整并 parseFloat 转成数字后再显示，如下： parseFloat(1.4000000000000001.toPrecision(12)) === 1.4 // True 封装成方法就是： function strip(num, precision = 12) { return +parseFloat(num.toPrecision(precision)); } 对于运算类操作，如 +-*/，就不能使用 toPrecision 了。正确的做法是把小数转成整数后再运算。以加法为例： /** * 精确加法 */ function add(num1, num2) { const num1Digits = (num1.toString().split('.')[1] || '').length; const num2Digits = (num2.toString().split('.')[1] || '').length; const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits)); return (num1 * baseNum + num2 * baseNum) / baseNum; } 最后还可以使用第三方库，如Math.js、BigDecimal.js 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/memory_leak.html":{"url":"JavaScript/memory_leak.html","title":"js内存泄露","keywords":"","body":"面试官：说说 JavaScript 中内存泄漏的几种情况？ 一、是什么 内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存 并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费 程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存 对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃 在C语言中，因为是手动管理内存，内存泄露是经常出现的事情。 char * buffer; buffer = (char*) malloc(42); // Do something with buffer free(buffer); 上面是 C 语言代码，malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。 这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为\"垃圾回收机制\" 二、垃圾回收机制 Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存 原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存 通常情况下有两种实现方式： 标记清除 引用计数 标记清除 JavaScript最常用的垃圾收回机制 当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“ 垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉 在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了 随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存 举个例子： var m = 0,n = 19 // 把 m,n,add() 标记为进入环境。 add(m, n) // 把 a, b, c标记为进入环境。 console.log(n) // a,b,c标记为离开环境，等待垃圾回收。 function add(a, b) { a++ var c = a + b return c } 引用计数 语言引擎有一张\"引用表\"，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放 如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏 const arr = [1, 2, 3, 4]; console.log('hello world'); 面代码中，数组[1, 2, 3, 4]是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它还是会持续占用内存 如果需要这块内存被垃圾回收机制释放，只需要设置如下： arr = null 通过设置arr为null，就解除了对数组[1,2,3,4]的引用，引用次数变为 0，就被垃圾回收了 小结 有了垃圾回收机制，不代表不用关注内存泄露。那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用 三、常见内存泄露情况 意外的全局变量 function foo(arg) { bar = \"this is a hidden global variable\"; } 另一种意外的全局变量可能由 this 创建： function foo() { this.variable = \"potential accidental global\"; } // foo 调用自己，this 指向了全局对象（window） foo(); 上述使用严格模式，可以避免意外的全局变量 定时器也常会造成内存泄露 var someResource = getData(); setInterval(function() { var node = document.getElementById('Node'); if(node) { // 处理 node 和 someResource node.innerHTML = JSON.stringify(someResource)); } }, 1000); 如果id为Node的元素从DOM中移除，该定时器仍会存在，同时，因为回调函数中包含对someResource的引用，定时器外面的someResource也不会被释放 包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放 function bindEvent() { var obj = document.createElement('XXX'); var unused = function () { console.log(obj, '闭包内引用obj obj不会被释放'); }; obj = null; // 解决方法 } 没有清理对DOM元素的引用同样造成内存泄露 const refA = document.getElementById('refA'); document.body.removeChild(refA); // dom删除了 console.log(refA, 'refA'); // 但是还存在引用能console出整个div 没有被回收 refA = null; console.log(refA, 'refA'); // 解除引用 包括使用事件监听addEventListener监听的时候，在不监听的情况下使用removeEventListener取消对事件监听 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/new.html":{"url":"JavaScript/new.html","title":"new操作符","keywords":"","body":"面试官：说说new操作符具体干了什么？ 一、是什么 在JavaScript中，new操作符用于创建一个给定构造函数的实例对象 例子 function Person(name, age){ this.name = name; this.age = age; } Person.prototype.sayName = function () { console.log(this.name) } const person1 = new Person('Tom', 20) console.log(person1) // Person {name: \"Tom\", age: 20} t.sayName() // 'Tom' 从上面可以看到： new 通过构造函数 Person 创建出来的实例可以访问到构造函数中的属性 new 通过构造函数 Person 创建出来的实例可以访问到构造函数原型链中的属性（即实例与构造函数通过原型链连接了起来） 现在在构建函数中显式加上返回值，并且这个返回值是一个原始类型 function Test(name) { this.name = name return 1 } const t = new Test('xxx') console.log(t.name) // 'xxx' 可以发现，构造函数中返回一个原始值，然而这个返回值并没有作用 下面在构造函数中返回一个对象 function Test(name) { this.name = name console.log(this) // Test { name: 'xxx' } return { age: 26 } } const t = new Test('xxx') console.log(t) // { age: 26 } console.log(t.name) // 'undefined' 从上面可以发现，构造函数如果返回值为一个对象，那么这个返回值会被正常使用 二、流程 从上面介绍中，我们可以看到new关键字主要做了以下的工作： 创建一个新的对象obj 将对象与构建函数通过原型链连接起来 将构建函数中的this绑定到新建的对象obj上 根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理 举个例子： function Person(name, age){ this.name = name; this.age = age; } const person1 = new Person('Tom', 20) console.log(person1) // Person {name: \"Tom\", age: 20} t.sayName() // 'Tom' 流程图如下： 三、手写new操作符 现在我们已经清楚地掌握了new的执行过程 那么我们就动手来实现一下new function mynew(Func, ...args) { // 1.创建一个新对象 const obj = {} // 2.新对象原型指向构造函数原型对象 obj.__proto__ = Func.prototype // 3.将构建函数的this指向新对象 let result = Func.apply(obj, args) // 4.根据返回值判断 return result instanceof Object ? result : obj } 测试一下 function mynew(func, ...args) { const obj = {} obj.__proto__ = func.prototype let result = func.apply(obj, args) return result instanceof Object ? result : obj } function Person(name, age) { this.name = name; this.age = age; } Person.prototype.say = function () { console.log(this.name) } let p = mynew(Person, \"huihui\", 123) console.log(p) // Person {name: \"huihui\", age: 123} p.say() // huihui 可以发现，代码虽然很短，但是能够模拟实现new 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/prototype.html":{"url":"JavaScript/prototype.html","title":"原型和原型链","keywords":"","body":"面试官：JavaScript原型，原型链 ? 有什么特点？ 一、原型 JavaScript 常被描述为一种基于原型的语言——每个对象拥有一个原型对象 当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾 准确地说，这些属性和方法定义在Object的构造器函数（constructor functions）之上的prototype属性上，而非实例对象本身 下面举个例子： 函数可以有属性。 每个函数都有一个特殊的属性叫作原型prototype function doSomething(){} console.log( doSomething.prototype ); 控制台输出 { constructor: ƒ doSomething(), __proto__: { constructor: ƒ Object(), hasOwnProperty: ƒ hasOwnProperty(), isPrototypeOf: ƒ isPrototypeOf(), propertyIsEnumerable: ƒ propertyIsEnumerable(), toLocaleString: ƒ toLocaleString(), toString: ƒ toString(), valueOf: ƒ valueOf() } } 上面这个对象，就是大家常说的原型对象 可以看到，原型对象有一个自有属性constructor，这个属性指向该函数，如下图关系展示 二、原型链 原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法 在对象实例和它的构造器之间建立一个链接（它是__proto__属性，是从构造函数的prototype属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法 下面举个例子： function Person(name) { this.name = name; this.age = 18; this.sayName = function() { console.log(this.name); } } // 第二步 创建实例 var person = new Person('person') 根据代码，我们可以得到下图 下面分析一下： 构造函数Person存在原型对象Person.prototype 构造函数生成实例对象person，person的__proto__指向构造函数Person原型对象 Person.prototype.__proto__ 指向内置对象，因为 Person.prototype 是个对象，默认是由 Object函数作为类创建的，而 Object.prototype 为内置对象 Person.__proto__ 指向内置匿名函数 anonymous，因为 Person 是个函数对象，默认由 Function 作为类创建 Function.prototype 和 Function.__proto__同时指向内置匿名函数 anonymous，这样原型链的终点就是 null 三、总结 下面首先要看几个概念： __proto__作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象的 每个对象的__proto__都是指向它的构造函数的原型对象prototype的 person1.__proto__ === Person.prototype 构造函数是一个函数对象，是通过 Function构造器产生的 Person.__proto__ === Function.prototype 原型对象本身是一个普通对象，而普通对象的构造函数都是Object Person.prototype.__proto__ === Object.prototype 刚刚上面说了，所有的构造器都是函数对象，函数对象都是 Function构造产生的 Object.__proto__ === Function.prototype Object的原型对象也有__proto__属性指向null，null是原型链的顶端 Object.prototype.__proto__ === null 下面作出总结： 一切对象都是继承自Object对象，Object 对象直接继承根源对象null 一切的函数对象（包括 Object 对象），都是继承自 Function 对象 Object 对象直接继承自 Function 对象 Function对象的__proto__会指向自己的原型对象，最终还是继承自Object对象 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/pull_up_loading_pull_down_refresh.html":{"url":"JavaScript/pull_up_loading_pull_down_refresh.html","title":"如何实现上拉加载，下拉刷新","keywords":"","body":"面试官：如何实现上拉加载，下拉刷新？ 一、前言 下拉刷新和上拉加载这两种交互方式通常出现在移动端中 本质上等同于PC网页中的分页，只是交互形式不同 开源社区也有很多优秀的解决方案，如iscroll、better-scroll、pulltorefresh.js库等等 这些第三方库使用起来非常便捷 我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用 二、实现原理 上拉加载及下拉刷新都依赖于用户交互 最重要的是要理解在什么场景，什么时机下触发交互动作 上拉加载 首先可以看一张图 上拉加载的本质是页面触底，或者快要触底时的动作 判断页面触底我们需要先了解一下下面几个属性 scrollTop：滚动视窗的高度距离window顶部的距离，它会随着往上滚动而不断增加，初始值是0，它是一个变化的值 clientHeight:它是一个定值，表示屏幕可视区域的高度； scrollHeight：页面不能滚动时也是存在的,此时scrollHeight等于clientHeight。scrollHeight表示body所有元素的总长度(包括body元素自身的padding) 综上我们得出一个触底公式： scrollTop + clientHeight >= scrollHeight 简单实现 let clientHeight = document.documentElement.clientHeight; //浏览器高度 let scrollHeight = document.body.scrollHeight; let scrollTop = document.documentElement.scrollTop; let distance = 50; //距离视窗还用50的时候，开始触发； if ((scrollTop + clientHeight) >= (scrollHeight - distance)) { console.log(\"开始加载数据\"); } 下拉刷新 下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作 关于下拉刷新的原生实现，主要分成三步： 监听原生touchstart事件，记录其初始位置的值，e.touches[0].pageY； 监听原生touchmove事件，记录并计算当前滑动的位置值与初始位置值的差值，大于0表示向下拉动，并借助CSS3的translateY属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值； 监听原生touchend事件，若此时元素滑动达到最大值，则触发callback，同时将translateY重设为0，元素回到初始位置 举个例子： Html结构如下： 111 222 333 444 555 ... 监听touchstart事件，记录初始的值 var _element = document.getElementById('refreshContainer'), _refreshText = document.querySelector('.refreshText'), _startPos = 0, // 初始的值 _transitionHeight = 0; // 移动的距离 _element.addEventListener('touchstart', function(e) { _startPos = e.touches[0].pageY; // 记录初始位置 _element.style.position = 'relative'; _element.style.transition = 'transform 0s'; }, false); 监听touchmove移动事件，记录滑动差值 _element.addEventListener('touchmove', function(e) { // e.touches[0].pageY 当前位置 _transitionHeight = e.touches[0].pageY - _startPos; // 记录差值 if (_transitionHeight > 0 && _transitionHeight 55) { _refreshText.innerText = '释放更新'; } } }, false); 最后，就是监听touchend离开的事件 _element.addEventListener('touchend', function(e) { _element.style.transition = 'transform 0.5s ease 1s'; _element.style.transform = 'translateY(0px)'; _refreshText.innerText = '更新中...'; // todo... }, false); 从上面可以看到，在下拉到松手的过程中，经历了三个阶段： 当前手势滑动位置与初始位置差值大于零时，提示正在进行下拉刷新操作 下拉到一定值时，显示松手释放后的操作提示 下拉到达设定最大值松手时，执行回调，提示正在进行更新操作 三、案例 在实际开发中，我们更多的是使用第三方库，下面以better-scroll进行举例： HTML结构 下拉刷新 查看更多 实例化上拉下拉插件，通过use来注册插件 import BScroll from \"@better-scroll/core\"; import PullDown from \"@better-scroll/pull-down\"; import PullUp from '@better-scroll/pull-up'; BScroll.use(PullDown); BScroll.use(PullUp); 实例化BetterScroll，并传入相关的参数 let pageNo = 1,pageSize = 10,dataList = [],isMore = true; var scroll= new BScroll(\"#position-wrapper\",{ scrollY:true,//垂直方向滚动 click:true,//默认会阻止浏览器的原生click事件，如果需要点击，这里要设为true pullUpLoad:true,//上拉加载更多 pullDownRefresh:{ threshold:50,//触发pullingDown事件的位置 stop:0//下拉回弹后停留的位置 } }); //监听下拉刷新 scroll.on(\"pullingDown\",pullingDownHandler); //监测实时滚动 scroll.on(\"scroll\",scrollHandler); //上拉加载更多 scroll.on(\"pullingUp\",pullingUpHandler); async function pullingDownHandler(){ dataList=[]; pageNo=1; isMore=true; $(\".more\").text(\"查看更多\"); await getlist();//请求数据 scroll.finishPullDown();//每次下拉结束后，需要执行这个操作 scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作 } async function pullingUpHandler(){ if(!isMore){ $(\".more\").text(\"没有更多数据了\"); scroll.finishPullUp();//每次上拉结束后，需要执行这个操作 return; } pageNo++; await this.getlist();//请求数据 scroll.finishPullUp();//每次上拉结束后，需要执行这个操作 scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作 } function scrollHandler(){ if(this.y>50) $('.refresh').text(\"松手开始加载\"); else $('.refresh').text(\"下拉刷新\"); } function getlist(){ //返回的数据 let result=....; dataList=dataList.concat(result); //判断是否已加载完 if(result.length 注意点： 使用better-scroll实现下拉刷新、上拉加载时要注意以下几点： wrapper里必须只有一个子元素 子元素的高度要比wrapper要高 使用的时候，要确定DOM元素是否已经生成，必须要等到DOM渲染完成后，再new BScroll() 滚动区域的DOM元素结构有变化后，需要执行刷新 refresh() 上拉或者下拉，结束后，需要执行finishPullUp()或者finishPullDown()，否则将不会执行下次操作 better-scroll，默认会阻止浏览器的原生click事件，如果滚动内容区要添加点击事件，需要在实例化属性里设置click:true 小结 下拉刷新、上拉加载原理本身都很简单，真正复杂的是封装过程中，要考虑的兼容性、易用性、性能等诸多细节 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/regexp.html":{"url":"JavaScript/regexp.html","title":"正则表达式","keywords":"","body":"面试官：说说你对正则表达式的理解？应用场景？ 一、是什么 正则表达式是一种用来匹配字符串的强有力的武器 它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的 在 JavaScript中，正则表达式也是对象，构建正则表达式有两种方式： 字面量创建，其由包含在斜杠之间的模式组成 const re = /\\d+/g; 调用RegExp对象的构造函数 const re = new RegExp(\"\\\\d+\",\"g\"); const rul = \"\\\\d+\" const re1 = new RegExp(rul,\"g\"); 使用构建函数创建，第一个参数可以是一个变量，遇到特殊字符\\需要使用\\\\进行转义 二、匹配规则 常见的校验规则如下： 规则 描述 \\ 转义 ^ 匹配输入的开始 $ 匹配输入的结束 * 匹配前一个表达式 0 次或多次 + 匹配前面一个表达式 1 次或者多次。等价于 {1,} ? 匹配前面一个表达式 0 次或者 1 次。等价于{0,1} . 默认匹配除换行符之外的任何单个字符 x(?=y) 匹配'x'仅仅当'x'后面跟着'y'。这种叫做先行断言 (? 匹配'x'仅当'x'前面是'y'.这种叫做后行断言 x(?!y) 仅仅当'x'后面不跟着'y'时匹配'x'，这被称为正向否定查找 (?y)x 仅仅当'x'前面不是'y'时匹配'x'，这被称为反向否定查找 x\\ y 匹配‘x’或者‘y’ {n} n 是一个正整数，匹配了前面一个字符刚好出现了 n 次 {n,} n是一个正整数，匹配前一个字符至少出现了n次 {n,m} n 和 m 都是整数。匹配前面的字符至少n次，最多m次 [xyz] 一个字符集合。匹配方括号中的任意字符 xyz\\ 匹配任何没有包含在方括号中的字符 \\b 匹配一个词的边界，例如在字母和空格之间 \\B 匹配一个非单词边界 \\d 匹配一个数字 \\D 匹配一个非数字字符 \\f 匹配一个换页符 \\n 匹配一个换行符 \\r 匹配一个回车符 \\s 匹配一个空白字符，包括空格、制表符、换页符和换行符 \\S 匹配一个非空白字符 \\w 匹配一个单字字符（字母、数字或者下划线） \\W 匹配一个非单字字符 正则表达式标记 标志 描述 g 全局搜索。 i 不区分大小写搜索。 m 多行搜索。 s 允许 . 匹配换行符。 u 使用unicode码的模式进行匹配。 y 执行“粘性(sticky)”搜索,匹配从目标字符串的当前位置开始。 使用方法如下： var re = /pattern/flags; var re = new RegExp(\"pattern\", \"flags\"); 在了解下正则表达式基本的之外，还可以掌握几个正则表达式的特性： 贪婪模式 在了解贪婪模式前，首先举个例子： const reg = /ab{1,3}c/ 在匹配过程中，尝试可能的顺序是从多往少的方向去尝试。首先会尝试bbb，然后再看整个正则是否能匹配。不能匹配时，吐出一个b，即在bb的基础上，再继续尝试，以此重复 如果多个贪婪量词挨着，则深度优先搜索 const string = \"12345\"; const regx = /(\\d{1,3})(\\d{1,3})/; console.log( string.match(reg) ); // => [\"12345\", \"123\", \"45\", index: 0, input: \"12345\"] 其中，前面的\\d{1,3}匹配的是\"123\"，后面的\\d{1,3}匹配的是\"45\" 懒惰模式 惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配 var string = \"12345\"; var regex = /(\\d{1,3}?)(\\d{1,3})/; console.log( string.match(regex) ); // => [\"1234\", \"1\", \"234\", index: 0, input: \"12345\"] 其中\\d{1,3}?只匹配到一个字符\"1\"，而后面的\\d{1,3}匹配了\"234\" 分组 分组主要是用过()进行实现，比如beyond{3}，是匹配d字母3次。而(beyond){3}是匹配beyond三次 在()内使用|达到或的效果，如(abc | xxx)可以匹配abc或者xxx 反向引用，巧用$分组捕获 let str = \"John Smith\"; // 交换名字和姓氏 console.log(str.replace(/(john) (smith)/i, '$2, $1')) // Smith, John 三、匹配方法 正则表达式常被用于某些方法，我们可以分成两类： 字符串（str）方法：match、matchAll、search、replace、split 正则对象下（regexp）的方法：test、exec 方法 描述 exec 一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。 test 一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。 match 一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。 matchAll 一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。 search 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。 replace 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。 split 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。 str.match(regexp) str.match(regexp) 方法在字符串 str 中找到匹配 regexp 的字符 如果 regexp 不带有 g 标记，则它以数组的形式返回第一个匹配项，其中包含分组和属性 index（匹配项的位置）、input（输入字符串，等于 str） let str = \"I love JavaScript\"; let result = str.match(/Java(Script)/); console.log( result[0] ); // JavaScript（完全匹配） console.log( result[1] ); // Script（第一个分组） console.log( result.length ); // 2 // 其他信息： console.log( result.index ); // 7（匹配位置） console.log( result.input ); // I love JavaScript（源字符串） 如果 regexp 带有 g 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息 let str = \"I love JavaScript\"; let result = str.match(/Java(Script)/g); console.log( result[0] ); // JavaScript console.log( result.length ); // 1 如果没有匹配项，则无论是否带有标记 g ，都将返回 null let str = \"I love JavaScript\"; let result = str.match(/HTML/); console.log(result); // null str.matchAll(regexp) 返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器 const regexp = /t(e)(st(\\d?))/g; const str = 'test1test2'; const array = [...str.matchAll(regexp)]; console.log(array[0]); // expected output: Array [\"test1\", \"e\", \"st1\", \"1\"] console.log(array[1]); // expected output: Array [\"test2\", \"e\", \"st2\", \"2\"] str.search(regexp) 返回第一个匹配项的位置，如果未找到，则返回 -1 let str = \"A drop of ink may make a million think\"; console.log( str.search( /ink/i ) ); // 10（第一个匹配位置） 这里需要注意的是，search 仅查找第一个匹配项 str.replace(regexp) 替换与正则表达式匹配的子串，并返回替换后的字符串。在不设置全局匹配g的时候，只替换第一个匹配成功的字符串片段 const reg1=/javascript/i; const reg2=/javascript/ig; console.log('hello Javascript Javascript Javascript'.replace(reg1,'js')); //hello js Javascript Javascript console.log('hello Javascript Javascript Javascript'.replace(reg2,'js')); //hello js js js str.split(regexp) 使用正则表达式（或子字符串）作为分隔符来分割字符串 console.log('12, 34, 56'.split(/,\\s*/)) // 数组 ['12', '34', '56'] regexp.exec(str) regexp.exec(str) 方法返回字符串 str 中的 regexp 匹配项，与以前的方法不同，它是在正则表达式而不是字符串上调用的 根据正则表达式是否带有标志 g，它的行为有所不同 如果没有 g，那么 regexp.exec(str) 返回的第一个匹配与 str.match(regexp) 完全相同 如果有标记 g，调用 regexp.exec(str) 会返回第一个匹配项，并将紧随其后的位置保存在属性regexp.lastIndex 中。 下一次同样的调用会从位置 regexp.lastIndex 开始搜索，返回下一个匹配项，并将其后的位置保存在 regexp.lastIndex 中 let str = 'More about JavaScript at https://javascript.info'; let regexp = /javascript/ig; let result; while (result = regexp.exec(str)) { console.log( `Found ${result[0]} at position ${result.index}` ); // Found JavaScript at position 11 // Found javascript at position 33 } regexp.test(str) 查找匹配项，然后返回 true/false 表示是否存在 let str = \"I love JavaScript\"; // 这两个测试相同 console.log( /love/i.test(str) ); // true 四、应用场景 通过上面的学习，我们对正则表达式有了一定的了解 下面再来看看正则表达式一些案例场景： 验证QQ合法性（5~15位、全是数字、不以0开头）： const reg = /^[1-9][0-9]{4,14}$/ const isvalid = patrn.exec(s) 校验用户账号合法性（只能输入5-20个以字母开头、可带数字、“_”、“.”的字串）： var patrn=/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/; const isvalid = patrn.exec(s) 将url参数解析为对象 const protocol = '(?https?:)'; const host = '(?(?[^/#?:]+)(?::(?\\\\d+))?)'; const path = '(?(?:\\\\/[^/#?]+)*\\\\/?)'; const search = '(?(?:\\\\?[^#]*)?)'; const hash = '(?(?:#.*)?)'; const reg = new RegExp(`^${protocol}\\/\\/${host}${path}${search}${hash}$`); function execURL(url){ const result = reg.exec(url); if(result){ result.groups.port = result.groups.port || ''; return result.groups; } return { protocol:'',host:'',hostname:'',port:'', pathname:'',search:'',hash:'', }; } console.log(execURL('https://localhost:8080/?a=b#xxxx')); protocol: \"https:\" host: \"localhost:8080\" hostname: \"localhost\" port: \"8080\" pathname: \"/\" search: \"?a=b\" hash: \"#xxxx\" 再将上面的search和hash进行解析 function execUrlParams(str){ str = str.replace(/^[#?&]/,''); const result = {}; if(!str){ //如果正则可能配到空字符串，极有可能造成死循环，判断很重要 return result; } const reg = /(?:^|&)([^&=]*)=?([^&]*?)(?=&|$)/y let exec = reg.exec(str); while(exec){ result[exec[1]] = exec[2]; exec = reg.exec(str); } return result; } console.log(execUrlParams('#'));// {} console.log(execUrlParams('##'));//{'#':''} console.log(execUrlParams('?q=3606&src=srp')); //{q: \"3606\", src: \"srp\"} console.log(execUrlParams('test=a=b=c&&==&a='));//{test: \"a=b=c\", \"\": \"=\", a: \"\"} 参考文献 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/scope.html":{"url":"JavaScript/scope.html","title":"作用域链","keywords":"","body":"面试官：说说你对作用域链的理解 一、作用域 作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合 换句话说，作用域决定了代码区块中变量和其他资源的可见性 举个例子 function myFunction() { let inVariable = \"函数内部变量\"; } myFunction();//要先执行这个函数，否则根本不知道里面是啥 console.log(inVariable); // Uncaught ReferenceError: inVariable is not defined 上述例子中，函数myFunction内部创建一个inVariable变量，当我们在全局访问这个变量的时候，系统会报错 这就说明我们在全局是无法获取到（闭包除外）函数内部的变量 我们一般将作用域分成： 全局作用域 函数作用域 块级作用域 全局作用域 任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问 // 全局变量 var greeting = 'Hello World!'; function greet() { console.log(greeting); } // 打印 'Hello World!' greet(); 函数作用域 函数作用域也叫局部作用域，如果一个变量是在函数内部声明的它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问 function greet() { var greeting = 'Hello World!'; console.log(greeting); } // 打印 'Hello World!' greet(); // 报错： Uncaught ReferenceError: greeting is not defined console.log(greeting); 可见上述代码中在函数内部声明的变量或函数，在函数外部是无法访问的，这说明在函数内部定义的变量或者方法只是函数作用域 块级作用域 ES6引入了let和const关键字,和var关键字不同，在大括号中使用let和const声明的变量存在于块级作用域中。在大括号之外不能访问这些变量 { // 块级作用域中的变量 let greeting = 'Hello World!'; var lang = 'English'; console.log(greeting); // Prints 'Hello World!' } // 变量 'English' console.log(lang); // 报错：Uncaught ReferenceError: greeting is not defined console.log(greeting); 二、词法作用域 词法作用域，又叫静态作用域，变量被创建时就确定好了，而非执行阶段确定的。也就是说我们写好代码时它的作用域就确定了，JavaScript 遵循的就是词法作用域 var a = 2; function foo(){ console.log(a) } function bar(){ var a = 3; foo(); } n() 上述代码改变成一张图 由于JavaScript遵循词法作用域，相同层级的 foo 和 bar 就没有办法访问到彼此块作用域中的变量，所以输出2 三、作用域链 当在Javascript中使用一个变量的时候，首先Javascript引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域 如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错 这里拿《你不知道的Javascript(上)》中的一张图解释： 把作用域比喻成一个建筑，这份建筑代表程序中的嵌套作用域链，第一层代表当前的执行作用域，顶层代表全局作用域 变量的引用会顺着当前楼层进行查找，如果找不到，则会往上一层找，一旦到达顶层，查找的过程都会停止 下面代码演示下： var sex = '男'; function person() { var name = '张三'; function student() { var age = 18; console.log(name); // 张三 console.log(sex); // 男 } student(); console.log(age); // Uncaught ReferenceError: age is not defined } person(); 上述代码主要主要做了以下工作： student函数内部属于最内层作用域，找不到name，向上一层作用域person函数内部找，找到了输出“张三” student内部输出cat时找不到，向上一层作用域person函数找，还找不到继续向上一层找，即全局作用域，找到了输出“男” 在person函数内部输出age时找不到，向上一层作用域找，即全局作用域，还是找不到则报错 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/security.html":{"url":"JavaScript/security.html","title":"web常见的攻击方式","keywords":"","body":"面试官：web常见的攻击方式有哪些？如何防御？ 面试官：web常见的攻击方式有哪些？如何防御？ 一、是什么 Web攻击（WebAttack）是针对用户上网行为或网站服务器等设备进行攻击的行为 如植入恶意代码，修改网站权限，获取网站用户隐私信息等等 Web应用程序的安全性是任何基于Web业务的重要组成部分 确保Web应用程序安全十分重要，即使是代码中很小的 bug 也有可能导致隐私信息被泄露 站点安全就是为保护站点不受未授权的访问、使用、修改和破坏而采取的行为或实践 我们常见的Web攻击方式有 XSS (Cross Site Scripting) 跨站脚本攻击 CSRF（Cross-site request forgery）跨站请求伪造 SQL注入攻击 二、XSS XSS，跨站脚本攻击，允许攻击者将恶意代码植入到提供给其它用户使用的页面中 XSS涉及到三方，即攻击者、客户端与Web应用 XSS的攻击目标是为了盗取存储在客户端的cookie或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互 举个例子： 一个搜索页面，根据url参数决定关键词的内容 \"> 搜索 您搜索的关键词是： 这里看似并没有问题，但是如果不按套路出牌呢？ 用户输入\">alert('XSS');，拼接到 HTML 中返回给浏览器。形成了如下的 HTML： alert('XSS');\"> 搜索 您搜索的关键词是：\">alert('XSS'); 浏览器无法分辨出 alert('XSS'); 是恶意代码，因而将其执行，试想一下，如果是获取cookie发送对黑客服务器呢？ 根据攻击的来源，XSS攻击可以分成： 存储型 反射型 DOM 型 存储型 存储型 XSS 的攻击步骤： 攻击者将恶意代码提交到目标网站的数据库中 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作 这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等 反射型 XSS 反射型 XSS 的攻击步骤： 攻击者构造出特殊的 URL，其中包含恶意代码 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作 反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。 反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。 由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。 POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见 DOM 型 XSS DOM 型 XSS 的攻击步骤： 攻击者构造出特殊的 URL，其中包含恶意代码 用户打开带有恶意代码的 URL 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作 DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞 XSS的预防 通过前面介绍，看到XSS攻击的两大要素： 攻击者提交而恶意代码 浏览器执行恶意代码 针对第一个要素，我们在用户输入的过程中，过滤掉用户输入的恶劣代码，然后提交给后端，但是如果攻击者绕开前端请求，直接构造请求就不能预防了 而如果在后端写入数据库前，对输入进行过滤，然后把内容给前端，但是这个内容在不同地方就会有不同显示 例如： 一个正常的用户输入了 5 这个内容，在写入数据库前，被转义，变成了 5 在客户端中，一旦经过了 escapeHTML()，客户端显示的内容就变成了乱码( 5 ) 在前端中，不同的位置所需的编码也不同。 当 5 作为 HTML 拼接页面时，可以正常显示： 5 &lt; 7 当 5 通过 Ajax 返回，然后赋值给 JavaScript 的变量时，前端得到的字符串就是转义后的字符。这个内容不能直接用于 Vue 等模板的展示，也不能直接用于内容长度计算。不能用于标题、alert 等 可以看到，过滤并非可靠的，下面就要通过防止浏览器执行恶意代码： 在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等 如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患 DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等， 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免 1 // setTimeout()/setInterval() 中调用恶意代码 setTimeout(\"UNTRUSTED\") setInterval(\"UNTRUSTED\") // location 调用恶意代码 location.href = 'UNTRUSTED' // eval() 中调用恶意代码 eval(\"UNTRUSTED\") 三、CSRF CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求 利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目 一个典型的CSRF攻击有着如下的流程： 受害者登录a.com，并保留了登录凭证（Cookie） 攻击者引诱受害者访问了b.com b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求 a.com以受害者的名义执行了act=xx 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作 csrf可以通过get请求，即通过访问img的页面后，浏览器自动访问目标地址，发送请求 同样，也可以设置一个自动提交的表单发送post请求，如下： document.forms[0].submit(); 访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作 还有一种为使用a标签的，需要用户点击链接才会触发 访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作 重磅消息！！ CSRF的特点 攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生 攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据 整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用” 跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪 CSRF的预防 CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性 防止csrf常用方案如下： 阻止不明外域的访问 同源检测 Samesite Cookie 提交时要求附加本域才能获取的信息 CSRF Token 双重Cookie验证 这里主要讲讲token这种形式，流程如下： 用户打开页面的时候，服务器需要给这个用户生成一个Token 对于GET请求，Token将附在请求地址之后。对于 POST 请求来说，要在 form 的最后加上 当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性 四、SQL注入 Sql 注入攻击，是通过将恶意的 Sql查询或添加语句插入到应用的输入参数中，再在后台 Sql服务器上解析执行进行的攻击 流程如下所示： 找出SQL漏洞的注入点 判断数据库的类型以及版本 猜解用户名和密码 利用工具查找Web后台管理入口 入侵和破坏 预防方式如下： 严格检查输入变量的类型和格式 过滤和转义特殊字符 对访问数据库的Web应用程序采用Web应用防火墙 上述只是列举了常见的web攻击方式，实际开发过程中还会遇到很多安全问题，对于这些问题， 切记不可忽视 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/single_sign.html":{"url":"JavaScript/single_sign.html","title":"实现单点登录","keywords":"","body":"面试官：什么是单点登录？如何实现？ 一、是什么 单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一 SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统 SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过passport，子系统本身将不参与登录操作 当一个系统成功登录以后，passport将会颁发一个令牌给各个子系统，子系统可以拿着令牌会获取各自的受保护资源，为了减少频繁认证，各个子系统在被passport授权以后，会建立一个局部会话，在一定时间内可以无需再次向passport发起认证 上图有四个系统，分别是Application1、Application2、Application3、和SSO，当Application1、Application2、Application3需要登录时，将跳到SSO系统，SSO系统完成登录，其他的应用系统也就随之登录了 举个例子 淘宝、天猫都属于阿里旗下，当用户登录淘宝后，再打开天猫，系统便自动帮用户登录了天猫，这种现象就属于单点登录 二、如何实现 同域名下的单点登录 cookie的domain属性设置为当前域的父域，并且父域的cookie会被子域所共享。path属性默认为web应用的上下文路径 利用 Cookie 的这个特点，没错，我们只需要将Cookie的domain属性设置为父域的域名（主域名），同时将 Cookie的path属性设置为根路径，将 Session ID（或 Token）保存到父域中。这样所有的子域应用就都可以访问到这个Cookie 不过这要求应用系统的域名需建立在一个共同的主域名之下，如 tieba.baidu.com 和 map.baidu.com，它们都建立在 baidu.com这个主域名之下，那么它们就可以通过这种方式来实现单点登录 不同域名下的单点登录(一) 如果是不同域的情况下，Cookie是不共享的，这里我们可以部署一个认证中心，用于专门处理登录请求的独立的 Web服务 用户统一在认证中心进行登录，登录成功后，认证中心记录用户的登录状态，并将 token 写入 Cookie（注意这个 Cookie是认证中心的，应用系统是访问不到的） 应用系统检查当前请求有没有 Token，如果没有，说明用户在当前系统中尚未登录，那么就将页面跳转至认证中心 由于这个操作会将认证中心的 Cookie 自动带过去，因此，认证中心能够根据 Cookie 知道用户是否已经登录过了 如果认证中心发现用户尚未登录，则返回登录页面，等待用户登录 如果发现用户已经登录过了，就不会让用户再次登录了，而是会跳转回目标 URL，并在跳转前生成一个 Token，拼接在目标URL 的后面，回传给目标应用系统 应用系统拿到 Token之后，还需要向认证中心确认下 Token 的合法性，防止用户伪造。确认无误后，应用系统记录用户的登录状态，并将 Token写入Cookie，然后给本次访问放行。（注意这个 Cookie 是当前应用系统的）当用户再次访问当前应用系统时，就会自动带上这个 Token，应用系统验证 Token 发现用户已登录，于是就不会有认证中心什么事了 此种实现方式相对复杂，支持跨域，扩展性好，是单点登录的标准做法 不同域名下的单点登录(二) 可以选择将 Session ID （或 Token ）保存到浏览器的 LocalStorage 中，让前端在每次向后端发送请求时，主动将LocalStorage的数据传递给服务端 这些都是由前端来控制的，后端需要做的仅仅是在用户登录成功后，将 Session ID（或 Token）放在响应体中传递给前端 单点登录完全可以在前端实现。前端拿到 Session ID（或 Token ）后，除了将它写入自己的 LocalStorage 中之外，还可以通过特殊手段将它写入多个其他域下的 LocalStorage 中 关键代码如下： // 获取 token var token = result.data.token; // 动态创建一个不可见的iframe，在iframe中加载一个跨域HTML var iframe = document.createElement(\"iframe\"); iframe.src = \"http://app1.com/localstorage.html\"; document.body.append(iframe); // 使用postMessage()方法将token传递给iframe setTimeout(function () { iframe.contentWindow.postMessage(token, \"http://app1.com\"); }, 4000); setTimeout(function () { iframe.remove(); }, 6000); // 在这个iframe所加载的HTML中绑定一个事件监听器，当事件被触发时，把接收到的token数据写入localStorage window.addEventListener('message', function (event) { localStorage.setItem('token', event.data) }, false); 前端通过 iframe+postMessage() 方式，将同一份 Token 写入到了多个域下的 LocalStorage 中，前端每次在向后端发送请求之前，都会主动从 LocalStorage 中读取Token并在请求中携带，这样就实现了同一份Token 被多个域所共享 此种实现方式完全由前端控制，几乎不需要后端参与，同样支持跨域 三、流程 单点登录的流程图如下所示： 用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数 sso认证中心发现用户未登录，将用户引导至登录页面 用户输入用户名密码提交登录申请 sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌 sso认证中心带着令牌跳转会最初的请求地址（系统1） 系统1拿到令牌，去sso认证中心校验令牌是否有效 sso认证中心校验令牌，返回有效，注册系统1 系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源 用户访问系统2的受保护资源 系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数 sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌 系统2拿到令牌，去sso认证中心校验令牌是否有效 sso认证中心校验令牌，返回有效，注册系统2 系统2使用该令牌创建与用户的局部会话，返回受保护资源 用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话 用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心 全局会话与局部会话有如下约束关系： 局部会话存在，全局会话一定存在 全局会话存在，局部会话不一定存在 全局会话销毁，局部会话必须销毁 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/string_api.html":{"url":"JavaScript/string_api.html","title":"字符串的常用方法","keywords":"","body":"面试官：JavaScript字符串的常用方法有哪些？ 一、操作方法 我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变 增 这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作 除了常用+以及${}进行字符串拼接之外，还可通过concat concat 用于将一个或多个字符串拼接成一个新字符串 let stringValue = \"hello \"; let result = stringValue.concat(\"world\"); console.log(result); // \"hello world\" console.log(stringValue); // \"hello\" 删 这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作 常见的有： slice() substr() substring() 这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。 let stringValue = \"hello world\"; console.log(stringValue.slice(3)); // \"lo world\" console.log(stringValue.substring(3)); // \"lo world\" console.log(stringValue.substr(3)); // \"lo world\" console.log(stringValue.slice(3, 7)); // \"lo w\" console.log(stringValue.substring(3,7)); // \"lo w\" console.log(stringValue.substr(3, 7)); // \"lo worl\" 改 这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作 常见的有： trim()、trimLeft()、trimRight() repeat() padStart()、padEnd() toLowerCase()、 toUpperCase() trim()、trimLeft()、trimRight() 删除前、后或前后所有空格符，再返回新的字符串 let stringValue = \" hello world \"; let trimmedStringValue = stringValue.trim(); console.log(stringValue); // \" hello world \" console.log(trimmedStringValue); // \"hello world\" repeat() 接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果 let stringValue = \"na \"; let copyResult = stringValue.repeat(2) // na na padEnd() 复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件 let stringValue = \"foo\"; console.log(stringValue.padStart(6)); // \" foo\" console.log(stringValue.padStart(9, \".\")); // \"......foo\" toLowerCase()、 toUpperCase() 大小写转化 let stringValue = \"hello world\"; console.log(stringValue.toUpperCase()); // \"HELLO WORLD\" console.log(stringValue.toLowerCase()); // \"hello world\" 查 除了通过索引的方式获取字符串的值，还可通过： chatAt() indexOf() startWith() includes() charAt() 返回给定索引位置的字符，由传给方法的整数参数指定 let message = \"abcde\"; console.log(message.charAt(2)); // \"c\" indexOf() 从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ） let stringValue = \"hello world\"; console.log(stringValue.indexOf(\"o\")); // 4 startWith()、includes() 从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值 let message = \"foobarbaz\"; console.log(message.startsWith(\"foo\")); // true console.log(message.startsWith(\"bar\")); // false console.log(message.includes(\"bar\")); // true console.log(message.includes(\"qux\")); // false 二、转换方法 split 把字符串按照指定的分割符，拆分成数组中的每一项 let str = \"12+23+34\" let arr = str.split(\"+\") // [12,23,34] 三、模板匹配方法 针对正则表达式，字符串设计了几个方法： match() search() replace() match() 接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，返回数组 let text = \"cat, bat, sat, fat\"; let pattern = /.at/; let matches = text.match(pattern); console.log(matches[0]); // \"cat\" search() 接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1 let text = \"cat, bat, sat, fat\"; let pos = text.search(/at/); console.log(pos); // 1 replace() 接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数） let text = \"cat, bat, sat, fat\"; let result = text.replace(\"at\", \"ond\"); console.log(result); // \"cond, bat, sat, fat\" 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/tail_recursion.html":{"url":"JavaScript/tail_recursion.html","title":"对尾递归的理解","keywords":"","body":"面试官：举例说明你对尾递归的理解，有哪些应用场景 一、递归 递归（英语：Recursion） 在数学与计算机科学中，是指在函数的定义中使用函数自身的方法 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数 其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解 一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回 下面实现一个函数 pow(x, n)，它可以计算 x 的 n 次方 使用迭代的方式，如下： function pow(x, n) { let result = 1; // 再循环中，用 x 乘以 result n 次 for (let i = 0; i 使用递归的方式，如下： function pow(x, n) { if (n == 1) { return x; } else { return x * pow(x, n - 1); } } pow(x, n) 被调用时，执行分为两个分支： if n==1 = x / pow(x, n) = \\ else = x * pow(x, n - 1) 也就是说pow 递归地调用自身 直到 n == 1 为了计算 pow(2, 4)，递归变体经过了下面几个步骤： pow(2, 4) = 2 * pow(2, 3) pow(2, 3) = 2 * pow(2, 2) pow(2, 2) = 2 * pow(2, 1) pow(2, 1) = 2 因此，递归将函数调用简化为一个更简单的函数调用，然后再将其简化为一个更简单的函数，以此类推，直到结果 二、尾递归 尾递归，即在函数尾位置调用自身（或是一个尾调用本身的其他函数等等）。尾递归也是递归的一种特殊情形。尾递归是一种特殊的尾调用，即在尾部直接调用自身的递归函数 尾递归在普通尾调用的基础上，多出了2个特征： 在尾部调用的是函数自身 可通过优化，使得计算仅占用常量栈空间 在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，递归次数过多容易造成栈溢出 这时候，我们就可以使用尾递归，即一个函数中所有递归形式的调用都出现在函数的末尾，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误 实现一下阶乘，如果用普通的递归，如下： function factorial(n) { if (n === 1) return 1; return n * factorial(n - 1); } factorial(5) // 120 如果n等于5，这个方法要执行5次，才返回最终的计算表达式，这样每次都要保存这个方法，就容易造成栈溢出，复杂度为O(n) 如果我们使用尾递归，则如下： function factorial(n, total) { if (n === 1) return total; return factorial(n - 1, n * total); } factorial(5) // 120 可以看到，每一次返回的就是一个新的函数，不带上一个函数的参数，也就不需要储存上一个函数了。尾递归只需要保存一个调用栈，复杂度 O(1) 二、应用场景 数组求和 function sumArray(arr, total) { if(arr.length === 1) { return total } return sum(arr, total + arr.pop()) } 使用尾递归优化求斐波那契数列 function factorial2 (n, start = 1, total = 1) { if(n 数组扁平化 let a = [1,2,3, [1,2,3, [1,2,3]]] // 变成 let a = [1,2,3,1,2,3,1,2,3] // 具体实现 function flat(arr = [], result = []) { arr.forEach(v => { if(Array.isArray(v)) { result = result.concat(flat(v, [])) }else { result.push(v) } }) return result } 数组对象格式化 let obj = { a: '1', b: { c: '2', D: { E: '3' } } } // 转化为如下： let obj = { a: '1', b: { c: '2', d: { e: '3' } } } // 代码实现 function keysLower(obj) { let reg = new RegExp(\"([A-Z]+)\", \"g\"); for (let key in obj) { if (obj.hasOwnProperty(key)) { let temp = obj[key]; if (reg.test(key.toString())) { // 将修改后的属性名重新赋值给temp，并在对象obj内添加一个转换后的属性 temp = obj[key.replace(reg, function (result) { return result.toLowerCase() })] = obj[key]; // 将之前大写的键属性删除 delete obj[key]; } // 如果属性是对象或者数组，重新执行函数 if (typeof temp === 'object' || Object.prototype.toString.call(temp) === '[object Array]') { keysLower(temp); } } } return obj; }; 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/this.html":{"url":"JavaScript/this.html","title":"this对象","keywords":"","body":"面试官：谈谈this对象的理解 一、定义 函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别 在绝大多数情况下，函数的调用方式决定了 this 的值（运行时绑定） this 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象 举个例子： function baz() { // 当前调用栈是：baz // 因此，当前调用位置是全局作用域 console.log( \"baz\" ); bar(); // bar // 因此，当前调用位置在baz中 console.log( \"bar\" ); foo(); // bar --> foo // 因此，当前调用位置在bar中 console.log( \"foo\" ); } baz(); // 同时，this在函数执行过程中，this一旦被确定了，就不可以再更改 var a = 10; var obj = { a: 20 } function fn() { this = obj; // 修改this，运行后会报错 console.log(this.a); } fn(); 二、绑定规则 根据不同的使用场合，this有不同的值，主要分为下面几种情况： 默认绑定 隐式绑定 new绑定 显示绑定 默认绑定 全局环境中定义person函数，内部使用this关键字 var name = 'Jenny'; function person() { return this.name; } console.log(person()); //Jenny 上述代码输出Jenny，原因是调用函数的对象在游览器中位window，因此this指向window，所以输出Jenny 注意： 严格模式下，不能将全局对象用于默认绑定，this会绑定到undefined，只有函数运行在非严格模式下，默认绑定才能绑定到全局对象 隐式绑定 函数还可以作为某个对象的方法调用，这时this就指这个上级对象 function test() { console.log(this.x); } var obj = {}; obj.x = 1; obj.m = test; obj.m(); // 1 这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象 var o = { a:10, b:{ fn:function(){ console.log(this.a); //undefined } } } o.b.fn(); 上述代码中，this的上一级对象为b，b内部并没有a变量的定义，所以输出undefined 这里再举一种特殊情况 var o = { a:10, b:{ a:12, fn:function(){ console.log(this.a); //undefined console.log(this); //window } } } var j = o.b.fn; j(); 此时this指向的是window，这里的大家需要记住，this永远指向的是最后调用它的对象，虽然fn是对象b的方法，但是fn赋值给j时候并没有执行，所以最终指向window new绑定 通过构建函数new关键字生成一个实例对象，此时this指向这个实例对象 function test() { 　this.x = 1; } var obj = new test(); obj.x // 1 上述代码之所以能过输出1，是因为new关键字改变了this的指向 这里再列举一些特殊情况： new过程遇到return一个对象，此时this指向为返回的对象 function fn() { this.user = 'xxx'; return {}; } var a = new fn(); console.log(a.user); //undefined 如果返回一个简单类型的时候，则this指向实例对象 function fn() { this.user = 'xxx'; return 1; } var a = new fn; console.log(a.user); //xxx 注意的是null虽然也是对象，但是此时new仍然指向实例对象 function fn() { this.user = 'xxx'; return null; } var a = new fn; console.log(a.user); //xxx 显示修改 apply()、call()、bind()是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时this指的就是这第一个参数 var x = 0; function test() { 　console.log(this.x); } var obj = {}; obj.x = 1; obj.m = test; obj.m.apply(obj) // 1 关于apply、call、bind三者的区别，我们后面再详细说 三、箭头函数 在 ES6 的语法中还提供了箭头函语法，让我们在代码书写时就能确定 this 的指向（编译时绑定） 举个例子： const obj = { sayThis: () => { console.log(this); } }; obj.sayThis(); // window 因为 JavaScript 没有块作用域，所以在定义 sayThis 的时候，里面的 this 就绑到 window 上去了 const globalSay = obj.sayThis; globalSay(); // window 浏览器中的 global 对象 虽然箭头函数的this能够在编译的时候就确定了this的指向，但也需要注意一些潜在的坑 下面举个例子： 绑定事件监听 const button = document.getElementById('mngb'); button.addEventListener('click', ()=> { console.log(this === window) // true this.innerHTML = 'clicked button' }) 上述可以看到，我们其实是想要this为点击的button，但此时this指向了window 包括在原型上添加方法时候，此时this指向window Cat.prototype.sayName = () => { console.log(this === window) //true return this.name } const cat = new Cat('mm'); cat.sayName() 同样的，箭头函数不能作为构建函数 四、优先级 隐式绑定 VS 显式绑定 function foo() { console.log( this.a ); } var obj1 = { a: 2, foo: foo }; var obj2 = { a: 3, foo: foo }; obj1.foo(); // 2 obj2.foo(); // 3 obj1.foo.call( obj2 ); // 3 obj2.foo.call( obj1 ); // 2 显然，显示绑定的优先级更高 new绑定 VS 隐式绑定 function foo(something) { this.a = something; } var obj1 = { foo: foo }; var obj2 = {}; obj1.foo( 2 ); console.log( obj1.a ); // 2 obj1.foo.call( obj2, 3 ); console.log( obj2.a ); // 3 var bar = new obj1.foo( 4 ); console.log( obj1.a ); // 2 console.log( bar.a ); // 4 可以看到，new绑定的优先级>隐式绑定 new绑定 VS 显式绑定 因为new和apply、call无法一起使用，但硬绑定也是显式绑定的一种，可以替换测试 function foo(something) { this.a = something; } var obj1 = {}; var bar = foo.bind( obj1 ); bar( 2 ); console.log( obj1.a ); // 2 var baz = new bar( 3 ); console.log( obj1.a ); // 2 console.log( baz.a ); // 3 bar被绑定到obj1上，但是new bar(3) 并没有像我们预计的那样把obj1.a修改为3。但是，new修改了绑定调用bar()中的this 我们可认为new绑定优先级>显式绑定 综上，new绑定优先级 > 显示绑定优先级 > 隐式绑定优先级 > 默认绑定优先级 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/type_conversion.html":{"url":"JavaScript/type_conversion.html","title":"JavaScript 中的类型转换机制","keywords":"","body":"面试官：谈谈 JavaScript 中的类型转换机制 一、概述 前面我们讲到，JS中有六种简单数据类型：undefined、null、boolean、string、number、symbol，以及引用类型：object 但是我们在声明的时候只有一种数据类型，只有到运行期间才会确定当前类型 let x = y ? 1 : a; 上面代码中，x的值在编译阶段是无法获取的，只有等到程序运行时才能知道 虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的，如果运算子的类型与预期不符合，就会触发类型转换机制 常见的类型转换有： 强制转换（显示转换） 自动转换（隐式转换） 二、显示转换 显示转换，即我们很清楚可以看到这里发生了类型的转变，常见的方法有： Number() parseInt() String() Boolean() Number() 将任意类型的值转化为数值 先给出类型转换规则： 实践一下： Number(324) // 324 // 字符串：如果可以被解析为数值，则转换为相应的数值 Number('324') // 324 // 字符串：如果不可以被解析为数值，返回 NaN Number('324abc') // NaN // 空字符串转为0 Number('') // 0 // 布尔值：true 转成 1，false 转成 0 Number(true) // 1 Number(false) // 0 // undefined：转成 NaN Number(undefined) // NaN // null：转成0 Number(null) // 0 // 对象：通常转换成NaN(除了只包含单个数值的数组) Number({a: 1}) // NaN Number([1, 2, 3]) // NaN Number([5]) // 5 从上面可以看到，Number转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为NaN parseInt() parseInt相比Number，就没那么严格了，parseInt函数逐个解析字符，遇到不能转换的字符就停下来 parseInt('32a3') //32 String() 可以将任意类型的值转化成字符串 给出转换规则图： 实践一下： // 数值：转为相应的字符串 String(1) // \"1\" //字符串：转换后还是原来的值 String(\"a\") // \"a\" //布尔值：true转为字符串\"true\"，false转为字符串\"false\" String(true) // \"true\" //undefined：转为字符串\"undefined\" String(undefined) // \"undefined\" //null：转为字符串\"null\" String(null) // \"null\" //对象 String({a: 1}) // \"[object Object]\" String([1, 2, 3]) // \"1,2,3\" Boolean() 可以将任意类型的值转为布尔值，转换规则如下： 实践一下： Boolean(undefined) // false Boolean(null) // false Boolean(0) // false Boolean(NaN) // false Boolean('') // false Boolean({}) // true Boolean([]) // true Boolean(new Boolean(false)) // true 三、隐式转换 在隐式转换中，我们可能最大的疑惑是 ：何时发生隐式转换？ 我们这里可以归纳为两种情况发生隐式转换的场景： 比较运算（==、!=、>、）、if、while需要布尔值地方 算术运算（+、-、*、/、%） 除了上面的场景，还要求运算符两边的操作数不是同一类型 自动转换为布尔值 在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用Boolean函数 可以得出个小结： undefined null false +0 -0 NaN \"\" 除了上面几种会被转化成false，其他都换被转化成true 自动转换成字符串 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串 具体规则是：先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串 常发生在+运算中，一旦存在字符串，则会进行字符串拼接操作 '5' + 1 // '51' '5' + true // \"5true\" '5' + false // \"5false\" '5' + {} // \"5[object Object]\" '5' + [] // \"5\" '5' + function (){} // \"5function (){}\" '5' + undefined // \"5undefined\" '5' + null // \"5null\" 自动转换成数值 除了+有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值 '5' - '2' // 3 '5' * '2' // 10 true - 1 // 0 false - 1 // -1 '1' - 1 // 0 '5' * [] // 0 false / '5' // 0 'abc' - 1 // NaN null + 1 // 1 undefined + 1 // NaN null转为数值时，值为0 。undefined转为数值时，值为NaN 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/typeof_instanceof.html":{"url":"JavaScript/typeof_instanceof.html","title":"typeof 与 instanceof 区别","keywords":"","body":"面试官：typeof 与 instanceof 区别 一、typeof typeof 操作符返回一个字符串，表示未经计算的操作数的类型 使用方法如下： typeof operand typeof(operand) operand表示对象或原始值的表达式，其类型将被返回 举个例子 typeof 1 // 'number' typeof '1' // 'string' typeof undefined // 'undefined' typeof true // 'boolean' typeof Symbol() // 'symbol' typeof null // 'object' typeof [] // 'object' typeof {} // 'object' typeof console // 'object' typeof console.log // 'function' 从上面例子，前6个都是基础数据类型。虽然typeof null为object，但这只是JavaScript 存在的一个悠久 Bug，不代表null就是引用数据类型，并且null本身也不是对象 所以，null在 typeof之后返回的是有问题的结果，不能作为判断null的方法。如果你需要在 if 语句中判断是否为 null，直接通过===null来判断就好 同时，可以发现引用类型数据，用typeof来判断的话，除了function会被识别出来之外，其余的都输出object 如果我们想要判断一个变量是否存在，可以使用typeof：(不能使用if(a)， 若a未声明，则报错) if(typeof a != 'undefined'){ //变量存在 } 二、instanceof instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上 使用如下： object instanceof constructor object为实例对象，constructor为构造函数 构造函数通过new可以实例对象，instanceof能判断这个对象是否是之前那个构造函数生成的对象 // 定义构建函数 let Car = function() {} let benz = new Car() benz instanceof Car // true let car = new String('xxx') car instanceof String // true let str = 'xxx' str instanceof String // false 关于instanceof的实现原理，可以参考下面： function myInstanceof(left, right) { // 这里先用typeof来判断基础数据类型，如果是，直接返回false if(typeof left !== 'object' || left === null) return false; // getProtypeOf是Object对象自带的API，能够拿到参数的原型对象 let proto = Object.getPrototypeOf(left); while(true) { if(proto === null) return false; if(proto === right.prototype) return true;//找到相同原型对象，返回true proto = Object.getPrototypeof(proto); } } 也就是顺着原型链去找，直到找到相同的原型对象，返回true，否则为false 三、区别 typeof与instanceof都是判断数据类型的方法，区别如下： typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值 instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型 而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了function 类型以外，其他的也无法判断 可以看到，上述两种方法都有弊端，并不能满足所有场景的需求 如果需要通用检测数据类型，可以采用Object.prototype.toString，调用该方法，统一返回格式“[object Xxx]”的字符串 如下 Object.prototype.toString({}) // \"[object Object]\" Object.prototype.toString.call({}) // 同上结果，加上call也ok Object.prototype.toString.call(1) // \"[object Number]\" Object.prototype.toString.call('1') // \"[object String]\" Object.prototype.toString.call(true) // \"[object Boolean]\" Object.prototype.toString.call(function(){}) // \"[object Function]\" Object.prototype.toString.call(null) //\"[object Null]\" Object.prototype.toString.call(undefined) //\"[object Undefined]\" Object.prototype.toString.call(/123/g) //\"[object RegExp]\" Object.prototype.toString.call(new Date()) //\"[object Date]\" Object.prototype.toString.call([]) //\"[object Array]\" Object.prototype.toString.call(document) //\"[object HTMLDocument]\" Object.prototype.toString.call(window) //\"[object Window]\" 了解了toString的基本用法，下面就实现一个全局通用的数据类型判断方法 function getType(obj){ let type = typeof obj; if (type !== \"object\") { // 先进行typeof判断，如果是基础数据类型，直接返回 return type; } // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果 return Object.prototype.toString.call(obj).replace(/^\\[object (\\S+)\\]$/, '$1'); } 使用如下 getType([]) // \"Array\" typeof []是object，因此toString返回 getType('123') // \"string\" typeof 直接返回 getType(window) // \"Window\" toString返回 getType(null) // \"Null\"首字母大写，typeof null是object，需toString来判断 getType(undefined) // \"undefined\" typeof 直接返回 getType() // \"undefined\" typeof 直接返回 getType(function(){}) // \"function\" typeof能判断，因此首字母小写 getType(/123/g) //\"RegExp\" toString返回 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"JavaScript/visible.html":{"url":"JavaScript/visible.html","title":"元素是否在可视区域中","keywords":"","body":"面试官：如何判断一个元素是否在可视区域中？ 一、用途 可视区域即我们浏览网页的设备肉眼可见的区域，如下图 在日常开发中，我们经常需要判断目标元素是否在视窗之内或者和视窗的距离小于一个值（例如 100 px），从而实现一些常用的功能，例如： 图片的懒加载 列表的无限滚动 计算广告元素的曝光情况 可点击链接的预加载 二、实现方式 判断一个元素是否在可视区域，我们常用的有三种办法： offsetTop、scrollTop getBoundingClientRect Intersection Observer offsetTop、scrollTop offsetTop，元素的上外边框至包含元素的上内边框之间的像素距离，其他offset属性如下图所示： 下面再来了解下clientWidth、clientHeight： clientWidth：元素内容区宽度加上左右内边距宽度，即clientWidth = content + padding clientHeight：元素内容区高度加上上下内边距高度，即clientHeight = content + padding 这里可以看到client元素都不包括外边距 最后，关于scroll系列的属性如下： scrollWidth 和 scrollHeight 主要用于确定元素内容的实际大小 scrollLeft 和 scrollTop 属性既可以确定元素当前滚动的状态，也可以设置元素的滚动位置 垂直滚动 scrollTop > 0 水平滚动 scrollLeft > 0 将元素的 scrollLeft 和 scrollTop 设置为 0，可以重置元素的滚动位置 注意 上述属性都是只读的，每次访问都要重新开始 下面再看看如何实现判断： 公式如下： el.offsetTop - document.documentElement.scrollTop 代码实现： function isInViewPortOfOne (el) { // viewPortHeight 兼容所有浏览器写法 const viewPortHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight const offsetTop = el.offsetTop const scrollTop = document.documentElement.scrollTop const top = offsetTop - scrollTop return top getBoundingClientRect 返回值是一个 DOMRect对象，拥有left, top, right, bottom, x, y, width, 和 height属性 const target = document.querySelector('.target'); const clientRect = target.getBoundingClientRect(); console.log(clientRect); // { // bottom: 556.21875, // height: 393.59375, // left: 333, // right: 1017, // top: 162.625, // width: 684 // } 属性对应的关系图如下所示： 当页面发生滚动的时候，top与left属性值都会随之改变 如果一个元素在视窗之内的话，那么它一定满足下面四个条件： top 大于等于 0 left 大于等于 0 bottom 小于等于视窗高度 right 小于等于视窗宽度 实现代码如下： function isInViewPort(element) { const viewWidth = window.innerWidth || document.documentElement.clientWidth; const viewHeight = window.innerHeight || document.documentElement.clientHeight; const { top, right, bottom, left, } = element.getBoundingClientRect(); return ( top >= 0 && left >= 0 && right Intersection Observer Intersection Observer 即重叠观察者，从这个命名就可以看出它用于判断两个元素是否重叠，因为不用进行事件的监听，性能方面相比getBoundingClientRect会好很多 使用步骤主要分为两步：创建观察者和传入被观察者 创建观察者 const options = { // 表示重叠面积占被观察者的比例，从 0 - 1 取值， // 1 表示完全被包含 threshold: 1.0, root:document.querySelector('#scrollArea') // 必须是目标元素的父级元素 }; const callback = (entries, observer) => { ....} const observer = new IntersectionObserver(callback, options); 通过new IntersectionObserver创建了观察者 observer，传入的参数 callback 在重叠比例超过 threshold 时会被执行` 关于callback回调函数常用属性如下： // 上段代码中被省略的 callback const callback = function(entries, observer) { entries.forEach(entry => { entry.time; // 触发的时间 entry.rootBounds; // 根元素的位置矩形，这种情况下为视窗位置 entry.boundingClientRect; // 被观察者的位置举行 entry.intersectionRect; // 重叠区域的位置矩形 entry.intersectionRatio; // 重叠区域占被观察者面积的比例（被观察者不是矩形时也按照矩形计算） entry.target; // 被观察者 }); }; 传入被观察者 通过 observer.observe(target) 这一行代码即可简单的注册被观察者 const target = document.querySelector('.target'); observer.observe(target); 三、案例分析 实现：创建了一个十万个节点的长列表，当节点滚入到视窗中时，背景就会从红色变为黄色 Html结构如下： css样式如下： .container { display: flex; flex-wrap: wrap; } .target { margin: 5px; width: 20px; height: 20px; background: red; } 往container插入1000个元素 const $container = $(\".container\"); // 插入 100000 个 function createTargets() { const htmlString = new Array(100000) .fill('') .join(\"\"); $container.html(htmlString); } 这里，首先使用getBoundingClientRect方法进行判断元素是否在可视区域 function isInViewPort(element) { const viewWidth = window.innerWidth || document.documentElement.clientWidth; const viewHeight = window.innerHeight || document.documentElement.clientHeight; const { top, right, bottom, left } = element.getBoundingClientRect(); return top >= 0 && left >= 0 && right 然后开始监听scroll事件，判断页面上哪些元素在可视区域中，如果在可视区域中则将背景颜色设置为yellow $(window).on(\"scroll\", () => { console.log(\"scroll !\"); $targets.each((index, element) => { if (isInViewPort(element)) { $(element).css(\"background-color\", \"yellow\"); } }); }); 通过上述方式，可以看到可视区域颜色会变成黄色了，但是可以明显看到有卡顿的现象，原因在于我们绑定了scroll事件，scroll事件伴随了大量的计算，会造成资源方面的浪费 下面通过Intersection Observer的形式同样实现相同的功能 首先创建一个观察者 const observer = new IntersectionObserver(getYellow, { threshold: 1.0 }); getYellow回调函数实现对背景颜色改变，如下： function getYellow(entries, observer) { entries.forEach(entry => { $(entry.target).css(\"background-color\", \"yellow\"); }); } 最后传入观察者，即.target元素 $targets.each((index, element) => { observer.observe(element); }); 可以看到功能同样完成，并且页面不会出现卡顿的情况 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/BFC.html":{"url":"css/BFC.html","title":"对BFC的理解","keywords":"","body":"面试官：谈谈你对BFC的理解？ 一、是什么 我们在页面布局的时候，经常出现以下情况： 这个元素高度怎么没了？ 这两栏布局怎么没法自适应？ 这两个元素的间距怎么有点奇怪的样子？ ...... 原因是元素之间相互的影响，导致了意料之外的情况，这里就涉及到BFC概念 BFC（Block Formatting Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则： 内部的盒子会在垂直方向上一个接一个的放置 对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。 每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此 BFC的区域不会与float的元素区域重叠 计算BFC的高度时，浮动子元素也参与计算 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然 BFC目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素 二、触发条件 触发BFC的条件包含不限于： 根元素，即HTML元素 浮动元素：float值为left、right overflow值不为 visible，为 auto、scroll、hidden display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid position的值为absolute或fixed 三、应用场景 利用BFC的特性，我们将BFC应用在以下场景： 防止margin重叠（塌陷） p { color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align:center; margin: 100px; } Haha Hehe 页面显示如下： 两个p元素之间的距离为100px，发生了margin重叠（塌陷），以最大的为准，如果第一个P的margin为80的话，两个P之间的距离还是100，以最大的为准。 前面讲到，同一个BFC的俩个相邻的盒子的margin会发生重叠 可以在p外面包裹一层容器，并触发这个容器生成一个BFC，那么两个p就不属于同一个BFC，则不会出现margin重叠 .wrap { overflow: hidden;// 新的BFC } p { color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align:center; margin: 100px; } Haha Hehe 这时候，边距则不会重叠： 清除内部浮动 .par { border: 5px solid #fcc; width: 300px; } .child { border: 5px solid #f66; width:100px; height: 100px; float: left; } 页面显示如下： 而BFC在计算高度时，浮动元素也会参与，所以我们可以触发.par元素生活才能BFC，则内部浮动元素计算高度时候也会计算 .par { overflow: hidden; } 实现效果如下： 自适应多栏布局 这里举个两栏的布局 body { width: 300px; position: relative; } .aside { width: 100px; height: 150px; float: left; background: #f66; } .main { height: 200px; background: #fcc; } 效果图如下： 前面讲到，每个元素的左外边距与包含块的左边界相接触 因此，虽然.aslide为浮动元素，但是main的左边依然会与包含块的左边相接触 而BFC的区域不会与浮动盒子重叠 所以我们可以通过触发main生成BFC，以此适应两栏布局 .main { overflow: hidden; } 这时候，新的BFC不会与浮动的.aside元素重叠。因此会根据包含块的宽度，和.aside的宽度，自动变窄 效果如下： 小结 可以看到上面几个案例，都体现了BFC实际就是页面一个独立的容器，里面的子元素不影响外面的元素 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/animation.html":{"url":"css/animation.html","title":"css3动画","keywords":"","body":"面试官：css3动画有哪些？ 一、是什么 CSS动画（CSS Animations）是为层叠样式表建议的允许可扩展标记语言（XML）元素使用CSS的动画的模块 即指元素从一种样式逐渐过渡为另一种样式的过程 常见的动画效果有很多，如平移、旋转、缩放等等，复杂动画则是多个简单动画的组合 css实现动画的方式，有如下几种： transition 实现渐变动画 transform 转变动画 animation 实现自定义动画 二、实现方式 transition 实现渐变动画 transition的属性如下： property:填写需要变化的css属性 duration:完成过渡效果需要的时间单位(s或者ms) timing-function:完成效果的速度曲线 delay: 动画效果的延迟触发时间 其中timing-function的值有如下： 值 描述 linear 匀速（等于 cubic-bezier(0,0,1,1)） ease 从慢到快再到慢（cubic-bezier(0.25,0.1,0.25,1)） ease-in 慢慢变快（等于 cubic-bezier(0.42,0,1,1)） ease-out 慢慢变慢（等于 cubic-bezier(0,0,0.58,1)） ease-in-out 先变快再到慢（等于 cubic-bezier(0.42,0,0.58,1)），渐显渐隐效果 cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值 注意：并不是所有的属性都能使用过渡的，如display:nonedisplay:block 举个例子，实现鼠标移动上去发生变化动画效果 .base { width: 100px; height: 100px; display: inline-block; background-color: #0EA9FF; border-width: 5px; border-style: solid; border-color: #5daf34; transition-property: width, height, background-color, border-width; transition-duration: 2s; transition-timing-function: ease-in; transition-delay: 500ms; } /*简写*/ /*transition: all 2s ease-in 500ms;*/ .base:hover { width: 200px; height: 200px; background-color: #5daf34; border-width: 10px; border-color: #3a8ee6; } transform 转变动画 包含四个常用的功能： translate：位移 scale：缩放 rotate：旋转 skew：倾斜 一般配合transition过度使用 注意的是，transform不支持inline元素，使用前把它变成block 举个例子 .base { width: 100px; height: 100px; display: inline-block; background-color: #0EA9FF; border-width: 5px; border-style: solid; border-color: #5daf34; transition-property: width, height, background-color, border-width; transition-duration: 2s; transition-timing-function: ease-in; transition-delay: 500ms; } .base2 { transform: none; transition-property: transform; transition-delay: 5ms; } .base2:hover { transform: scale(0.8, 1.5) rotate(35deg) skew(5deg) translate(15px, 25px); } 可以看到盒子发生了旋转，倾斜，平移，放大 animation 实现自定义动画 animation是由 8 个属性的简写，分别如下： 属性 描述 属性值 animation-duration 指定动画完成一个周期所需要时间，单位秒（s）或毫秒（ms），默认是 0 animation-timing-function 指定动画计时函数，即动画的速度曲线，默认是 \"ease\" linear、ease、ease-in、ease-out、ease-in-out animation-delay 指定动画延迟时间，即动画何时开始，默认是 0 animation-iteration-count 指定动画播放的次数，默认是 1 animation-direction 指定动画播放的方向 默认是 normal normal、reverse、alternate、alternate-reverse animation-fill-mode 指定动画填充模式。默认是 none forwards、backwards、both animation-play-state 指定动画播放状态，正在运行或暂停。默认是 running running、pauser animation-name 指定 @keyframes 动画的名称 CSS 动画只需要定义一些关键的帧，而其余的帧，浏览器会根据计时函数插值计算出来， 通过 @keyframes 来定义关键帧 因此，如果我们想要让元素旋转一圈，只需要定义开始和结束两帧即可： @keyframes rotate{ from{ transform: rotate(0deg); } to{ transform: rotate(360deg); } } from 表示最开始的那一帧，to 表示结束时的那一帧 也可以使用百分比刻画生命周期 @keyframes rotate{ 0%{ transform: rotate(0deg); } 50%{ transform: rotate(180deg); } 100%{ transform: rotate(360deg); } } 定义好了关键帧后，下来就可以直接用它了： animation: rotate 2s; 三、总结 属性 含义 transition（过度） 用于设置元素的样式过度，和animation有着类似的效果，但细节上有很大的不同 transform（变形） 用于元素进行旋转、缩放、移动或倾斜，和设置样式的动画并没有什么关系，就相当于color一样用来设置元素的“外表” translate（移动） 只是transform的一个属性值，即移动 animation（动画） 用于设置动画属性，他是一个简写的属性，包含6个属性 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/box.html":{"url":"css/box.html","title":"对盒子模型的理解","keywords":"","body":"面试官：说说你对盒子模型的理解? 当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box） 一个盒子由四个部分组成：content、padding、border、margin content，即实际内容，显示文本和图像 boreder，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成 padding，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的background属性影响 margin，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域 上述是一个从二维的角度观察盒子，下面再看看看三维图： 下面来段代码： .box { width: 200px; height: 100px; padding: 20px; } 盒子模型 当我们在浏览器查看元素时，却发现元素的大小变成了240px 这是因为，在CSS中，盒子模型可以分成： W3C 标准盒子模型 IE 怪异盒子模型 默认情况下，盒子模型为W3C 标准盒子模型 二、标准盒子模型 标准盒子模型，是浏览器默认的盒子模型 下面看看标准盒子模型的模型图： 从上图可以看到： 盒子总宽度 = width + padding + border + margin; 盒子总高度 = height + padding + border + margin 也就是，width/height 只是内容高度，不包含 padding 和 border值 所以上面问题中，设置width为200px，但由于存在padding，但实际上盒子的宽度有240px 三、IE 怪异盒子模型 同样看看IE 怪异盒子模型的模型图： 从上图可以看到： 盒子总宽度 = width + margin; 盒子总高度 = height + margin; 也就是，width/height 包含了 padding和 border值 Box-sizing CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度 语法： box-sizing: content-box|border-box|inherit: content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致 border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致 inherit 指定 box-sizing 属性的值，应该从父元素继承 回到上面的例子里，设置盒子为 border-box 模型 .box { width: 200px; height: 100px; padding: 20px; box-sizing: border-box; } 盒子模型 这时候，就可以发现盒子的所占据的宽度为200px 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/center.html":{"url":"css/center.html","title":"元素水平垂直居中的方法","keywords":"","body":"面试官：元素水平垂直居中的方法有哪些？如果元素不定宽高呢？ 一、背景 在开发中经常遇到这个问题，即让某个元素的内容在水平和垂直方向上都居中，内容不仅限于文字，可能是图片或其他元素 居中是一个非常基础但又是非常重要的应用场景，实现居中的方法存在很多，可以将这些方法分成两个大类： 居中元素（子元素）的宽高已知 居中元素宽高未知 二、实现方式 实现元素水平垂直居中的方式： 利用定位+margin:auto 利用定位+margin:负值 利用定位+transform table布局 flex布局 grid布局 利用定位+margin:auto 先上代码： .father{ width:500px; height:300px; border:1px solid #0a3b98; position: relative; } .son{ width:100px; height:40px; background: #f0a238; position: absolute; top:0; left:0; right:0; bottom:0; margin:auto; } 父级设置为相对定位，子级绝对定位 ，并且四个定位属性的值都设置了0，那么这时候如果子级没有设置宽高，则会被拉开到和父级一样宽高 这里子元素设置了宽高，所以宽高会按照我们的设置来显示，但是实际上子级的虚拟占位已经撑满了整个父级，这时候再给它一个margin：auto它就可以上下左右都居中了 利用定位+margin:负值 绝大多数情况下，设置父元素为相对定位， 子元素移动自身50%实现水平垂直居中 .father { position: relative; width: 200px; height: 200px; background: skyblue; } .son { position: absolute; top: 50%; left: 50%; margin-left:-50px; margin-top:-50px; width: 100px; height: 100px; background: red; } 整个实现思路如下图所示： 初始位置为方块1的位置 当设置left、top为50%的时候，内部子元素为方块2的位置 设置margin为负数时，使内部子元素到方块3的位置，即中间位置 这种方案不要求父元素的高度，也就是即使父元素的高度变化了，仍然可以保持在父元素的垂直居中位置，水平方向上是一样的操作 但是该方案需要知道子元素自身的宽高，但是我们可以通过下面transform属性进行移动 利用定位+transform 实现代码如下： .father { position: relative; width: 200px; height: 200px; background: skyblue; } .son { position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); width: 100px; height: 100px; background: red; } translate(-50%, -50%)将会将元素位移自己宽度和高度的-50% 这种方法其实和最上面被否定掉的margin负值用法一样，可以说是margin负值的替代方案，并不需要知道自身元素的宽高 table布局 设置父元素为display:table-cell，子元素设置 display: inline-block。利用vertical和text-align可以让所有的行内块级元素水平垂直居中 .father { display: table-cell; width: 200px; height: 200px; background: skyblue; vertical-align: middle; text-align: center; } .son { display: inline-block; width: 100px; height: 100px; background: red; } flex弹性布局 还是看看实现的整体代码： .father { display: flex; justify-content: center; align-items: center; width: 200px; height: 200px; background: skyblue; } .son { width: 100px; height: 100px; background: red; } css3中了flex布局，可以非常简单实现垂直水平居中 这里可以简单看看flex布局的关键属性作用： display: flex时，表示该容器内部的元素将按照flex进行布局 align-items: center表示这些元素将相对于本容器水平居中 justify-content: center也是同样的道理垂直居中 grid网格布局 .father { display: grid; align-items:center; justify-content: center; width: 200px; height: 200px; background: skyblue; } .son { width: 10px; height: 10px; border: 1px solid red } 这里看到，gird网格布局和flex弹性布局都简单粗暴 小结 上述方法中，不知道元素宽高大小仍能实现水平垂直居中的方法有： 利用定位+margin:auto 利用定位+transform 利用定位+margin:负值 flex布局 grid布局 三、总结 根据元素标签的性质，可以分为： 内联元素居中布局 块级元素居中布局 内联元素居中布局 水平居中 行内元素可设置：text-align: center flex布局设置父元素：display: flex; justify-content: center 垂直居中 单行文本父元素确认高度：height === line-height 多行文本父元素确认高度：disaply: table-cell; vertical-align: middle 块级元素居中布局 水平居中 定宽: margin: 0 auto 绝对定位+left:50%+margin:负自身一半 垂直居中 position: absolute设置left、top、margin-left、margin-top(定高) display: table-cell transform: translate(x, y) flex(不定高，不定宽) grid(不定高，不定宽)，兼容性相对比较差 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/column_layout.html":{"url":"css/column_layout.html","title":"实现两栏,三栏布局","keywords":"","body":"面试官：如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？ 一、背景 在日常布局中，无论是两栏布局还是三栏布局，使用的频率都非常高 两栏布局 两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满， 比如 Ant Design 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器 这里称宽度较小的列父元素为次要布局容器，宽度较大的列父元素为主要布局容器 这种布局适用于内容上具有明显主次关系的网页 三栏布局 三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之 大家最常见的就是github： 二、双栏布局 双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在 实现思路也非常的简单： 使用 float 左浮左边栏 右边模块使用 margin-left 撑出内容块做内容展示 为父级元素添加BFC，防止下方元素飞到上方内容 代码如下： .box{ overflow: hidden; 添加BFC } .left { float: left; width: 200px; background-color: gray; height: 400px; } .right { margin-left: 210px; background-color: lightgray; height: 200px; } 左边 右边 还有一种更为简单的使用则是采取：flex弹性布局 flex弹性布局 .box{ display: flex; } .left { width: 100px; } .right { flex: 1; } 左边 右边 flex可以说是最好的方案了，代码少，使用简单 注意的是，flex容器的一个默认属性值:align-items: stretch; 这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: align-items: flex-start 三、三栏布局 实现三栏布局中间自适应的布局方式有： 两边使用 float，中间使用 margin 两边使用 absolute，中间使用 margin 两边使用 float 和负 margin display: table 实现 flex实现 grid网格布局 两边使用 float，中间使用 margin 需要将中间的内容放在html结构最后，否则右侧会臣在中间内容的下方 实现代码如下： .wrap { background: #eee; overflow: hidden; padding: 20px; height: 200px; } .left { width: 200px; height: 200px; float: left; background: coral; } .right { width: 120px; height: 200px; float: right; background: lightblue; } .middle { margin-left: 220px; height: 200px; background: lightpink; margin-right: 140px; } 左侧 右侧 中间 原理如下： 两边固定宽度，中间宽度自适应。 利用中间元素的margin值控制两边的间距 宽度小于左右部分宽度之和时，右侧部分会被挤下去 这种实现方式存在缺陷： 主体内容是最后加载的。 右边在主体内容之前，如果是响应式设计，不能简单的换行展示 两边使用 absolute，中间使用 margin 基于绝对定位的三栏布局：注意绝对定位的元素脱离文档流，相对于最近的已经定位的祖先元素进行定位。无需考虑HTML中结构的顺序 .container { position: relative; } .left, .right, .main { height: 200px; line-height: 200px; text-align: center; } .left { position: absolute; top: 0; left: 0; width: 100px; background: green; } .right { position: absolute; top: 0; right: 0; width: 100px; background: green; } .main { margin: 0 110px; background: black; color: white; } 左边固定宽度 右边固定宽度 中间自适应 实现流程： 左右两边使用绝对定位，固定在两侧。 中间占满一行，但通过 margin和左右两边留出10px的间隔 两边使用 float 和负 margin .left, .right, .main { height: 200px; line-height: 200px; text-align: center; } .main-wrapper { float: left; width: 100%; } .main { margin: 0 110px; background: black; color: white; } .left, .right { float: left; width: 100px; margin-left: -100%; background: green; } .right { margin-left: -100px; /* 同自身宽度 */ } 中间自适应 左边固定宽度 右边固定宽度 实现过程： 中间使用了双层标签，外层是浮动的，以便左中右能在同一行展示 左边通过使用负 margin-left:-100%，相当于中间的宽度，所以向上偏移到左侧 右边通过使用负 margin-left:-100px，相当于自身宽度，所以向上偏移到最右侧 缺点： 增加了 .main-wrapper 一层，结构变复杂 使用负 margin，调试也相对麻烦 使用 display: table 实现 标签用于展示行列数据，不适合用于布局。但是可以使用 display: table 来实现布局的效果 .container { height: 200px; line-height: 200px; text-align: center; display: table; table-layout: fixed; width: 100%; } .left, .right, .main { display: table-cell; } .left, .right { width: 100px; background: green; } .main { background: black; color: white; width: 100%; } 左边固定宽度 中间自适应 右边固定宽度 实现原理： 层通过 display: table设置为表格，设置 table-layout: fixed`表示列宽自身宽度决定，而不是自动计算。 内层的左中右通过 display: table-cell设置为表格单元。 左右设置固定宽度，中间设置 width: 100% 填充剩下的宽度 使用flex实现 利用flex弹性布局，可以简单实现中间自适应 代码如下： .wrap { display: flex; justify-content: space-between; } .left, .right, .middle { height: 100px; } .left { width: 200px; background: coral; } .right { width: 120px; background: lightblue; } .middle { background: #555; width: 100%; margin: 0 20px; } 左侧 中间 右侧 实现过程： 仅需将容器设置为display:flex;， 盒内元素两端对其，将中间元素设置为100%宽度，或者设为flex:1，即可填充空白 盒内元素的高度撑开容器的高度 优点： 结构简单直观 可以结合 flex的其他功能实现更多效果，例如使用 order属性调整显示顺序，让主体内容优先加载，但展示在中间 grid网格布局 代码如下： .wrap { display: grid; width: 100%; grid-template-columns: 300px auto 300px; } .left, .right, .middle { height: 100px; } .left { background: coral; } .right { width: 300px; background: lightblue; } .middle { background: #555; } 左侧 中间 右侧 跟flex弹性布局一样的简单 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/css3_features.html":{"url":"css/css3_features.html","title":"CSS3新增特性","keywords":"","body":"面试官：CSS3新增了哪些新特性？ 一、是什么 css，即层叠样式表（Cascading Style Sheets）的简称，是一种标记语言，由浏览器解释执行用来使页面变得更美观 css3是css的最新标准，是向后兼容的，CSS1/2的特性在CSS3 里都是可以使用的 而CSS3 也增加了很多新特性，为开发带来了更佳的开发体验 二、选择器 css3中新增了一些选择器，主要为如下图所示： 三、新样式 边框 css3新增了三个边框属性，分别是： border-radius：创建圆角边框 box-shadow：为元素添加阴影 border-image：使用图片来绘制边框 box-shadow 设置元素阴影，设置属性如下： 水平阴影 垂直阴影 模糊距离(虚实) 阴影尺寸(影子大小) 阴影颜色 内/外阴影 其中水平阴影和垂直阴影是必须设置的 背景 新增了几个关于背景的属性，分别是background-clip、background-origin、background-size和background-break background-clip 用于确定背景画区，有以下几种可能的属性： background-clip: border-box; 背景从border开始显示 background-clip: padding-box; 背景从padding开始显示 background-clip: content-box; 背景显content区域开始显示 background-clip: no-clip; 默认属性，等同于border-box 通常情况，背景都是覆盖整个元素的，利用这个属性可以设定背景颜色或图片的覆盖范围 background-origin 当我们设置背景图片时，图片是会以左上角对齐，但是是以border的左上角对齐还是以padding的左上角或者content的左上角对齐? border-origin正是用来设置这个的 background-origin: border-box; 从border开始计算background-position background-origin: padding-box; 从padding开始计算background-position background-origin: content-box; 从content开始计算background-position 默认情况是padding-box，即以padding的左上角为原点 background-size background-size属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性： background-size: contain; 缩小图片以适合元素（维持像素长宽比） background-size: cover; 扩展元素以填补元素（维持像素长宽比） background-size: 100px 100px; 缩小图片至指定的大小 background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包 含元素的尺寸 background-break 元素可以被分成几个独立的盒子（如使内联元素span跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示 background-break: continuous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样） background-break: bounding-box; 把盒之间的距离计算在内； background-break: each-box; 为每个盒子单独重绘背景 文字 word-wrap 语法：word-wrap: normal|break-word normal：使用浏览器默认的换行 break-all：允许在单词内换行 text-overflow text-overflow设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择： clip：修剪文本 ellipsis：显示省略符号来代表被修剪的文本 text-shadow text-shadow可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色 text-decoration CSS3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置： text-fill-color: 设置文字内部填充颜色 text-stroke-color: 设置文字边界填充颜色 text-stroke-width: 设置文字边界宽度 颜色 css3新增了新的颜色表示方式rgba与hsla rgba分为两部分，rgb为颜色值，a为透明度 hala分为四部分，h为色相，s为饱和度，l为亮度，a为透明度 四、transition 过渡 transition属性可以被指定为一个或多个CSS属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容： 过度效果 持续时间 语法如下： transition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0) 上面为简写模式，也可以分开写各个属性 transition-property: width; transition-duration: 1s; transition-timing-function: linear; transition-delay: 2s; 五、transform 转换 transform属性允许你旋转，缩放，倾斜或平移给定元素 transform-origin：转换元素的位置（围绕那个点进行转换），默认值为(x,y,z):(50%,50%,0) 使用方式： transform: translate(120px, 50%)：位移 transform: scale(2, 0.5)：缩放 transform: rotate(0.5turn)：旋转 transform: skew(30deg, 20deg)：倾斜 六、animation 动画 动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬 animation也有很多的属性 animation-name：动画名称 animation-duration：动画持续时间 animation-timing-function：动画时间函数 animation-delay：动画延迟时间 animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为infinite，意思是无限循环 animation-direction：动画执行方向 animation-paly-state：动画播放状态 animation-fill-mode：动画填充模式 七、渐变 颜色渐变是指在两个颜色之间平稳的过渡，css3渐变包括 linear-gradient：线性渐变 background-image: linear-gradient(direction, color-stop1, color-stop2, ...); radial-gradient：径向渐变 linear-gradient(0deg, red, green); 八、其他 关于css3其他的新特性还包括flex弹性布局、Grid栅格布局，这两个布局在以前就已经讲过，这里就不再展示 除此之外，还包括多列布局、媒体查询、混合模式等等...... 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/css_performance.html":{"url":"css/css_performance.html","title":"CSS提高性能的方法","keywords":"","body":"面试官：如果要做优化，CSS提高性能的方法有哪些？ 一、前言 每一个网页都离不开css，但是很多人又认为，css主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的 作为页面渲染和内容展现的重要环节，css影响着用户对整个网站的第一体验 因此，在整个产品研发过程中，css性能优化同样需要贯穿全程 二、实现方式 实现方式有很多种，主要有如下： 内联首屏关键CSS 异步加载CSS 资源压缩 合理使用选择器 减少使用昂贵的属性 不要使用@import 内联首屏关键CSS 在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联css关键代码能够使浏览器在下载完html后就能立刻渲染 而如果外部引用css代码，在解析html结构过程中遇到外部css文件，才会开始下载css代码，再渲染 所以，CSS内联使用使渲染时间提前 注意：但是较大的css代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式 异步加载CSS 在CSS文件请求、下载、解析完成之前，CSS会阻塞渲染，浏览器将不会渲染任何已处理的内容 前面加载内联代码后，后面的外部引用css则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下： 使用javascript将link标签插到head标签最后 // 创建link标签 const myCSS = document.createElement( \"link\" ); myCSS.rel = \"stylesheet\"; myCSS.href = \"mystyles.css\"; // 插入到header的最后位置 document.head.insertBefore( myCSS, document.head.childNodes[ document.head.childNodes.length - 1 ].nextSibling ); 设置link标签media属性为noexis，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将media的值设为screen或all，从而让浏览器开始解析CSS 通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel设回stylesheet 资源压缩 利用webpack、gulp/grunt、rollup等模块化工具，将css代码进行压缩，使文件变小，大大降低了浏览器的加载时间 合理使用选择器 css匹配的规则是从右往左开始匹配，例如#markdown .content h3匹配规则如下： 先找到h3标签元素 然后去除祖先不是.content的元素 最后去除祖先不是#markdown的元素 如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高 所以我们在编写选择器的时候，可以遵循以下规则： 不要嵌套使用过多复杂选择器，最好不要三层以上 使用id选择器就没必要再进行嵌套 通配符和属性选择器效率最低，避免使用 减少使用昂贵的属性 在页面发生重绘的时候，昂贵属性如box-shadow/border-radius/filter/透明度/:nth-child等，会降低浏览器的渲染性能 不要使用@import css样式文件有两种引入方式，一种是link元素，另一种是@import @import会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时 而且多个@import可能会导致下载顺序紊乱 比如一个css文件index.css包含了以下内容：@import url(\"reset.css\") 那么浏览器就必须先把index.css下载、解析和执行后，才下载、解析和执行第二个文件reset.css 其他 减少重排操作，以及减少不必要的重绘 了解哪些属性可以继承而来，避免对这些属性重复编写 cssSprite，合成所有icon图片，用宽高加上backgroud-position的背景图方式显现出我们要的icon图，减少了http请求 把小的icon图片转成base64编码 CSS3动画或者过渡尽量使用transform和opacity来实现动画，不要使用left和top属性 三、总结 css实现性能的方式可以从选择器嵌套、属性特性、减少http这三面考虑，同时还要注意css代码的加载顺序 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/dp_px_dpr_ppi.html":{"url":"css/dp_px_dpr_ppi.html","title":"设备像素、css像素、设备独立像素、dpr、ppi 之间的区别","keywords":"","body":"面试官：说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？ 一、背景 在css中我们通常使用px作为单位，在PC浏览器中css的1个像素都是对应着电脑屏幕的1个物理像素 这会造成一种错觉，我们会认为css中的像素就是设备的物理像素 但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的 当我们做移动端开发时，同为1px的设置，在不同分辨率的移动设备上显示效果却有很大差异 这背后就涉及了css像素、设备像素、设备独立像素、dpr、ppi的概念 二、介绍 CSS像素 CSS像素（css pixel, px）: 适用于web编程，在 CSS 中以 px 为后缀，是一个长度单位 在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位 px是一个相对单位，相对的是设备像素（device pixel） 一般情况，页面缩放比为1，1个CSS像素等于1个设备独立像素 CSS像素又具有两个方面的相对性： 在同一个设备上，每1个 CSS 像素所代表的设备像素是可以变化的（比如调整屏幕的分辨率） 在不同的设备之间，每1个 CSS 像素所代表的设备像素是可以变化的（比如两个不同型号的手机） 在页面进行缩放操作也会 引起css中px的变化，假设页面放大一倍，原来的 1px 的东西变成 2px，在实际宽度不变的情况下1px 变得跟原来的 2px 的长度（长宽）一样了（元素会占据更多的设备像素） 假设原来需要 320px 才能填满的宽度现在只需要 160px px会受到下面的因素的影响而变化： 每英寸像素（PPI） 设备像素比（DPR） 设备像素 设备像素（device pixels），又称为物理像素 指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个“点”而已 可以参考公园里的景观变色彩灯，一个彩灯(物理像素)由红、蓝、绿小灯组成，三盏小灯不同的亮度混合出各种色彩 从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为pt 设备独立像素 设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了CSS像素 在javaScript中可以通过window.screen.width/ window.screen.height 查看 比如我们会说“电脑屏幕在 2560x1600分辨率下不适合玩游戏，我们把它调为 1440x900”，这里的“分辨率”（非严谨说法）指的就是设备独立像素 一个设备独立像素里可能包含1个或者多个物理像素点，包含的越多则屏幕看起来越清晰 至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子： iPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960 这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素 如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位 我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素 至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是下面介绍的dpr dpr dpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系，在JavaScript中可以通过 window.devicePixelRatio 获取 计算公式如下： 当设备像素比为1:1时，使用1（1×1）个设备像素显示1个CSS像素 当设备像素比为2:1时，使用4（2×2）个设备像素显示1个CSS像素 当设备像素比为3:1时，使用9（3×3）个设备像素显示1个CSS像素 如下图所示： 当dpr为3，那么1px的CSS像素宽度对应3px的物理像素的宽度，1px的CSS像素高度对应3px的物理像素高度 ppi ppi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像 计算公式如下： 三、总结 无缩放情况下，1个CSS像素等于1个设备独立像素 设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变 PC端中，1个设备独立像素 = 1个设备像素 （在100%，未缩放的情况下） 在移动端中，标准屏幕（160ppi）下 1个设备独立像素 = 1个设备像素 设备像素比（dpr） = 设备像素 / 设备独立像素 每英寸像素（ppi），值越大，图像越清晰 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/em_px_rem_vh_vw.html":{"url":"css/em_px_rem_vh_vw.html","title":"em/px/rem/vh/vw区别","keywords":"","body":"面试官：说说em/px/rem/vh/vw区别? 一、介绍 传统的项目开发中，我们只会用到px、%、em这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性 从CSS3开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了rem、vh、vw、vm等一些新的计量单位 利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等 二、单位 在css单位中，可以分为长度单位、绝对单位，如下表所指示 CSS单位 相对长度单位 em、ex、ch、rem、vw、vh、vmin、vmax、% 绝对长度单位 cm、mm、in、px、pt、pc 这里我们主要讲述px、em、rem、vh、vw px px，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中 有些人会把px认为是相对长度，原因在于在移动端中存在设备像素比，px实际显示的大小是不确定的 这里之所以认为px为绝对单位，在于px的大小和元素的其他属性无关 em em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（1em = 16px） 为了简化 font-size 的换算，我们需要在css中的 body 选择器中声明font-size= 62.5%，这就使 em 值变为 16px*62.5% = 10px 这样 12px = 1.2em, 10px = 1em, 也就是说只需要将你的原来的px 数值除以 10，然后换上 em作为单位就行了 特点： em 的值并不是固定的 em 会继承父级元素的字体大小 em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸 任意浏览器的默认字体高都是 16px 举个例子 我是14px=1.4rem我是12px=1.2rem 样式为 html {font-size: 10px; } /* 公式16px*62.5%=10px */ .big{font-size: 1.4rem} .small{font-size: 1.2rem} 这时候.big元素的font-size为14px，而.small元素的font-size为12px rem rem，相对单位，相对的只是HTML根元素font-size的值 同理，如果想要简化font-size的转化，我们可以在根元素html中加入font-size: 62.5% html {font-size: 62.5%; } /* 公式16px*62.5%=10px */ 这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助 特点： rem单位可谓集相对大小和绝对大小的优点于一身 和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸 vh、vw vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，vh则为窗口的高度 这里的窗口分成几种情况： 在桌面端，指的是浏览器的可视区域 移动端指的就是布局视口 像vw、vh，比较容易混淆的一个单位是%，不过百分比宽泛的讲是相对于父元素： 对于普通定位元素就是我们理解的父元素 对于position: absolute;的元素是相对于已定位的父元素 对于position: fixed;的元素是相对于 ViewPort（可视窗口） 三、总结 px：绝对单位，页面按精确像素展示 em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算，整个页面内1em不是一个固定的值 rem：相对单位，可理解为root em, 相对根节点html的字体大小来计算 vh、vw：主要用于页面视口大小布局，在页面布局上更加方便简单 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/flexbox.html":{"url":"css/flexbox.html","title":"弹性盒布局模型","keywords":"","body":"面试官：说说flexbox（弹性盒布局模型）,以及适用场景？ 一、是什么 Flexible Box 简称 flex，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局 采用Flex布局的元素，称为flex容器container 它的所有子元素自动成为容器成员，称为flex项目item 容器中默认存在两条轴，主轴和交叉轴，呈90度关系。项目默认沿主轴排列，通过flex-direction来决定主轴的方向 每根轴都有起点和终点，这对于元素的对齐非常重要 二、属性 关于flex常用的属性，我们可以划分为容器属性和容器成员属性 容器属性有： flex-direction flex-wrap flex-flow justify-content align-items align-content flex-direction 决定主轴的方向(即项目的排列方向) .container { flex-direction: row | row-reverse | column | column-reverse; } 属性对应如下： row（默认值）：主轴为水平方向，起点在左端 row-reverse：主轴为水平方向，起点在右端 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿 如下图所示： flex-wrap 弹性元素永远沿主轴排列，那么如果主轴排不下，通过flex-wrap决定容器内项目是否可换行 .container { flex-wrap: nowrap | wrap | wrap-reverse; } 属性对应如下： nowrap（默认值）：不换行 wrap：换行，第一行在上方 wrap-reverse：换行，第一行在下方 默认情况是不换行，但这里也不会任由元素直接溢出容器，会涉及到元素的弹性伸缩 flex-flow 是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap .box { flex-flow: || ; } justify-content 定义了项目在主轴上的对齐方式 .box { justify-content: flex-start | flex-end | center | space-between | space-around; } 属性对应如下： flex-start（默认值）：左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目之间的间隔都相等 space-around：两个项目两侧间隔相等 效果图如下： align-items 定义项目在交叉轴上如何对齐 .box { align-items: flex-start | flex-end | center | baseline | stretch; } 属性对应如下： flex-start：交叉轴的起点对齐 flex-end：交叉轴的终点对齐 center：交叉轴的中点对齐 baseline: 项目的第一行文字的基线对齐 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度 align-content 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用 .box { align-content: flex-start | flex-end | center | space-between | space-around | stretch; } 属性对应如吓： flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴的中点对齐 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍 stretch（默认值）：轴线占满整个交叉轴 效果图如下： 容器成员属性如下： order flex-grow flex-shrink flex-basis flex align-self order 定义项目的排列顺序。数值越小，排列越靠前，默认为0 .item { order: ; } flex-grow 上面讲到当容器设为flex-wrap: nowrap;不换行的时候，容器宽度有不够分的情况，弹性元素会根据flex-grow来决定 定义项目的放大比例（容器宽度>元素总宽度时如何伸展） 默认为0，即如果存在剩余空间，也不放大 .item { flex-grow: ; } 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话） 如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍 弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论flex-grow是什么值都不会生效 flex-shrink 定义了项目的缩小比例（容器宽度 .item { flex-shrink: ; /* default 1 */ } 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小 如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小 在容器宽度有剩余时，flex-shrink也是不会生效的 flex-basis 设置的是元素在主轴上的初始尺寸，所谓的初始尺寸就是元素在flex-grow和flex-shrink生效前的尺寸 浏览器根据这个属性，计算主轴是否有多余空间，默认值为auto，即项目的本来大小，如设置了width则元素尺寸由width/height决定（主轴方向），没有设置则由内容决定 .item { flex-basis: | auto; /* default auto */ } 当设置为0的是，会根据内容撑开 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间 flex flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，也是比较难懂的一个复合属性 .item { flex: none | [ ? || ] } 一些属性有： flex: 1 = flex: 1 1 0% flex: 2 = flex: 2 1 0% flex: auto = flex: 1 1 auto flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩 flex:1 和 flex:auto 的区别，可以归结于flex-basis:0和flex-basis:auto的区别 当设置为0时（绝对弹性元素），此时相当于告诉flex-grow和flex-shrink在伸缩的时候不需要考虑我的尺寸 当设置为auto时（相对弹性元素），此时则需要在伸缩时将元素尺寸纳入考虑 注意：建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值 align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性 默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch .item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } 效果图如下： 三、应用场景 在以前的文章中，我们能够通过flex简单粗暴的实现元素水平垂直方向的居中，以及在两栏三栏自适应布局中通过flex完成，这里就不再展开代码的演示 包括现在在移动端、小程序这边的开发，都建议使用flex进行布局 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/grid.html":{"url":"css/grid.html","title":"grid网格布局","keywords":"","body":"面试官：介绍一下grid网格布局 一、是什么 Grid 布局即网格布局，是一个二维的布局方式，由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列 擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系 这与之前讲到的flex一维布局不相同 设置display:grid/inline-grid的元素就是网格布局容器，这样就能出发浏览器渲染引擎的网格布局算法 上述代码实例中，.container元素就是网格布局容器，.item元素就是网格的项目，由于网格元素只能是容器的顶层子元素，所以p元素并不是网格元素 这里提一下，网格线概念，有助于下面对grid-column系列属性的理解 网格线，即划分网格的线，如下图所示： 上图是一个 2 x 3 的网格，共有3根水平网格线和4根垂直网格线 二、属性 同样，Grid 布局属性可以分为两大类： 容器属性， 项目属性 关于容器属性有如下： display 属性 文章开头讲到，在元素上设置display：grid 或 display：inline-grid 来创建一个网格容器 display：grid 则该容器是一个块级元素 display: inline-grid 则容器元素为行内元素 grid-template-columns 属性，grid-template-rows 属性 grid-template-columns 属性设置列宽，grid-template-rows 属性设置行高 .wrapper { display: grid; /* 声明了三列，宽度分别为 200px 200px 200px */ grid-template-columns: 200px 200px 200px; grid-gap: 5px; /* 声明了两行，行高分别为 50px 50px */ grid-template-rows: 50px 50px; } 以上表示固定列宽为 200px 200px 200px，行高为 50px 50px 上述代码可以看到重复写单元格宽高，通过使用repeat()函数，可以简写重复的值 第一个参数是重复的次数 第二个参数是重复的值 所以上述代码可以简写成 .wrapper { display: grid; grid-template-columns: repeat(3,200px); grid-gap: 5px; grid-template-rows:repeat(2,50px); } 除了上述的repeact关键字，还有： auto-fill：示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格 grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素 fr：片段，为了方便表示比例关系 grid-template-columns: 200px 1fr 2fr 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3 minmax：产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。第一个参数就是最小值，第二个参数就是最大值 minmax(100px, 1fr)表示列宽不小于100px，不大于1fr auto：由浏览器自己决定长度 grid-template-columns: 100px auto 100px 表示第一第三列为 100px，中间由浏览器决定长度 grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性 grid-row-gap 属性、grid-column-gap 属性分别设置行间距和列间距。grid-gap 属性是两者的简写形式 grid-row-gap: 10px 表示行间距是 10px grid-column-gap: 20px 表示列间距是 20px grid-gap: 10px 20px 等同上述两个属性 grid-template-areas 属性 用于定义区域，一个区域由一个或者多个单元格组成 .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-template-areas: 'a b c' 'd e f' 'g h i'; } 上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。 多个单元格合并成一个区域的写法如下 grid-template-areas: 'a a a' 'b b b' 'c c c'; 上面代码将9个单元格分成a、b、c三个区域 如果某些区域不需要利用，则使用\"点\"（.）表示 grid-auto-flow 属性 划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。 顺序就是由grid-auto-flow决定，默认为行，代表\"先行后列\"，即先填满第一行，再开始放入第二行 当修改成column后，放置变为如下： justify-items 属性， align-items 属性， place-items 属性 justify-items 属性设置单元格内容的水平位置（左中右），align-items 属性设置单元格的垂直位置（上中下） 两者属性的值完成相同 .container { justify-items: start | end | center | stretch; align-items: start | end | center | stretch; } 属性对应如下： start：对齐单元格的起始边缘 end：对齐单元格的结束边缘 center：单元格内部居中 stretch：拉伸，占满单元格的整个宽度（默认值） place-items属性是align-items属性和justify-items属性的合并简写形式 justify-content 属性， align-content 属性， place-content 属性 justify-content属性是整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下） .container { justify-content: start | end | center | stretch | space-around | space-between | space-evenly; align-content: start | end | center | stretch | space-around | space-between | space-evenly; } 两个属性的写法完全相同，都可以取下面这些值： start - 对齐容器的起始边框 end - 对齐容器的结束边框 center - 容器内部居中 space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍 space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔 space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔 stretch - 项目大小没有指定时，拉伸占据整个网格容器 grid-auto-columns 属性和 grid-auto-rows 属性 有时候，一些项目的指定位置，在现有网格的外部，就会产生显示网格和隐式网格 比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。超出的部分就是隐式网格 而grid-auto-rows与grid-auto-columns就是专门用于指定隐式网格的宽高 关于项目属性，有如下： grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性 指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置 grid-column-start 属性：左边框所在的垂直网格线 grid-column-end 属性：右边框所在的垂直网格线 grid-row-start 属性：上边框所在的水平网格线 grid-row-end 属性：下边框所在的水平网格线 举个例子： #container{ display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; } .item-1 { grid-column-start: 2; grid-column-end: 4; } 1 2 3 通过设置grid-column属性，指定1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线 grid-area 属性 grid-area 属性指定项目放在哪一个区域 .item-1 { grid-area: e; } 意思为将1号项目位于e区域 与上述讲到的grid-template-areas搭配使用 justify-self 属性、align-self 属性以及 place-self 属性 justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。 align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目 .item { justify-self: start | end | center | stretch; align-self: start | end | center | stretch; } 这两个属性都可以取下面四个值。 start：对齐单元格的起始边缘。 end：对齐单元格的结束边缘。 center：单元格内部居中。 stretch：拉伸，占满单元格的整个宽度（默认值） 三、应用场景 文章开头就讲到，Grid是一个强大的布局，如一些常见的 CSS 布局，如居中，两列布局，三列布局等等是很容易实现的，在以前的文章中，也有使用Grid布局完成对应的功能 关于兼容性问题，结果如下： 总体兼容性还不错，但在 IE 10 以下不支持 目前，Grid布局在手机端支持还不算太友好 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/hide_attributes.html":{"url":"css/hide_attributes.html","title":"css隐藏页面元素方式,区别","keywords":"","body":"面试官：css中，有哪些方式可以隐藏页面元素？区别? 一、前言 在平常的样式排版中，我们经常遇到将某个模块隐藏的场景 通过css隐藏元素的方法有很多种，它们看起来实现的效果是一致的 但实际上每一种方法都有一丝轻微的不同，这些不同决定了在一些特定场合下使用哪一种方法 二、实现方式 通过css实现隐藏元素方法有如下： display:none visibility:hidden opacity:0 设置height、width模型属性为0 position:absolute clip-path display:none 设置元素的display为none是最常用的隐藏元素的方法 .hide { display:none; } 将元素设置为display:none后，元素在页面上将彻底消失 元素本身占有的空间就会被其他元素占有，也就是说它会导致浏览器的重排和重绘 消失后，自身绑定的事件不会触发，也不会有过渡效果 特点：元素不可见，不占据空间，无法响应点击事件 visibility:hidden 设置元素的visibility为hidden也是一种常用的隐藏元素的方法 从页面上仅仅是隐藏该元素，DOM结果均会存在，只是当时在一个不可见的状态，不会触发重排，但是会触发重绘 .hidden{ visibility:hidden } 给人的效果是隐藏了，所以他自身的事件不会触发 特点：元素不可见，占据页面空间，无法响应点击事件 opacity:0 opacity属性表示元素的透明度，将元素的透明度设置为0后，在我们用户眼中，元素也是隐藏的 不会引发重排，一般情况下也会引发重绘 如果利用 animation 动画，对 opacity 做变化（animation会默认触发GPU加速），则只会触发 GPU 层面的 composite，不会触发重绘 .transparent { opacity:0; } 由于其仍然是存在于页面上的，所以他自身的的事件仍然是可以触发的，但被他遮挡的元素是不能触发其事件的 需要注意的是：其子元素不能设置opacity来达到显示的效果 特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件 设置height、width属性为0 将元素的margin，border，padding，height和width等影响元素盒模型的属性设置成0，如果元素内有子元素或内容，还应该设置其overflow:hidden来隐藏其子元素 .hiddenBox { margin:0; border:0; padding:0; height:0; width:0; overflow:hidden; } 特点：元素不可见，不占据页面空间，无法响应点击事件 position:absolute 将元素移出可视区域 .hide { position: absolute; top: -9999px; left: -9999px; } 特点：元素不可见，不影响页面布局 clip-path 通过裁剪的形式 .hide { clip-path: polygon(0px 0px,0px 0px,0px 0px,0px 0px); } 特点：元素不可见，占据页面空间，无法响应点击事件 小结 最常用的还是display:none和visibility:hidden，其他的方式只能认为是奇招，它们的真正用途并不是用于隐藏元素，所以并不推荐使用它们 三、区别 关于display: none、visibility: hidden、opacity: 0的区别，如下表所示： display: none visibility: hidden opacity: 0 页面中 不存在 存在 存在 重排 会 不会 不会 重绘 会 会 不一定 自身绑定事件 不触发 不触发 可触发 transition 不支持 支持 支持 子元素可复原 不能 能 不能 被遮挡的元素可触发事件 能 能 不能 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/layout_painting.html":{"url":"css/layout_painting.html","title":"回流跟重绘","keywords":"","body":"面试官：怎么理解回流跟重绘？什么场景下会触发？ 一、是什么 在HTML中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘： 回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置 重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制 具体的浏览器解析渲染机制如下所示： 解析HTML，生成DOM树，解析CSS，生成CSSOM树 将DOM树和CSSOM树结合，生成渲染树(Render Tree) Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小） Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素 Display:将像素发送给GPU，展示在页面上 在页面初始渲染阶段，回流不可避免的触发，可以理解成页面一开始是空白的元素，后面添加了新的元素使页面布局发生改变 当我们对 DOM 的修改引发了 DOM几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来 当我们对 DOM的修改导致了样式的变化（color或background-color），却并未影响其几何属性时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这里就仅仅触发了回流 二、如何触发 要想减少回流和重绘的次数，首先要了解回流和重绘是如何触发的 回流触发时机 回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流，如下面情况： 添加或删除可见的DOM元素 元素的位置发生变化 元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等） 内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代 页面一开始渲染的时候（这避免不了） 浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的） 还有一些容易被忽略的操作：获取一些特定属性的值 offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight 这些属性有一个共性，就是需要通过即时计算得到。因此浏览器为了获取这些值，也会进行回流 除此还包括getComputedStyle方法，原理是一样的 重绘触发时机 触发回流一定会触发重绘 可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边移到了右边，那我们要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘） 除此之外还有一些其他引起重绘行为： 颜色的修改 文本方向的修改 阴影的修改 浏览器优化机制 由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列 当你获取布局信息的操作的时候，会强制队列刷新，包括前面讲到的offsetTop等方法都会返回最新的数据 因此浏览器不得不清空队列，触发回流重绘来返回正确的值 三、如何减少 我们了解了如何触发回流和重绘的场景，下面给出避免回流的经验： 如果想设定元素的样式，通过改变元素的 class 类名 (尽可能在 DOM 树的最里层) 避免设置多项内联样式 应用元素的动画，使用 position 属性的 fixed 值或 absolute 值(如前文示例所提) 避免使用 table 布局，table 中每个元素的大小以及内容的改动，都会导致整个 table 的重新计算 对于那些复杂的动画，对其设置 position: fixed/absolute，尽可能地使元素脱离文档流，从而减少对其他元素的影响 使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 避免使用 CSS 的 JavaScript 表达式 在使用 JavaScript 动态插入多个节点时, 可以使用DocumentFragment. 创建后一次插入. 就能避免多次的渲染性能 但有时候，我们会无可避免地进行回流或者重绘，我们可以更好使用它们 例如，多次修改一个把元素布局的时候，我们很可能会如下操作 const el = document.getElementById('el') for(let i=0;i 每次循环都需要获取多次offset属性，比较糟糕，可以使用变量的形式缓存起来，待计算完毕再提交给浏览器发出重计算请求 // 缓存offsetLeft与offsetTop的值 const el = document.getElementById('el') let offLeft = el.offsetLeft, offTop = el.offsetTop // 在JS层面进行计算 for(let i=0;i 我们还可避免改变样式，使用类名去合并样式 const container = document.getElementById('container') container.style.width = '100px' container.style.height = '200px' container.style.border = '10px solid red' container.style.color = 'red' 使用类名去合并样式 .basic_style { width: 100px; height: 200px; border: 10px solid red; color: red; } const container = document.getElementById('container') container.classList.add('basic_style') 前者每次单独操作，都去触发一次渲染树更改（新浏览器不会）， 都去触发一次渲染树更改，从而导致相应的回流与重绘过程 合并之后，等于我们将所有的更改一次性发出 我们还可以通过通过设置元素属性display: none，将其从页面上去掉，然后再进行后续操作，这些后续操作也不会触发回流与重绘，这个过程称为离线操作 const container = document.getElementById('container') container.style.width = '100px' container.style.height = '200px' container.style.border = '10px solid red' container.style.color = 'red' 离线操作后 let container = document.getElementById('container') container.style.display = 'none' container.style.width = '100px' container.style.height = '200px' container.style.border = '10px solid red' container.style.color = 'red' ...（省略了许多类似的后续操作） container.style.display = 'block' 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/less_12px.html":{"url":"css/less_12px.html","title":"让Chrome支持小于12px 的文字方式","keywords":"","body":"面试官：让Chrome支持小于12px 的文字方式有哪些？区别？ 一、背景 Chrome 中文版浏览器会默认设定页面的最小字号是12px，英文版没有限制 原由 Chrome 团队认为汉字小于12px就会增加识别难度 中文版浏览器 与网页语言无关，取决于用户在Chrome的设置里（chrome://settings/languages）把哪种语言设置为默认显示语言 系统级最小字号 浏览器默认设定页面的最小字号，用户可以前往 chrome://settings/fonts 根据需求更改 而我们在实际项目中，不能奢求用户更改浏览器设置 对于文本需要以更小的字号来显示，就需要用到一些小技巧 二、解决方案 常见的解决方案有： zoom -webkit-transform:scale() -webkit-text-size-adjust:none Zoom zoom 的字面意思是“变焦”，可以改变页面上元素的尺寸，属于真实尺寸 其支持的值类型有： zoom:50%，表示缩小到原来的一半 zoom:0.5，表示缩小到原来的一半 使用 zoom 来”支持“ 12px 以下的字体 代码如下： .span1{ font-size: 12px; display: inline-block; zoom: 0.8; } .span2{ display: inline-block; font-size: 12px; } 测试10px 测试12px 效果如下： 需要注意的是，Zoom 并不是标准属性，需要考虑其兼容性 -webkit-transform:scale() 针对chrome浏览器,加webkit前缀，用transform:scale()这个属性进行放缩 注意的是，使用scale属性只对可以定义宽高的元素生效，所以，下面代码中将span元素转为行内块元素 实现代码如下： .span1{ font-size: 12px; display: inline-block; -webkit-transform:scale(0.8); } .span2{ display: inline-block; font-size: 12px; } 测试10px 测试12px 效果如下： -webkit-text-size-adjust:none 该属性用来设定文字大小是否根据设备(浏览器)来自动调整显示大小 属性值： percentage：字体显示的大小； auto：默认，字体大小会根据设备/浏览器来自动调整； none:字体大小不会自动调整 html { -webkit-text-size-adjust: none; } 这样设置之后会有一个问题，就是当你放大网页时，一般情况下字体也会随着变大，而设置了以上代码后，字体只会显示你当前设置的字体大小，不会随着网页放大而变大了 所以，我们不建议全局应用该属性，而是单独对某一属性使用 需要注意的是，自从chrome 27之后，就取消了对这个属性的支持。同时，该属性只对英文、数字生效，对中文不生效 三、总结 Zoom 非标属性，有兼容问题，缩放会改变了元素占据的空间大小，触发重排 -webkit-transform:scale() 大部分现代浏览器支持，并且对英文、数字、中文也能够生效，缩放不会改变了元素占据的空间大小，页面布局不会发生变化 -webkit-text-size-adjust对谷歌浏览器有版本要求，在27之后，就取消了该属性的支持，并且只对英文、数字生效 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/responsive_layout.html":{"url":"css/responsive_layout.html","title":"响应式设计的理解","keywords":"","body":"面试官：什么是响应式设计？响应式设计的基本原理是什么？如何做？ 一、是什么 响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整 描述响应式界面最著名的一句话就是“Content is like water” 大白话便是“如果将屏幕看作容器，那么内容就像水一样” 响应式网站常见特点： 同时适配PC + 平板 + 手机等 标签导航在接近手持终端设备时改变为经典的抽屉式导航 网站的布局会根据视口来调整模块的大小和位置 二、实现方式 响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须有meta声明viewport 属性对应如下： width=device-width: 是自适应手机屏幕的尺寸宽度 maximum-scale:是缩放比例的最大值 inital-scale:是缩放的初始化 user-scalable:是用户的可以缩放的操作 实现响应式布局的方式有如下： 媒体查询 百分比 vw/vh rem 媒体查询 CSS3中的增加了更多的媒体查询，就像if条件表达式一样，我们可以设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表 使用@Media查询，可以针对不同的媒体类型定义不同的样式，如： @media screen and (max-width: 1920px) { ... } 当视口在375px - 600px之间，设置特定字体大小18px @media screen (min-width: 375px) and (max-width: 600px) { body { font-size: 18px; } } 通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片 比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现 百分比 通过百分比单位 \" % \" 来实现响应式的效果 比如当浏览器的宽度或者高度发生变化时，通过百分比单位，可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果 height、width属性的百分比依托于父标签的宽高，但是其他盒子属性则不完全依赖父元素： 子元素的top/left和bottom/right如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度/宽度 子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。 子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度 可以看到每个属性都使用百分比，会照成布局的复杂度，所以不建议使用百分比来实现响应式 vw/vh vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度。 任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一 与百分比布局很相似，在以前文章提过与%的区别，这里就不再展开述说 rem 在以前也讲到，rem是相对于根元素html的font-size属性，默认情况下浏览器字体大小为16px，此时1rem = 16px 可以利用前面提到的媒体查询，针对不同设备分辨率改变font-size的值，如下： @media screen and (max-width: 414px) { html { font-size: 18px } } @media screen and (max-width: 375px) { html { font-size: 16px } } @media screen and (max-width: 320px) { html { font-size: 12px } } 为了更准确监听设备可视窗口变化，我们可以在css之前插入script标签，内容如下： //动态为根元素设置字体大小 function init () { // 获取屏幕宽度 var width = document.documentElement.clientWidth // 设置根元素字体大小。此时为宽的10等分 document.documentElement.style.fontSize = width / 10 + 'px' } //首次加载应用，设置一次 init() // 监听手机旋转的事件的时机，重新设置 window.addEventListener('orientationchange', init) // 监听手机窗口变化，重新设置 window.addEventListener('resize', init) 无论设备可视窗口如何变化，始终设置rem为width的1/10，实现了百分比布局 除此之外，我们还可以利用主流UI框架，如：element ui、antd提供的栅格布局实现响应式 小结 响应式设计实现通常会从以下几方面思考： 弹性盒子（包括图片、表格、视频）和媒体查询等技术 使用百分比布局创建流式布局的弹性UI，同时使用媒体查询限制元素的尺寸和内容变更范围 使用相对单位使得内容自适应调节 选择断点，针对不同断点实现不同布局和内容展示 三、总结 响应式布局优点可以看到： 面对不同分辨率设备灵活性强 能够快捷解决多设备显示适应问题 缺点： 仅适用布局、信息、框架并不复杂的部门类型网站 兼容各种设备工作量大，效率低下 代码累赘，会出现隐藏无用的元素，加载时间加长 其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果 一定程度上改变了网站原有的布局结构，会出现用户混淆的情况 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/sass_less_stylus.html":{"url":"css/sass_less_stylus.html","title":"Css预编语言的理解与区别","keywords":"","body":"面试官：说说对Css预编语言的理解？有哪些区别? 一、是什么 Css 作为一门标记性语言，语法相对简单，对使用者的要求较低，但同时也带来一些问题 需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 Css 编写经验而很难写出组织良好且易于维护的 Css 代码 Css预处理器便是针对上述问题的解决方案 预处理语言 扩充了 Css 语言，增加了诸如变量、混合（mixin）、函数等功能，让 Css 更易维护、方便 本质上，预处理是Css的超集 包含一套自定义的语法及一个解析器，根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 Css 文件 二、有哪些 Css预编译语言在前端里面有三大优秀的预编处理器，分别是： sass less stylus sass 2007 年诞生，最早也是最成熟的 Css预处理器，拥有 Ruby 社区的支持和 Compass 这一最强大的 Css框架，目前受 LESS 影响，已经进化到了全面兼容 Css 的 Scss 文件后缀名为.sass与scss，可以严格按照 sass 的缩进方式省去大括号和分号 less 2009年出现，受SASS的影响较大，但又使用 Css 的语法，让大部分开发者和设计师更容易上手，在 Ruby社区之外支持者远超过 SASS 其缺点是比起 SASS来，可编程功能不够，不过优点是简单和兼容 Css，反过来也影响了 SASS演变到了Scss 的时代 stylus Stylus是一个Css的预处理框架，2010 年产生，来自 Node.js社区，主要用来给 Node 项目进行 Css 预处理支持 所以Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的Css。比较年轻，其本质上做的事情与SASS/LESS等类似 三、区别 虽然各种预处理器功能强大，但使用最多的，还是以下特性： 变量（variables） 作用域（scope） 代码混合（ mixins） 嵌套（nested rules） 代码模块化（Modules） 因此，下面就展开这些方面的区别 基本使用 less和scss .box { display: block; } sass .box display: block stylus .box display: block 嵌套 三者的嵌套语法都是一致的，甚至连引用父级选择器的标记 & 也相同 区别只是 Sass 和 Stylus 可以用没有大括号的方式书写 less .a { &.b { color: red; } } 变量 变量无疑为 Css 增加了一种有效的复用方式，减少了原来在 Css 中无法避免的重复「硬编码」 less声明的变量必须以@开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号:分隔开 @red: #c00; strong { color: @red; } sass声明的变量跟less十分的相似，只是变量名前面使用@开头 $red: #c00; strong { color: $red; } stylus声明的变量没有任何的限定，可以使用$开头，结尾的分号;可有可无，但变量与变量值之间需要使用= 在stylus中我们不建议使用@符号开头声明变量 red = #c00 strong color: red 作用域 Css 预编译器把变量赋予作用域，也就是存在生命周期。就像 js一样，它会先从局部作用域查找变量，依次向上级作用域查找 sass中不存在全局变量 $color: black; .scoped { $bg: blue; $color: white; color: $color; background-color:$bg; } .unscoped { color:$color; } 编译后 .scoped { color:white;/*是白色*/ background-color:blue; } .unscoped { color:white;/*白色（无全局变量概念）*/ } 所以，在sass中最好不要定义相同的变量名 less与stylus的作用域跟javascript十分的相似，首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止 @color: black; .scoped { @bg: blue; @color: white; color: @color; background-color:@bg; } .unscoped { color:@color; } 编译后： .scoped { color:white;/*白色（调用了局部变量）*/ background-color:blue; } .unscoped { color:black;/*黑色（调用了全局变量）*/ } 混入 混入（mixin）应该说是预处理器最精髓的功能之一了，简单点来说，Mixins可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用 可以在Mixins中定义变量或者默认参数 在less中，混合的用法是指将定义好的ClassA中引入另一个已经定义的Class，也能使用够传递参数，参数变量为@声明 .alert { font-weight: 700; } .highlight(@color: red) { font-size: 1.2em; color: @color; } .heads-up { .alert; .highlight(red); } 编译后 .alert { font-weight: 700; } .heads-up { font-weight: 700; font-size: 1.2em; color: red; } Sass声明mixins时需要使用@mixinn，后面紧跟mixin的名，也可以设置参数，参数名为变量$声明的形式 @mixin large-text { font: { family: Arial; size: 20px; weight: bold; } color: #ff0000; } .page-title { @include large-text; padding: 4px; margin-top: 10px; } stylus中的混合和前两款Css预处理器语言的混合略有不同，他可以不使用任何符号，就是直接声明Mixins名，然后在定义参数和默认值之间用等号（=）来连接 error(borderWidth= 2px) { border: borderWidth solid #F00; color: #F00; } .generic-error { padding: 20px; margin: 4px; error(); /* 调用error mixins */ } .login-error { left: 12px; position: absolute; top: 20px; error(5px); /* 调用error mixins，并将参数$borderWidth的值指定为5px */ } 代码模块化 模块化就是将Css代码分成一个个模块 scss、less、stylus三者的使用方法都如下所示 @import './common'; @import './github-markdown'; @import './mixin'; @import './variables'; 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/selector.html":{"url":"css/selector.html","title":"css选择器","keywords":"","body":"面试官：css选择器有哪些？优先级？哪些属性可以继承？ 一、选择器 CSS选择器是CSS规则的第一部分 它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式 选择器所选择的元素，叫做“选择器的对象” 我们从一个Html结构开始 关于css属性选择器常用的有： id选择器（#box），选择id为box的元素 类选择器（.one），选择类名为one的所有元素 标签选择器（div），选择标签为div的所有元素 后代选择器（#box div），选择id为box元素内部所有的div元素 子选择器（.one>one_1），选择父元素为.one的所有.one_1的元素 相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素 群组选择器（div,p），选择div、p的所有元素 还有一些使用频率相对没那么多的选择器： 伪类选择器 :link ：选择未被访问的链接 :visited：选取已被访问的链接 :active：选择活动链接 :hover ：鼠标指针浮动在上面的元素 :focus ：选择具有焦点的 :first-child：父元素的首个子元素 伪元素选择器 :first-letter ：用于选取指定选择器的首字母 :first-line ：选取指定选择器的首行 :before : 选择器在被选元素的内容前面插入内容 :after : 选择器在被选元素的内容后面插入内容 属性选择器 [attribute] 选择带有attribute属性的元素 [attribute=value] 选择所有使用attribute=value的元素 [attribute~=value] 选择attribute属性包含value的元素 [attribute|=value]：选择attribute属性以value开头的元素 在CSS3中新增的选择器有如下： 层次选择器（p~ul），选择前面有p元素的每个ul元素 伪类选择器 :first-of-type 父元素的首个元素 :last-of-type 父元素的最后一个元素 :only-of-type 父元素的特定类型的唯一子元素 :only-child 父元素中唯一子元素 :nth-child(n) 选择父元素中第N个子元素 :nth-last-of-type(n) 选择父元素中第N个子元素，从后往前 :last-child 父元素的最后一个元素 :root 设置HTML文档 :empty 指定空的元素 :enabled 选择被禁用元素 :disabled 选择被禁用元素 :checked 选择选中的元素 :not(selector) 选择非 元素的所有元素 属性选择器 [attribute*=value]：选择attribute属性值包含value的所有元素 [attribute^=value]：选择attribute属性开头为value的所有元素 [attribute$=value]：选择attribute属性结尾为value的所有元素 二、优先级 相信大家对CSS选择器的优先级都不陌生： 内联 > ID选择器 > 类选择器 > 标签选择器 到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下： 如果存在内联样式，那么 A = 1, 否则 A = 0 B的值等于 ID选择器出现的次数 C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数 D 的值等于 标签选择器 和 伪元素 出现的总次数 这里举个例子： #nav-global > ul > li > a.nav-link 套用上面的算法，依次求出 A B C D 的值： 因为没有内联样式 ，所以 A = 0 ID选择器总共出现了1次， B = 1 类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1 标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3 上面算出的A 、 B、C、D 可以简记作：(0, 1, 1, 3) 知道了优先级是如何计算之后，就来看看比较规则： 从左往右依次进行比较 ，较大者优先级更高 如果相等，则继续往右移动一位进行比较 如果4位全部相等，则后面的会覆盖前面的 经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用!important 三、继承属性 在css中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性 关于继承属性，可以分成： 字体系列属性 font:组合字体 font-family:规定元素的字体系列 font-weight:设置字体的粗细 font-size:设置字体的尺寸 font-style:定义字体的风格 font-variant:偏大或偏小的字体 文本系列属性 text-indent：文本缩进 text-align：文本水平对刘 line-height：行高 word-spacing：增加或减少单词间的空白 letter-spacing：增加或减少字符间的空白 text-transform：控制文本大小写 direction：规定文本的书写方向 color：文本颜色 元素可见性 visibility 表格布局属性 caption-side：定位表格标题位置 border-collapse：合并表格边框 border-spacing：设置相邻单元格的边框间的距离 empty-cells：单元格的边框的出现与消失 table-layout：表格的宽度由什么决定 列表属性 list-style-type：文字前面的小点点样式 list-style-position：小点点位置 list-style：以上的属性可通过这属性集合 引用 quotes：设置嵌套引用的引号类型 光标属性 cursor：箭头可以变成需要的形状 继承中比较特殊的几点： a 标签的字体颜色不能被继承 h1-h6标签字体的大下也是不能被继承的 无继承的属性 display 文本属性：vertical-align、text-decoration 盒子模型的属性：宽度、高度、内外边距、边框等 背景属性：背景图片、颜色、位置等 定位属性：浮动、清除浮动、定位position等 生成内容属性：content、counter-reset、counter-increment 轮廓样式属性：outline-style、outline-width、outline-color、outline 页面样式属性：size、page-break-before、page-break-after 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/single_multi_line.html":{"url":"css/single_multi_line.html","title":"实现单行／多行文本溢出省略","keywords":"","body":"面试官：如何实现单行／多行文本溢出的省略样式？ 一、前言 在日常开发展示页面，如果一段文本的数量过长，受制于元素宽度的因素，有可能不能完全显示，为了提高用户的使用体验，这个时候就需要我们把溢出的文本显示成省略号 对于文本的溢出，我们可以分成两种形式： 单行文本溢出 多行文本溢出 二、实现方式 单行文本溢出省略 理解也很简单，即文本在一行内显示，超出部分以省略号的形式展现 实现方式也很简单，涉及的css属性有： text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本 white-space：设置文字在一行显示，不能换行 overflow：文字长度超出限定宽度，则隐藏超出的内容 overflow设为hidden，普通情况用在块级元素的外层隐藏内部溢出元素，或者配合下面两个属性实现文本溢出省略 white-space:nowrap，作用是设置文本不换行，是overflow:hidden和text-overflow：ellipsis生效的基础 text-overflow属性值有如下： clip：当对象内文本溢出部分裁切掉 ellipsis：当对象内文本溢出时显示省略标记（...） text-overflow只有在设置了overflow:hidden和white-space:nowrap才能够生效的 举个例子 p{ overflow: hidden; line-height: 40px; width:400px; height:40px; border:1px solid red; text-overflow: ellipsis; white-space: nowrap; } 效果如下： 可以看到，设置单行文本溢出较为简单，并且省略号显示的位置较好 多行文本溢出省略 多行文本溢出的时候，我们可以分为两种情况： 基于高度截断 基于行数截断 基于高度截断 伪元素 + 定位 核心的css代码结构如下： position: relative：为伪元素绝对定位 overflow: hidden：文本溢出限定的宽度就隐藏内容） position: absolute：给省略号绝对定位 line-height: 20px：结合元素高度,高度固定的情况下,设定行高, 控制显示行数 height: 40px：设定当前元素高度 ::after {} ：设置省略号样式 代码如下所示： .demo { position: relative; line-height: 20px; height: 40px; overflow: hidden; } .demo::after { content: \"...\"; position: absolute; bottom: 0; right: 0; padding: 0 20px 0 10px; } 这是一段很长的文本 实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 overflow: hidden 隐藏多余文字 这种实现具有以下优点： 兼容性好，对各大主流浏览器有好的支持 响应式截断，根据不同宽度做出调整 一般文本存在英文的时候，可以设置word-break: break-all使一个单词能够在换行时进行拆分 基于行数截断 纯css实现也非常简单，核心的css代码如下： -webkit-line-clamp: 2：用来限制在一个块元素显示的文本的行数，为了实现该效果，它需要组合其他的WebKit属性） display: -webkit-box：和1结合使用，将对象作为弹性伸缩盒子模型显示 -webkit-box-orient: vertical：和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 overflow: hidden：文本溢出限定的宽度就隐藏内容 text-overflow: ellipsis：多行文本的情况下，用省略号“…”隐藏溢出范围的文本 p { width: 400px; border-radius: 1px solid red; -webkit-line-clamp: 2; display: -webkit-box; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; } 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本 可以看到，上述使用了webkit的CSS属性扩展，所以兼容浏览器范围是PC端的webkit内核的浏览器，由于移动端大多数是使用webkit，所以移动端常用该形式 需要注意的是，如果文本为一段很长的英文或者数字，则需要添加word-wrap: break-word属性 还能通过使用javascript实现配合css，实现代码如下所示： css结构如下： p { position: relative; width: 400px; line-height: 20px; overflow: hidden; } .p-after:after{ content: \"...\"; position: absolute; bottom: 0; right: 0; padding-left: 40px; background: -webkit-linear-gradient(left, transparent, #fff 55%); background: -moz-linear-gradient(left, transparent, #fff 55%); background: -o-linear-gradient(left, transparent, #fff 55%); background: linear-gradient(to right, transparent, #fff 55%); } javascript代码如下： $(function(){ //获取文本的行高，并获取文本的高度，假设我们规定的行数是五行，那么对超过行数的部分进行限制高度，并加上省略号 $('p').each(function(i, obj){ var lineHeight = parseInt($(this).css(\"line-height\")); var height = parseInt($(this).height()); if((height / lineHeight) >3 ){ $(this).addClass(\"p-after\") $(this).css(\"height\",\"60px\"); }else{ $(this).removeClass(\"p-after\"); } }); }) 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/triangle.html":{"url":"css/triangle.html","title":"CSS如何画一个三角形","keywords":"","body":"面试官：CSS如何画一个三角形？原理是什么？ 一、前言 在前端开发的时候，我们有时候会需要用到一个三角形的形状，比如地址选择或者播放器里面播放按钮 通常情况下，我们会使用图片或者svg去完成三角形效果图，但如果单纯使用css如何完成一个三角形呢？ 实现过程似乎也并不困难，通过边框就可完成 二、实现过程 在以前也讲过盒子模型，默认情况下是一个矩形，实现也很简单 .border { width: 50px; height: 50px; border: 2px solid; border-color: #96ceb4 #ffeead #d9534f #ffad60; } 效果如下图所示： 将border设置50px，效果图如下所示： 白色区域则为width、height，这时候只需要你将白色区域部分宽高逐渐变小，最终变为0，则变成如下图所示： 这时候就已经能够看到4个不同颜色的三角形，如果需要下方三角形，只需要将上、左、右边框设置为0就可以得到下方的红色三角形 但这种方式，虽然视觉上是实现了三角形，但实际上，隐藏的部分任然占据部分高度，需要将上方的宽度去掉 最终实现代码如下： .border { width: 0; height: 0; border-style:solid; border-width: 0 50px 50px; border-color: transparent transparent #d9534f; } 如果想要实现一个只有边框是空心的三角形，由于这里不能再使用border属性，所以最直接的方法是利用伪类新建一个小一点的三角形定位上去 .border { width: 0; height: 0; border-style:solid; border-width: 0 50px 50px; border-color: transparent transparent #d9534f; position: relative; } .border:after{ content: ''; border-style:solid; border-width: 0 40px 40px; border-color: transparent transparent #96ceb4; position: absolute; top: 0; left: 0; } 效果图如下所示： 伪类元素定位参照对象的内容区域宽高都为0，则内容区域即可以理解成中心一点，所以伪元素相对中心这点定位 将元素定位进行微调以及改变颜色，就能够完成下方效果图： 最终代码如下： .border:after { content: ''; border-style: solid; border-width: 0 40px 40px; border-color: transparent transparent #96ceb4; position: absolute; top: 6px; left: -40px; } 三、原理分析 可以看到，边框是实现三角形的部分，边框实际上并不是一个直线，如果我们将四条边设置不同的颜色，将边框逐渐放大，可以得到每条边框都是一个梯形 当分别取消边框的时候，发现下面几种情况： 取消一条边的时候，与这条边相邻的两条边的接触部分会变成直的 当仅有邻边时， 两个边会变成对分的三角 当保留边没有其他接触时，极限情况所有东西都会消失 通过上图的变化规则，利用旋转、隐藏，以及设置内容宽高等属性，就能够实现其他类型的三角形 如设置直角三角形，如上图倒数第三行实现过程，我们就能知道整个实现原理 实现代码如下： .box { /* 内部大小 */ width: 0px; height: 0px; /* 边框大小 只设置两条边*/ border-top: #4285f4 solid; border-right: transparent solid; border-width: 85px; /* 其他设置 */ margin: 50px; } 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"css/visual_scrolling.html":{"url":"css/visual_scrolling.html","title":"使用css完成视差滚动效果","keywords":"","body":"面试官：如何使用css完成视差滚动效果? 一、是什么 视差滚动（Parallax Scrolling）是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验 我们可以把网页解刨成：背景层、内容层、悬浮层 当滚动鼠标滑轮的时候，各个图层以不同的速度移动，形成视觉差的效果 二、实现方式 使用css形式实现视觉差滚动效果的方式有： background-attachment transform:translate3D background-attachment 作用是设置背景图像是否固定或者随着页面的其余部分滚动 值分别有如下： scroll：默认值，背景图像会随着页面其余部分的滚动而移动 fixed：当页面的其余部分滚动时，背景图像不会移动 inherit：继承父元素background-attachment属性的值 完成滚动视觉差就需要将background-attachment属性设置为fixed，让背景相对于视口固定。及时一个元素有滚动机制，背景也不会随着元素的内容而滚动 也就是说，背景一开始就已经被固定在初始的位置 核心的css代码如下： section { height: 100vh; } .g-img { background-image: url(...); background-attachment: fixed; background-size: cover; background-position: center center; } 整体例子如下： div { height: 100vh; background: rgba(0, 0, 0, .7); color: #fff; line-height: 100vh; text-align: center; font-size: 20vh; } .a-img1 { background-image: url(https://images.pexels.com/photos/1097491/pexels-photo-1097491.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; } .a-img2 { background-image: url(https://images.pexels.com/photos/2437299/pexels-photo-2437299.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; } .a-img3 { background-image: url(https://images.pexels.com/photos/1005417/pexels-photo-1005417.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; } 1 2 3 4 5 6 7 transform:translate3D 同样，让我们先来看一下两个概念transform和perspective： transform: css3 属性，可以对元素进行变换(2d/3d)，包括平移 translate,旋转 rotate,缩放 scale,等等 perspective: css3 属性，当元素涉及 3d 变换时，perspective 可以定义我们眼睛看到的 3d 立体效果，即空间感 3D视角示意图如下所示： 举个例子： html { overflow: hidden; height: 100% } body { /* 视差元素的父级需要3D视角 */ perspective: 1px; transform-style: preserve-3d; height: 100%; overflow-y: scroll; overflow-x: hidden; } #app{ width: 100vw; height:200vh; background:skyblue; padding-top:100px; } .one{ width:500px; height:200px; background:#409eff; transform: translateZ(0px); margin-bottom: 50px; } .two{ width:500px; height:200px; background:#67c23a; transform: translateZ(-1px); margin-bottom: 150px; } .three{ width:500px; height:200px; background:#e6a23c; transform: translateZ(-2px); margin-bottom: 150px; } one two three 而这种方式实现视觉差动的原理如下： 容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中， 子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样 滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/1.0_1.1_2.0.html":{"url":"http/1.0_1.1_2.0.html","title":"HTTP1.0/1.1/2.0 的区别","keywords":"","body":"面试官：说说 HTTP1.0/1.1/2.0 的区别? 一、HTTP1.0 HTTP协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本 HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接 服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求 简单来讲，每次与服务器交互，都需要新开一个连接 例如，解析html文件，当发现文件中存在资源文件的时候，这时候又创建单独的链接 最终导致，一个html文件的访问包含了多次的请求和响应，每次请求都需要创建连接、关系连接 这种形式明显造成了性能上的缺陷 如果需要建立长连接，需要设置一个非标准的Connection字段 Connection: keep-alive 二、HTTP1.1 在HTTP1.1中，默认支持长连接（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟 建立一次连接，多次请求均由这个连接完成 这样，在加载html文件的时候，文件中多个请求和响应就可以在一个连接中传输 同时，HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间 同时，HTTP1.1在HTTP1.0的基础上，增加更多的请求头和响应头来完善的功能，如下： 引入了更多的缓存控制策略，如If-Unmodified-Since, If-Match, If-None-Match等缓存头来控制缓存策略 引入range，允许值请求资源某个部分 引入host，实现了在一台WEB服务器上可以在同一个IP地址和端口号上使用不同的主机名来创建多个虚拟WEB站点 并且还添加了其他的请求方法：put、delete、options... 三、HTTP2.0 而HTTP2.0在相比之前版本，性能上有很大的提升，如添加了一个特性： 多路复用 二进制分帧 首部压缩 服务器推送 多路复用 HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞” 上图中，可以看到第四步中css、js资源是同时发送到服务端 二进制分帧 帧是HTTP2通信中最小单位信息 HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x的文本格式，解析起来更高效 将请求和响应数据分割为更小的帧，并且它们采用二进制编码 HTTP2中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流 每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装，这也是多路复用同时发送数据的实现条件 首部压缩 HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送 首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新 例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销 服务器推送 HTTP2引入服务器推送，允许服务端推送资源给客户端 服务器会顺便把一些客户端需要的资源一起推送到客户端，如在响应一个页面请求中，就可以随同页面的其它资源 免得客户端再次创建连接发送请求到服务器端获取 这种方式非常合适加载静态资源 四、总结 HTTP1.0： 浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接 HTTP1.1： 引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用 在同一个TCP连接里面，客户端可以同时发送多个请求 虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着 新增了一些请求方法 新增了一些请求头和响应头 HTTP2.0： 采用二进制格式而非文本格式 完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行 使用报头压缩，降低开销 服务器推送 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/CDN.html":{"url":"http/CDN.html","title":"如何理解CDN","keywords":"","body":"面试官：如何理解CDN？说说实现原理？ 一、是什么 CDN (全称 Content Delivery Network)，即内容分发网络 构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术 简单来讲，CDN就是根据用户位置分配最近的资源 于是，用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫边缘节点，其实就是缓存了源站内容的代理服务器。如下图： 二、原理分析 在没有应用CDN时，我们使用域名访问某一个站点时的路径为 用户提交域名→浏览器对域名进行解释→DNS 解析得到目的主机的IP地址→根据IP地址访问发出请求→得到请求数据并回复 应用CDN后，DNS 返回的不再是 IP 地址，而是一个CNAME(Canonical Name ) 别名记录，指向CDN的全局负载均衡 CNAME实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是CDN实现的关键 负载均衡系统 由于没有返回IP地址，于是本地DNS会向负载均衡系统再发送请求 ，则进入到CDN的全局负载均衡系统进行智能调度： 看用户的 IP 地址，查表得知地理位置，找相对最近的边缘节点 看用户所在的运营商网络，找相同网络的边缘节点 检查边缘节点的负载情况，找负载较轻的节点 其他，比如节点的“健康状况”、服务能力、带宽、响应时间等 结合上面的因素，得到最合适的边缘节点，然后把这个节点返回给用户，用户就能够就近访问CDN的缓存代理 整体流程如下图： 缓存代理 缓存系统是 CDN的另一个关键组成部分，缓存系统会有选择地缓存那些最常用的那些资源 其中有两个衡量CDN服务质量的指标： 命中率：用户访问的资源恰好在缓存系统里，可以直接返回给用户，命中次数与所有访问次数之比 回源率：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比 缓存系统也可以划分出层次，分成一级缓存节点和二级缓存节点。一级缓存配置高一些，直连源站，二级缓存配置低一些，直连用户 回源的时候二级缓存只找一级缓存，一级缓存没有才回源站，可以有效地减少真正的回源 现在的商业 CDN命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上 三、总结 CDN 目的是为了改善互联网的服务质量，通俗一点说其实就是提高访问速度 CDN 构建了全国、全球级别的专网，让用户就近访问专网里的边缘节点，降低了传输延迟，实现了网站加速 通过CDN的负载均衡系统，智能调度边缘节点提供服务，相当于CDN服务的大脑，而缓存系统相当于CDN的心脏，缓存命中直接返回给用户，否则回源 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/DNS.html":{"url":"http/DNS.html","title":"DNS 完整的查询过程","keywords":"","body":"面试官：DNS协议 是什么？说说DNS 完整的查询过程? 一、是什么 DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器 简单来讲，DNS相当于一个翻译官，负责将域名翻译成ip地址 IP 地址：一长串能够唯一地标记网络上的计算机的数字 域名：是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识 二、域名 域名是一个具有层次的结构，从上到下一次为根域名、顶级域名、二级域名、三级域名... 例如www.xxx.com，www为三级域名、xxx为二级域名、com为顶级域名，系统为用户做了兼容，域名末尾的根域名.一般不需要输入 在域名的每一层都会有一个域名服务器，如下图： 除此之外，还有电脑默认的本地域名服务器 三、查询方式 DNS 查询的方式有两种： 递归查询：如果 A 请求 B，那么 B 作为请求的接收者一定要给 A 想要的答案 迭代查询：如果接收者 B 没有请求者 A 所需要的准确内容，接收者 B 将告诉请求者 A，如何去获得这个内容，但是自己并不去发出请求 四、域名缓存 在域名服务器解析的时候，使用缓存保存域名和IP地址的映射 计算机中DNS的记录也分成了两种缓存方式： 浏览器缓存：浏览器在获取网站域名的实际 IP 地址后会对其进行缓存，减少网络请求的损耗 操作系统缓存：操作系统的缓存其实是用户自己配置的 hosts 文件 五、查询过程 解析域名的过程如下： 首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表 若没有命中，则继续搜索操作系统的 DNS 缓存 若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果 若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询 首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地服务器 本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址 本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址 本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来 操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起 至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起 流程如下图所示： 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/GET_POST.html":{"url":"http/GET_POST.html","title":"GET和POST区别","keywords":"","body":"面试官：说一下 GET 和 POST 的区别？ 一、是什么 GET和POST，两者是HTTP协议中发送请求的方法 GET GET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据 POST POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用 本质上都是TCP链接，并无差别 但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中会体现出一些区别 二、区别 从w3schools得到的标准答案的区别如下： GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark，而POST不可以。 GET请求会被浏览器主动cache，而POST不会，除非手动设置。 GET请求只能进行url编码，而POST支持多种编码方式。 GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 GET请求在URL中传送的参数是有长度限制的，而POST没有。 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。 GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。 GET参数通过URL传递，POST放在Request body中 参数位置 貌似从上面看到GET与POST请求区别非常大，但两者实质并没有区别 无论 GET还是 POST，用的都是同一个传输层协议，所以在传输上没有区别 当不携带参数的时候，两者最大的区别为第一行方法名不同 POST /uri HTTP/1.1 \\r\\n GET /uri HTTP/1.1 \\r\\n 当携带参数的时候，我们都知道GET请求是放在url中，POST则放在body中 GET 方法简约版报文是这样的 GET /index.html?name=qiming.c&age=22 HTTP/1.1 Host: localhost POST方法简约版报文是这样的 POST /index.html HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded name=qiming.c&age=22 注意：这里只是约定，并不属于HTTP规范，相反的，我们可以在POST请求中url中写入参数，或者GET请求中的body携带参数 参数长度 HTTP协议没有Body和 URL 的长度限制，对 URL限制的大多是浏览器和服务器的原因 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持 这里限制的是整个URL长度，而不仅仅是参数值的长度 服务器处理长URL 要消耗比较多的资源，为了性能和安全考虑，会给 URL 长度加限制 安全 POST比GET 安全，因为数据在地址栏上不可见 然而，从传输的角度来说，他们都是不安全的，因为HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文 只有使用HTTPS才能加密安全 数据包 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据） 对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/HTTPS.html":{"url":"http/HTTPS.html","title":"HTTPS是如何保证安全","keywords":"","body":"面试官：为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？ 一、安全特性 在上篇文章中，我们了解到HTTP在通信过程中，存在以下问题： 通信使用明文（不加密），内容可能被窃听 不验证通信方的身份，因此有可能遭遇伪装 而HTTPS的出现正是解决这些问题，HTTPS是建立在SSL之上，其安全性由SSL来保证 在采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能 SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议 二、如何做 SSL的实现这些功能主要依赖于三种手段： 对称加密：采用协商的密钥对数据加密 非对称加密：实现身份认证和密钥协商 摘要算法：验证信息的完整性 数字签名：身份验证 对称加密 对称加密指的是加密和解密使用的秘钥都是同一个，是对称的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性 非对称加密 非对称加密，存在两个秘钥，一个叫公钥，一个叫私钥。两个秘钥是不同的，公钥可以公开给任何人使用，私钥则需要保密 公钥和私钥都可以用来加密解密，但公钥加密后只能用私钥解 密，反过来，私钥加密后也只能用公钥解密 混合加密 在HTTPS通信过程中，采用的是对称加密+非对称加密，也就是混合加密 在对称加密中讲到，如果能够保证了密钥的安全，那整个通信过程就可以说具有了机密性 而HTTPS采用非对称加密解决秘钥交换的问题 具体做法是发送密文的一方使用对方的公钥进行加密处理“对称的密钥”，然后对方用自己的私钥解密拿到“对称的密钥” 这样可以确保交换的密钥是安全的前提下，使用对称加密方式进行通信 举个例子： 网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文 上述的方法解决了数据加密，在网络传输过程中，数据有可能被篡改，并且黑客可以伪造身份发布公钥，如果你获取到假的公钥，那么混合加密也并无多大用处，你的数据扔被黑客解决 因此，在上述加密的基础上仍需加上完整性、身份验证的特性，来实现真正的安全，实现这一功能则是摘要算法 摘要算法 实现完整性的手段主要是摘要算法，也就是常说的散列函数、哈希函数 可以理解成一种特殊的压缩算法，它能够把任意长度的数据“压缩”成固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹” 摘要算法保证了“数字摘要”和原文是完全等价的。所以，我们只要在原文后附上它的摘要，就能够保证数据的完整性 比如，你发了条消息：“转账 1000 元”，然后再加上一个 SHA-2 的摘要。网站收到后也计算一下消息的摘要，把这两份“指纹”做个对比，如果一致，就说明消息是完整可信的，没有被修改 数字签名 数字签名能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名 原理其实很简单，就是用私钥加密，公钥解密 签名和公钥一样完全公开，任何人都可以获取。但这个签名只有用私钥对应的公钥才能解开，拿到摘要后，再比对原文验证完整性，就可以像签署文件一样证明消息确实是你发的 和消息本身一样，因为谁都可以发布公钥，我们还缺少防止黑客伪造公钥的手段，也就是说，怎么判断这个公钥就是你的公钥 这时候就需要一个第三方，就是证书验证机构 CA验证机构 数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场 CA 对公钥的签名认证要求包括序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“数字证书” 流程如下图： 服务器的运营人员向数字证书认证机构提出公开密钥的申请 数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名 然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起 服务器会将这份由数字证书认证机构颁发的数字证书发送给客户端，以进行非对称加密方式通信 接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，则证明： 认证服务器的公开密钥的是真实有效的数字证书认证机构 服务器的公开密钥是值得信赖的 三、总结 可以看到，HTTPS与HTTP虽然只差一个SSL，但是通信安全得到了大大的保障，通信的四大特性都以解决，解决方式如下： 机密性：混合算法 完整性：摘要算法 身份认证：数字签名 不可否定：数字签名 同时引入第三方证书机构，确保公开秘钥的安全性 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/HTTP_HTTPS.html":{"url":"http/HTTP_HTTPS.html","title":"HTTP 和 HTTPS 的区别","keywords":"","body":"面试官：什么是HTTP? HTTP 和 HTTPS 的区别? 一、HTTP HTTP (HyperText Transfer Protocol)，即超文本运输协议，是实现网络通信的一种规范 在计算机和网络世界有，存在不同的协议，如广播协议、寻址协议、路由协议等等...... 而HTTP是一个传输协议，即将数据由A传到B或将B传输到A，并且 A 与 B 之间能够存放很多第三方，如： AXYZB 传输的数据并不是计算机底层中的二进制包，而是完整的、有意义的数据，如HTML 文件, 图片文件, 查询结果等超文本，能够被上层应用识别 在实际应用中，HTTP常被用于在Web浏览器和网站服务器之间传递信息，以明文方式发送内容，不提供任何方式的数据加密 特点如下： 支持客户/服务器模式 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间 无状态：HTTP协议无法根据之前的状态进行本次的请求处理 二、HTTPS 在上述介绍HTTP中，了解到HTTP传递信息是以明文的形式发送内容，这并不安全。而HTTPS出现正是为了解决HTTP不安全的特性 为了保证这些隐私数据能加密传输，让HTTP运行安全的SSL/TLS协议上，即 HTTPS = HTTP + SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密 SSL 协议位于TCP/IP 协议与各种应用层协议之间，浏览器和服务器在使用 SSL 建立连接时需要选择一组恰当的加密算法来实现安全通信，为数据通讯提供安全支持 流程图如下所示： 首先客户端通过URL访问服务器建立SSL连接 服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端 客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级 客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站 服务器利用自己的私钥解密出会话密钥 服务器利用会话密钥加密与客户端之间的通信 三、区别 HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全 HTTP 和 HTTPS 使用连接方式不同，默认端口也不一样，HTTP是80，HTTPS是443 HTTPS 由于需要设计加密以及多次握手，性能方面不如 HTTP HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书费用越高 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/OSI.html":{"url":"http/OSI.html","title":"理解OSI七层模型","keywords":"","body":"面试官：如何理解OSI七层模型? 一、是什么 OSI （Open System Interconnect）模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架 OSI将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。即每一层扮演固定的角色，互不打扰 二、划分 OSI主要划分了七层，如下图所示： 应用层 应用层位于 OSI 参考模型的第七层，其作用是通过应用程序间的交互来完成特定的网络应用 该层协议定义了应用进程之间的交互规则，通过不同的应用层协议为不同的网络应用提供服务。例如域名系统 DNS，支持万维网应用的 HTTP 协议，电子邮件系统采用的 SMTP协议等 在应用层交互的数据单元我们称之为报文 表示层 表示层的作用是使通信的应用程序能够解释交换数据的含义，其位于 OSI参考模型的第六层，向上为应用层提供服务，向下接收来自会话层的服务 该层提供的服务主要包括数据压缩，数据加密以及数据描述，使应用程序不必担心在各台计算机中表示和存储的内部格式差异 会话层 会话层就是负责建立、管理和终止表示层实体之间的通信会话 该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法 传输层 传输层的主要任务是为两台主机进程之间的通信提供服务，处理数据包错误、数据包次序，以及其他一些关键传输问题 传输层向高层屏蔽了下层数据通信的细节。因此，它是计算机通信体系结构中关键的一层 其中，主要的传输层协议是TCP和UDP 网络层 两台计算机之间传送数据时其通信链路往往不止一条，所传输的信息甚至可能经过很多通信子网 网络层的主要任务就是选择合适的网间路由和交换节点，确保数据按时成功传送 在发送数据时，网络层把传输层产生的报文或用户数据报封装成分组和包，向下传输到数据链路层 在网络层使用的协议是无连接的网际协议（Internet Protocol）和许多路由协议，因此我们通常把该层简单地称为 IP 层 数据链路层 数据链路层通常也叫做链路层，在物理层和网络层之间。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层协议 在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP数据报组装成帧，在两个相邻节点间的链路上传送帧 每一帧的数据可以分成：报头head和数据data两部分: head 标明数据发送者、接受者、数据类型，如 MAC地址 data 存储了计算机之间交互的数据 通过控制信息我们可以知道一个帧的起止比特位置，此外，也能使接收端检测出所收到的帧有无差错，如果发现差错，数据链路层能够简单的丢弃掉这个帧，以避免继续占用网络资源 物理层 作为OSI 参考模型中最低的一层，物理层的作用是实现计算机节点之间比特流的透明传送 该层的主要任务是确定与传输媒体的接口的一些特性（机械特性、电气特性、功能特性，过程特性） 该层主要是和硬件有关，与软件关系不大 三、传输过程 数据在各层之间的传输如下图所示： 应用层报文被传送到运输层 在最简单的情况下，运输层收取到报文并附上附加信息，该首部将被接收端的运输层使用 应用层报文和运输层首部信息一道构成了运输层报文段。附加的信息可能包括：允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变 运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报 网络层数据报接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧 在物理层数据帧被封装成比特流，之后通过传输介质传送到对端 对端再一步步解开封装，获取到传送的数据 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/TCP_IP.html":{"url":"http/TCP_IP.html","title":"理解TCP/IP协议","keywords":"","body":"面试官：如何理解TCP/IP协议? 一、是什么 TCP/IP，传输控制协议/网际协议，是指能够在多个不同网络间实现信息传输的协议簇 TCP（传输控制协议） 一种面向连接的、可靠的、基于字节流的传输层通信协议 IP（网际协议） 用于封包交换数据网络的协议 TCP/IP协议不仅仅指的是TCP和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以通称为TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols） 二、划分 TCP/IP协议族按层次分别了五层体系或者四层体系 五层体系的协议结构是综合了 OSI 和 TCP/IP 优点的一种协议，包括应用层、传输层、网络层、数据链路层和物理层 五层协议的体系结构只是为介绍网络原理而设计的，实际应用还是 TCP/IP 四层体系结构，包括应用层、传输层、网络层（网际互联层）、网络接口层 如下图所示： 五层体系 应用层 TCP/IP 模型将 OSI参考模型中的会话层、表示层和应用层的功能合并到一个应用层实现，通过不同的应用层协议为不同的应用提供服务 如：FTP、Telnet、DNS、SMTP 等 传输层 该层对应于 OSI 参考模型的传输层，为上层实体提供源端到对端主机的通信功能 传输层定义了两个主要协议：传输控制协议（TCP）和用户数据报协议（UDP） 其中面向连接的 TCP 协议保证了数据的传输可靠性，面向无连接的 UDP 协议能够实现数据包简单、快速地传输 网络层 负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机 在发送数据时，网络层把运输层产生的报文段或用户数据封装成分组或包进行传送 数据链路层 数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报组装成帧，在两个相邻节点之间的链路上传送帧 物理层 保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境 四层体系 TCP/IP 的四层结构则如下表所示： 层次名称 单位 功 能 协 议 网络接口层 帧 负责实际数据的传输，对应OSI参考模型的下两层 HDLC（高级链路控制协议）PPP（点对点协议） SLIP（串行线路接口协议） 网络层 数据报 负责网络间的寻址数据传输，对应OSI参考模型的第三层 IP（网际协议） ICMP（网际控制消息协议）ARP（地址解析协议） RARP（反向地址解析协议） 传输层 报文段 负责提供可靠的传输服务，对应OSI参考模型的第四层 TCP（控制传输协议） UDP（用户数据报协议） 应用层 负责实现一切与应用程序相关的功能，对应OSI参考模型的上三层 FTP（文件传输协议） HTTP（超文本传输协议） DNS（域名服务器协议）SMTP（简单邮件传输协议）NFS（网络文件系统协议） 三、总结 OSI 参考模型与 TCP/IP 参考模型区别如下： 相同点： OSI 参考模型与 TCP/IP 参考模型都采用了层次结构 都能够提供面向连接和无连接两种通信服务机制 不同点： OSI 采用的七层模型； TCP/IP 是四层或五层结构 TCP/IP 参考模型没有对网络接口层进行细分，只是一些概念性的描述； OSI 参考模型对服务和协议做了明确的区分 OSI 参考模型虽然网络划分为七层，但实现起来较困难。TCP/IP 参考模型作为一种简化的分层结构是可以的 TCP/IP协议去掉表示层和会话层的原因在于会话层、表示层、应用层都是在应用程序内部实现的，最终产出的是一个应用数据包，而应用程序之间是几乎无法实现代码的抽象共享的，这也就造成 OSI 设想中的应用程序维度的分层是无法实现的 三种模型对应关系如下图所示： 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/UDP_TCP.html":{"url":"http/UDP_TCP.html","title":"UDP 和 TCP的区别和应用场景","keywords":"","body":"面试官：如何理解UDP 和 TCP? 区别? 应用场景? 一、UDP UDP（User Datagram Protocol），用户数据包协议，是一个简单的面向数据报的通信协议，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层 也就是说无论应用层交给UDP多长的报文，它统统发送，一次发送一个报文 而对接收方，接到后直接去除首部，交给上面的应用层就完成任务 UDP报头包括4个字段，每个字段占用2个字节（即16个二进制位），标题短，开销小 特点如下： UDP 不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务 传输途中出现丢包，UDP 也不负责重发 当包的到达顺序出现乱序时，UDP没有纠正的功能。 并且它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况，UDP 也无法进行流量控制等避免网络拥塞行为 二、TCP TCP（Transmission Control Protocol），传输控制协议，是一种可靠、面向字节流的通信协议，把上面应用层交下来的数据看成无结构的字节流来发送 可以想象成流水形式的，发送方TCP会将数据放入“蓄水池”（缓存区），等到可以发送的时候就发送，不能发送就等着，TCP会根据当前网络的拥塞状态来确定每个报文段的大小 TCP报文首部有20个字节，额外开销大 特点如下： TCP充分地实现了数据传输时各种控制功能，可以进行丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在 UDP 中都没有。 此外，TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。 根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高可靠性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现） 三、区别 UDP与TCP两者的都位于传输层，如下图所示： 两者区别如下表所示： TCP UDP 可靠性 可靠 不可靠 连接性 面向连接 无连接 报文 面向字节流 面向报文 效率 传输效率低 传输效率高 双共性 全双工 一对一、一对多、多对一、多对多 流量控制 滑动窗口 无 拥塞控制 慢开始、拥塞避免、快重传、快恢复 无 传输效率 慢 快 TCP 是面向连接的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取 TCP 提供可靠的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方 TCP 面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用 TCP 只能点对点全双工通信。UDP 支持一对一、一对多、多对一和多对多的交互通信 两者应用场景如下图： 可以看到，TCP 应用场景适用于对效率要求低，对准确性要求高或者要求有链接的场景，而UDP 适用场景为对效率要求高，对准确性要求低的场景 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/WebSocket.html":{"url":"http/WebSocket.html","title":"对WebSocket的理解","keywords":"","body":"面试官：说说对WebSocket的理解？应用场景？ 一、是什么 WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅 客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输 从上图可见，websocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据 而在websocket出现之前，开发实时web应用的方式为轮询 不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果 轮询的缺点也很明显，反复发送无效查询请求耗费了大量的带宽和 CPU资源 二、特点 全双工 通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合 例如指 A→B 的同时 B→A ，是瞬时同步的 二进制帧 采用了二进制帧结构，语法、语义与 HTTP 完全不兼容，相比http/2，WebSocket更侧重于“实时通信”，而HTTP/2 更侧重于提高传输效率，所以两者的帧结构也有很大的区别 不像 HTTP/2 那样定义流，也就不存在多路复用、优先级等特性 自身就是全双工，也不需要服务器推送 协议名 引入ws和wss分别代表明文和密文的websocket协议，且默认端口使用80或443，几乎与http一致 ws://www.chrono.com ws://www.chrono.com:8080/srv wss://www.chrono.com:445/im?user_id=xxx 握手 WebSocket也要有一个握手过程，然后才能正式收发数据 客户端发送数据格式如下： GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version: 13 Connection：必须设置Upgrade，表示客户端希望连接升级 Upgrade：必须设置Websocket，表示希望升级到Websocket协议 Sec-WebSocket-Key：客户端发送的一个 base64 编码的密文，用于简单的认证秘钥。要求服务端必须返回一个对应加密的“Sec-WebSocket-Accept应答，否则客户端会抛出错误，并关闭连接 Sec-WebSocket-Version ：表示支持的Websocket版本 服务端返回的数据格式： HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=Sec-WebSocket-Protocol: chat HTTP/1.1 101 Switching Protocols：表示服务端接受 WebSocket 协议的客户端连接 Sec-WebSocket-Accep：验证客户端请求报文，同样也是为了防止误连接。具体做法是把请求头里“Sec-WebSocket-Key”的值，加上一个专用的 UUID，再计算摘要 优点 较少的控制开销：数据包头部协议较小，不同于http每次请求需要携带完整的头部 更强的实时性：相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少 保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证 更好的二进制支持：定义了二进制帧，更好处理二进制内容 支持扩展：用户可以扩展websocket协议、实现部分自定义的子协议 更好的压缩效果：Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率 二、应用场景 基于websocket的事实通信的特点，其存在的应用场景大概有： 弹幕 媒体聊天 协同编辑 基于位置的应用 体育实况更新 股票基金报价实时更新 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/after_url.html":{"url":"http/after_url.html","title":"地址栏输入 URL 敲下回车后发生了什么","keywords":"","body":"面试官：说说地址栏输入 URL 敲下回车后发生了什么? 一、简单分析 简单的分析，从输入 URL到回车后发生的行为如下： URL解析 DNS 查询 TCP 连接 HTTP 请求 响应请求 页面渲染 二、详细分析 URL解析 首先判断你输入的是一个合法的URL 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作 URL的解析第过程中的第一步，一个url的结构解析如下： DNS查询 在之前文章中讲过DNS的查询，这里就不再讲述了 整个查询过程如下图所示： 最终，获取到了域名对应的目标服务器IP地址 TCP连接 在之前文章中，了解到tcp是一种面向有连接的传输层协议 在确定目标服务器服务器的IP地址后，则经历三次握手建立TCP连接，流程如下： 发送 http 请求 当建立tcp连接之后，就可以在这基础上进行通信，浏览器发送 http 请求到目标服务器 请求的内容包括： 请求行 请求头 请求主体 响应请求 当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，包括： 状态行 响应头 响应正文 在服务器响应之后，由于现在http默认开始长连接keep-alive，当页面关闭之后，tcp链接则会经过四次挥手完成断开 页面渲染 当浏览器接收到服务器响应的资源后，首先会对资源进行解析： 查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储cookie，解压gzip，缓存资源等等 查看响应头的 Content-Type的值，根据不同的资源类型采用不同的解析方式 关于页面的渲染过程如下： 解析HTML，构建 DOM 树 解析 CSS ，生成 CSS 规则树 合并 DOM 树和 CSS 规则，生成 render 树 布局 render 树（ Layout / reflow ），负责各元素尺寸、位置的计算 绘制 render 树（ paint ），绘制页面像素信息 浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/handshakes_waves.html":{"url":"http/handshakes_waves.html","title":"TCP为什么需要三次握手和四次挥手","keywords":"","body":"面试官：说说TCP为什么需要三次握手和四次挥手？ 一、三次握手 三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包 主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备 过程如下： 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 SYN_SENT 状态 第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1作为ACK的值，此时服务器处于 SYN_RCVD 的状态 第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接 上述每一次握手的作用如下： 第一次握手：客户端发送网络包，服务端收到了 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。 第二次握手：服务端发包，客户端收到了 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常 第三次握手：客户端发包，服务端收到了。 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常 通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了 为什么不是两次握手? 如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到 并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源 二、四次挥手 tcp终止一个连接，需要经过四次挥手 过程如下： 第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认 第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态 第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态 第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态 四次挥手原因 服务端在收到客户端断开连接Fin报文后，并不会立即关闭连接，而是先发送一个ACK包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送FIN报文断开连接，因此需要四次挥手 三、总结 一个完整的三次握手四次挥手如下图所示： 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/headers.html":{"url":"http/headers.html","title":"TTP 常见的请求头有哪些","keywords":"","body":"面试官：说说 HTTP 常见的请求头有哪些? 作用？ 一、是什么 HTTP头字段（HTTP header fields）,是指在超文本传输协议（HTTP）的请求和响应消息中的消息头部分 它们定义了一个超文本传输协议事务中的操作参数 HTTP头部字段可以自己根据需要定义，因此可能在 Web服务器和浏览器上发现非标准的头字段 下面是一个HTTP请求的请求头： GET /home.html HTTP/1.1 Host: developer.mozilla.org User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: https://developer.mozilla.org/testpage.html Connection: keep-alive Upgrade-Insecure-Requests: 1 If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT If-None-Match: \"c561c68d0ba92bbeb8b0fff2a9199f722e3a621a\" Cache-Control: max-age=0 二、分类 常见的请求字段如下表所示： 字段名 说明 示例 Accept 能够接受的回应内容类型（Content-Types） Accept: text/plain Accept-Charset 能够接受的字符集 Accept-Charset: utf-8 Accept-Encoding 能够接受的编码方式列表 Accept-Encoding: gzip, deflate Accept-Language 能够接受的回应内容的自然语言列表 Accept-Language: en-US Authorization 用于超文本传输协议的认证的认证信息 Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== Cache-Control 用来指定在这次的请求/响应链中的所有缓存机制 都必须 遵守的指令 Cache-Control: no-cache Connection 该浏览器想要优先使用的连接类型 Connection: keep-alive Connection: Upgrade Cookie 服务器通过 Set- Cookie （下文详述）发送的一个 超文本传输协议Cookie Cookie: $Version=1; Skin=new; Content-Length 以 八位字节数组 （8位的字节）表示的请求体的长度 Content-Length: 348 Content-Type 请求体的 多媒体类型 Content-Type: application/x-www-form-urlencoded Date 发送该消息的日期和时间 Date: Tue, 15 Nov 1994 08:12:31 GMT Expect 表明客户端要求服务器做出特定的行为 Expect: 100-continue Host 服务器的域名(用于虚拟主机 )，以及服务器所监听的传输控制协议端口号 Host: en.wikipedia.org:80 Host: en.wikipedia.org If-Match 仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要作用时，用作像 PUT 这样的方法中，仅当从用户上次更新某个资源以来，该资源未被修改的情况下，才更新该资源 If-Match: \"737060cd8c284d8af7ad3082f209582d\" If-Modified-Since 允许在对应的内容未被修改的情况下返回304未修改 If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT If-None-Match 允许在对应的内容未被修改的情况下返回304未修改 If-None-Match: \"737060cd8c284d8af7ad3082f209582d\" If-Range 如果该实体未被修改过，则向我发送我所缺少的那一个或多个部分；否则，发送整个新的实体 If-Range: \"737060cd8c284d8af7ad3082f209582d\" Range 仅请求某个实体的一部分 Range: bytes=500-999 User-Agent 浏览器的浏览器身份标识字符串 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0 Origin 发起一个针对 跨来源资源共享 的请求 Origin: http://www.example-social-network.com 三、使用场景 通过配合请求头和响应头，可以满足一些场景的功能实现： 协商缓存 协商缓存是利用的是【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对请求头响应头来管理的 Last-Modified 表示本地文件最后修改日期，浏览器会在request header加上If-Modified-Since（上次返回的Last-Modified的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来 Etag就像一个指纹，资源变化都会导致ETag变化，跟最后修改时间没有关系，ETag可以保证每一个资源是唯一的 If-None-Match的header会将上次返回的Etag发送给服务器，询问该资源的Etag是否有更新，有变动就会发送新的资源回来 而强制缓存不需要发送请求到服务端，根据请求头expires和cache-control判断是否命中强缓存 强制缓存与协商缓存的流程图如下所示： 会话状态 cookie，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据，通过响应头set-cookie决定 作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie有效期、安全性、使用范围的可选属性组成 Cookie 主要用于以下三个方面： 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"http/status.html":{"url":"http/status.html","title":"HTTP 常见的状态码有哪些","keywords":"","body":"面试官：说说HTTP 常见的状态码有哪些，适用场景？ 一、是什么 HTTP状态码（英语：HTTP Status Code），用以表示网页服务器超文本传输协议响应状态的3位数字代码 它由 RFC 2616规范定义的，并得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774与 RFC 4918等规范扩展 简单来讲，http状态码的作用是服务器告诉客户端当前请求响应的状态，通过状态码就能判断和分析服务器的运行状态 二、分类 状态码第一位数字决定了不同的响应状态，有如下： 1 表示消息 2 表示成功 3 表示重定向 4 表示请求错误 5 表示服务器错误 1xx 代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束 常见的有： 100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应 101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级 2xx 代表请求已成功被服务器接收、理解、并接受 常见的有： 200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回 201（已创建）：请求成功并且服务器创建了新的资源 202（已创建）：服务器已经接收请求，但尚未处理 203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源 204（无内容）：服务器成功处理请求，但没有返回任何内容 205（重置内容）：服务器成功处理请求，但没有返回任何内容 206（部分内容）：服务器成功处理了部分请求 3xx 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向 常见的有： 300（多种选择）：针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择 301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置 302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求 303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码 305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理 307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求 4xx 代表了客户端看起来可能发生了错误，妨碍了服务器的处理 常见的有： 400（错误请求）： 服务器不理解请求的语法 401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 403（禁止）： 服务器拒绝请求 404（未找到）： 服务器找不到请求的网页 405（方法禁用）： 禁用请求中指定的方法 406（不接受）： 无法使用请求的内容特性响应请求的网页 407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理 408（请求超时）： 服务器等候请求时发生超时 5xx 表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生 常见的有： 500（服务器内部错误）：服务器遇到错误，无法完成请求 501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码 502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应 503（服务不可用）： 服务器目前无法使用（由于超载或停机维护） 504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求 505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本 三、适用场景 下面给出一些状态码的适用场景： 100：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输 206：一般用来做断点续传，或者是视频文件等大文件的加载 301：永久重定向会缓存。新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名 302：临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面 304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分 400：参数有误，请求无法被服务器识别 403：告诉客户端进制访问该站点或者资源，如在外网环境下，然后访问只有内网IP才能访问的时候则返回 404：服务器找不到资源时，或者服务器拒绝请求又不想说明理由时 503：服务器停机维护时，主动用503响应请求或 nginx 设置限速，超过限速，会返回503 504：网关超时 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"nodeJS/fs.html":{"url":"nodeJS/fs.html","title":"Node 中的 fs模块的理解","keywords":"","body":"面试官：说说对 Node 中的 fs模块的理解? 有哪些常用方法 一、是什么 fs（filesystem），该模块提供本地文件的读写能力，基本上是POSIX文件操作命令的简单包装 可以说，所有与文件的操作都是通过fs核心模块实现 导入模块如下： const fs = require('fs'); 这个模块对所有文件系统操作提供异步（不具有sync 后缀）和同步（具有 sync 后缀）两种操作方式，而供开发者选择 二、文件知识 在计算机中有关于文件的知识： 权限位 mode 标识位 flag 文件描述为 fd 权限位 mode 针对文件所有者、文件所属组、其他用户进行权限分配，其中类型又分成读、写和执行，具备权限位4、2、1，不具备权限为0 如在linux查看文件权限位： drwxr-xr-x 1 PandaShen 197121 0 Jun 28 14:41 core -rw-r--r-- 1 PandaShen 197121 293 Jun 23 17:44 index.md 在开头前十位中，d为文件夹，-为文件，后九位就代表当前用户、用户所属组和其他用户的权限位，按每三位划分，分别代表读（r）、写（w）和执行（x），- 代表没有当前位对应的权限 标识位 标识位代表着对文件的操作方式，如可读、可写、即可读又可写等等，如下表所示： 符号 含义 r 读取文件，如果文件不存在则抛出异常。 r+ 读取并写入文件，如果文件不存在则抛出异常。 rs 读取并写入文件，指示操作系统绕开本地文件系统缓存。 w 写入文件，文件不存在会被创建，存在则清空后写入。 wx 写入文件，排它方式打开。 w+ 读取并写入文件，文件不存在则创建文件，存在则清空后写入。 wx+ 和 w+ 类似，排他方式打开。 a 追加写入，文件不存在则创建文件。 ax 与 a 类似，排他方式打开。 a+ 读取并追加写入，不存在则创建。 ax+ 与 a+ 类似，排他方式打开。 文件描述为 fd 操作系统会为每个打开的文件分配一个名为文件描述符的数值标识，文件操作使用这些文件描述符来识别与追踪每个特定的文件 Window系统使用了一个不同但概念类似的机制来追踪资源，为方便用户，NodeJS抽象了不同操作系统间的差异，为所有打开的文件分配了数值的文件描述符 在 NodeJS中，每操作一个文件，文件描述符是递增的，文件描述符一般从 3 开始，因为前面有 0、1、2三个比较特殊的描述符，分别代表 process.stdin（标准输入）、process.stdout（标准输出）和 process.stderr（错误输出） 三、方法 下面针对fs模块常用的方法进行展开： 文件读取 文件写入 文件追加写入 文件拷贝 创建目录 文件读取 fs.readFileSync 同步读取，参数如下： 第一个参数为读取文件的路径或文件描述符 第二个参数为 options，默认值为 null，其中有 encoding（编码，默认为 null）和 flag（标识位，默认为 r），也可直接传入 encoding 结果为返回文件的内容 const fs = require(\"fs\"); let buf = fs.readFileSync(\"1.txt\"); let data = fs.readFileSync(\"1.txt\", \"utf8\"); console.log(buf); // console.log(data); // Hello fs.readFile 异步读取方法 readFile 与 readFileSync 的前两个参数相同，最后一个参数为回调函数，函数内有两个参数 err（错误）和 data（数据），该方法没有返回值，回调函数在读取文件成功后执行 const fs = require(\"fs\"); fs.readFile(\"1.txt\", \"utf8\", (err, data) => { if(!err){ console.log(data); // Hello } }); 文件写入 writeFileSync 同步写入，有三个参数： 第一个参数为写入文件的路径或文件描述符 第二个参数为写入的数据，类型为 String 或 Buffer 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 w）和 mode（权限位，默认为 0o666），也可直接传入 encoding const fs = require(\"fs\"); fs.writeFileSync(\"2.txt\", \"Hello world\"); let data = fs.readFileSync(\"2.txt\", \"utf8\"); console.log(data); // Hello world writeFile 异步写入，writeFile 与 writeFileSync 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 err（错误），回调函数在文件写入数据成功后执行 const fs = require(\"fs\"); fs.writeFile(\"2.txt\", \"Hello world\", err => { if (!err) { fs.readFile(\"2.txt\", \"utf8\", (err, data) => { console.log(data); // Hello world }); } }); 文件追加写入 appendFileSync 参数如下： 第一个参数为写入文件的路径或文件描述符 第二个参数为写入的数据，类型为 String 或 Buffer 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 a）和 mode（权限位，默认为 0o666），也可直接传入 encoding const fs = require(\"fs\"); fs.appendFileSync(\"3.txt\", \" world\"); let data = fs.readFileSync(\"3.txt\", \"utf8\"); appendFile 异步追加写入方法 appendFile 与 appendFileSync 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 err（错误），回调函数在文件追加写入数据成功后执行 const fs = require(\"fs\"); fs.appendFile(\"3.txt\", \" world\", err => { if (!err) { fs.readFile(\"3.txt\", \"utf8\", (err, data) => { console.log(data); // Hello world }); } }); 文件拷贝 copyFileSync 同步拷贝 const fs = require(\"fs\"); fs.copyFileSync(\"3.txt\", \"4.txt\"); let data = fs.readFileSync(\"4.txt\", \"utf8\"); console.log(data); // Hello world copyFile 异步拷贝 const fs = require(\"fs\"); fs.copyFile(\"3.txt\", \"4.txt\", () => { fs.readFile(\"4.txt\", \"utf8\", (err, data) => { console.log(data); // Hello world }); }); 创建目录 mkdirSync 同步创建，参数为一个目录的路径，没有返回值，在创建目录的过程中，必须保证传入的路径前面的文件目录都存在，否则会抛出异常 // 假设已经有了 a 文件夹和 a 下的 b 文件夹 fs.mkdirSync(\"a/b/c\") mkdir 异步创建，第二个参数为回调函数 fs.mkdir(\"a/b/c\", err => { if (!err) console.log(\"创建成功\"); }); 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"nodeJS/global.html":{"url":"nodeJS/global.html","title":"Node. js 有哪些全局对象","keywords":"","body":"面试官：说说 Node. js 有哪些全局对象？ 一、是什么 在浏览器 JavaScript 中，通常window 是全局对象， 而 Nodejs中的全局对象是 global 在NodeJS里，是不可能在最外层定义一个变量，因为所有的用户代码都是当前模块的，只在当前模块里可用，但可以通过exports对象的使用将其传递给模块外部 所以，在NodeJS中，用var声明的变量并不属于全局的变量，只在当前模块生效 像上述的global全局对象则在全局作用域中，任何全局变量、函数、对象都是该对象的一个属性值 二、有哪些 将全局对象分成两类： 真正的全局对象 模块级别的全局变量 真正的全局对象 下面给出一些常见的全局对象： Class:Buffer process console clearInterval、setInterval clearTimeout、setTimeout global Class:Buffer 可以处理二进制以及非Unicode编码的数据 在Buffer类实例化中存储了原始数据。Buffer类似于一个整数数组，在V8堆原始存储空间给它分配了内存 一旦创建了Buffer实例，则无法改变大小 process 进程对象，提供有关当前过程的信息和控制 包括在执行node程序的过程中，如果需要传递参数，我们想要获取这个参数需要在process内置对象中 启动进程： node index.js 参数1 参数2 参数3 index.js文件如下： process.argv.forEach((val, index) => { console.log(`${index}: ${val}`); }); 输出如下： /usr/local/bin/node /Users/mjr/work/node/process-args.js 参数1 参数2 参数3 除此之外，还包括一些其他信息如版本、操作系统等 console 用来打印stdout和stderr 最常用的输入内容的方式：console.log console.log(\"hello\"); 清空控制台：console.clear console.clear 打印函数的调用栈：console.trace function test() { demo(); } function demo() { foo(); } function foo() { console.trace(); } test(); clearInterval、setInterval 设置定时器与清除定时器 setInterval(callback, delay[, ...args]) callback每delay毫秒重复执行一次 clearInterval则为对应发取消定时器的方法 clearTimeout、setTimeout 设置延时器与清除延时器 setTimeout(callback,delay[,...args]) callback在delay毫秒后执行一次 clearTimeout则为对应取消延时器的方法 global 全局命名空间对象，墙面讲到的process、console、setTimeout等都有放到global中 console.log(process === global.process) // true 模块级别的全局对象 这些全局对象是模块中的变量，只是每个模块都有，看起来就像全局变量，像在命令交互中是不可以使用，包括： __dirname __filename exports module require __dirname 获取当前文件所在的路径，不包括后面的文件名 从 /Users/mjr 运行 node example.js： console.log(__dirname); // 打印: /Users/mjr __filename 获取当前文件所在的路径和文件名称，包括后面的文件名称 从 /Users/mjr 运行 node example.js： console.log(__filename); // 打印: /Users/mjr/example.js exports module.exports 用于指定一个模块所导出的内容，即可以通过 require() 访问的内容 exports.name = name; exports.age = age; exports.sayHello = sayHello; module 对当前模块的引用，通过module.exports 用于指定一个模块所导出的内容，即可以通过 require() 访问的内容 require 用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块。 可以使用相对路径引入本地模块或JSON文件，路径会根据__dirname定义的目录名或当前工作目录进行处理 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"nodeJS/nodejs.html":{"url":"nodeJS/nodejs.html","title":"Node.js 的理解？优缺点？应用场景","keywords":"","body":"面试官：说说你对Node.js 的理解？优缺点？应用场景？ 一、是什么 Node.js 是一个开源与跨平台的 JavaScript 运行时环境 在浏览器外运行 V8 JavaScript 引擎（Google Chrome 的内核），利用事件驱动、非阻塞和异步输入输出模型等技术提高性能 可以理解为 Node.js 就是一个服务器端的、非阻塞式I/O的、事件驱动的JavaScript运行环境 非阻塞异步 Nodejs采用了非阻塞型I/O机制，在做I/O操作的时候不会造成任何的阻塞，当完成之后，以时间的形式通知执行操作 例如在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率 事件驱动 事件驱动就是当进来一个新的请求的时，请求将会被压入一个事件队列中，然后通过一个循环来检测队列中的事件状态变化，如果检测到有状态变化的事件，那么就执行该事件对应的处理代码，一般都是回调函数 比如读取一个文件，文件读取完毕后，就会触发对应的状态，然后通过对应的回调函数来进行处理 二、优缺点 优点： 处理高并发场景性能更佳 适合I/O密集型应用，值的是应用在运行极限时，CPU占用率仍然比较低，大部分时间是在做 I/O硬盘内存读写操作 因为Nodejs是单线程，带来的缺点有： 不适合CPU密集型应用 只支持单核CPU，不能充分利用CPU 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃 三、应用场景 借助Nodejs的特点和弊端，其应用场景分类如下： 善于I/O，不善于计算。因为Nodejs是一个单线程，如果计算（同步）太多，则会阻塞这个线程 大量并发的I/O，应用程序内部并不需要进行非常复杂的处理 与 websocket 配合，开发长连接的实时交互应用程序 具体场景可以表现为如下： 第一大类：用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的web应用程序 第二大类：基于web、canvas等多人联网游戏 第三大类：基于web的多人实时聊天客户端、聊天室、图文直播 第四大类：单页面浏览器应用程序 第五大类：操作数据库、为前端和移动端提供基于json的API 其实，Nodejs能实现几乎一切的应用，只考虑适不适合使用它 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"nodeJS/process.html":{"url":"nodeJS/process.html","title":"Node 中的 process 的理解","keywords":"","body":"面试官：说说对 Node 中的 process 的理解？有哪些常用方法？ 一、是什么 process 对象是一个全局变量，提供了有关当前 Node.js进程的信息并对其进行控制，作为一个全局变量 我们都知道，进程计算机系统进行资源分配和调度的基本单位，是操作系统结构的基础，是线程的容器 当我们启动一个js文件，实际就是开启了一个服务进程，每个进程都拥有自己的独立空间地址、数据栈，像另一个进程无法访问当前进程的变量、数据结构，只有数据通信后，进程之间才可以数据共享 由于JavaScript是一个单线程语言，所以通过node xxx启动一个文件后，只有一条主线程 二、属性与方法 关于process常见的属性有如下： process.env：环境变量，例如通过 `process.env.NODE_ENV 获取不同环境项目配置信息 process.nextTick：这个在谈及 EventLoop 时经常为会提到 process.pid：获取当前进程id process.ppid：当前进程对应的父进程 process.cwd()：获取当前进程工作目录， process.platform：获取当前进程运行的操作系统平台 process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值 进程事件： process.on(‘uncaughtException’,cb) 捕获异常信息、 process.on(‘exit’,cb）进程推出监听 三个标准流： process.stdout 标准输出、 process.stdin 标准输入、 process.stderr 标准错误输出 process.title 指定进程名称，有的时候需要给进程指定一个名称 下面再稍微介绍下某些方法的使用： process.cwd() 返回当前 Node进程执行的目录 一个Node 模块 A 通过 NPM 发布，项目 B 中使用了模块 A。在 A 中需要操作 B 项目下的文件时，就可以用 process.cwd() 来获取 B 项目的路径 process.argv 在终端通过 Node 执行命令的时候，通过 process.argv 可以获取传入的命令行参数，返回值是一个数组： 0: Node 路径（一般用不到，直接忽略） 1: 被执行的 JS 文件路径（一般用不到，直接忽略） 2~n: 真实传入命令的参数 所以，我们只要从 process.argv[2] 开始获取就好了 const args = process.argv.slice(2); process.env 返回一个对象，存储当前环境相关的所有信息，一般很少直接用到。 一般我们会在 process.env 上挂载一些变量标识当前的环境。比如最常见的用 process.env.NODE_ENV 区分 development 和 production 在 vue-cli 的源码中也经常会看到 process.env.VUE_CLI_DEBUG 标识当前是不是 DEBUG 模式 process.nextTick() 我们知道NodeJs是基于事件轮询，在这个过程中，同一时间只会处理一件事情 在这种处理模式下，process.nextTick()就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行 例如下面例子将一个foo函数在下一个时间点调用 function foo() { console.error('foo'); } process.nextTick(foo); console.error('bar'); 输出结果为bar、foo 虽然下述方式也能实现同样效果： setTimeout(foo, 0); console.log('bar'); 两者区别在于： process.nextTick()会在这一次event loop的call stack清空后（下一次event loop开始前）再调用callback setTimeout()是并不知道什么时候call stack清空的，所以何时调用callback函数是不确定的 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/vue.html":{"url":"vue/vue.html","title":"对Vue的理解","keywords":"","body":"面试官：有使用过vue吗？说说你对vue的理解 一、从历史说起 Web是World Wide Web的简称，中文译为万维网我们可以将它规划成如下的几个时代来进行理解 石器时代 文明时代 工业革命时代 百花齐放时代 石器时代 石器时代指的就是我们的静态网页，可以欣赏一下1997的Apple官网 最早的网页是没有数据库的，可以理解成就是一张可以在网络上浏览的报纸，直到CGI技术的出现通过 CGI Perl 运行一小段代码与数据库或文件系统进行交互，如当时的Google（1998年） 文明时代 ASP，JSP大家应该都不会太陌生，最早出现于 2005 年左右，先后出现了微软的 ASP 和 Java Server Pages [JSP] 等技术,取代了 CGI ，增强了 WEB 与服务端的交互的安全性，类似于下面这样，其实就是Java + HTML ` pageEncoding=\"utf-8\"%> JSP demo ` JSP有一个很大的缺点，就是不太灵活，因为JSP是在服务器端执行的，通常返回该客户端的就是一个HTML文本。我们每次的请求：获取的数据、内容的加载，都是服务器为我们返回渲染完成之后的 DOM，这也就使得我们开发网站的灵活度大打折扣在这种情况下，同年：Ajax火了(小细节，这里为什么说火了，因为 Ajax 技术并不是 2005 年出现的，他的雏形是 1999 年)，现在看来很常见的技术手段，在当时可是珍贵无比 工业革命时代 到这里大家就更熟悉了，移动设备的普及，Jquery的出现，以及SPA（Single Page Application 单页面应用）的雏形，Backbone EmberJS AngularJS 这样一批前端框架随之出现，但当时SPA的路不好走，例如SEO问题，SPA 过多的页面、复杂场景下 View 的绑定等，都没有很好的处理经过这几年的飞速发展，节约了开发人员大量的精力、降低了开发者和开发过程的门槛，极大提升了开发效率和迭代速度，我们可以称之其为工业时代 百花齐放时代 这里没有文字，放一张图感受一下 PS：这里为什么要说这么多Web的历史，我们可以看到Web技术的变化之大与快，每一种新的技术出现都是一些特定场景的解决方案，那我们今天的主角Vue又是为了解决什么呢？我们接着往下看 二、vue是什么 Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。2016年一项针对JavaScript的调查表明，Vue有着89\\%的开发者满意度。在GitHub上，该项目平均每天能收获95颗星，为Github有史以来星标数第3多的项目同时也是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互PS: Vue作者尤雨溪是在为AngularJS工作之后开发出了这一框架。他声称自己的思路是提取Angular中为自己所喜欢的部分，构建出一款相当轻量的框架最早发布于2014年2月 三、Vue核心特性 数据驱动（MVVM) MVVM表示的是 Model-View-ViewModel Model：模型层，负责处理业务逻辑以及和服务器端进行交互 View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面 ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁 这时候需要一张直观的关系图，如下 组件化 1.什么是组件化一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在Vue中每一个.vue文件都可以视为一个组件2.组件化的优势 降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现 调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级 指令系统 解释：指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM 常用的指令 条件渲染指令 v-if 列表渲染指令v-for 属性绑定指令v-bind 事件绑定指令v-on 双向数据绑定指令v-model 没有指令之前我们是怎么做的？是不是先要获取到DOM然后在....干点啥 四、Vue跟传统开发的区别 没有落地使用场景的革命不是好革命，就以一个高频的应用场景来示意吧注册账号这个需求大家应该很熟悉了，如下 用jquery来实现大概的思路就是选择流程dom对象，点击按钮隐藏当前活动流程dom对象，显示下一流程dom对象如下图(代码就不上了，上了就篇文章就没了..) 用vue来实现，我们知道vue基本不操作dom节点， 双向绑定使dom节点跟视图绑定后，通过修改变量的值控制dom节点的各类属性。所以其实现思路为：视图层使用一变量控制dom节点显示与否，点击按钮则改变该变量，如下图 总结就是： Vue所有的界面事件，都是只去操作数据的，Jquery操作DOM Vue所有界面的变动，都是根据数据自动绑定出来的，Jquery操作DOM 五、Vue和React对比 这里就做几个简单的类比吧，当然没有好坏之分，只是使用场景不同 相同点 都有组件化思想 都支持服务器端渲染 都有Virtual DOM（虚拟dom） 数据驱动视图 都有支持native的方案：Vue的weex、React的React native 都有自己的构建工具：Vue的vue-cli、React的Create React App 区别 数据流向的不同。react从诞生开始就推崇单向数据流，而Vue是双向数据流 数据变化的实现原理不同。react使用的是不可变数据，而Vue使用的是可变的数据 组件化通信的不同。react中我们通过使用回调函数来进行通信的，而Vue中子组件向父组件传递消息有两种方式：事件和回调函数 diff算法不同。react主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。Vue 使用双向指针，边对比，边更新DOM 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/vue3_vue2.html":{"url":"vue/vue3_vue2.html","title":"Vue2和vue3的区别","keywords":"","body":"面试官：vue3有了解过吗？能说说跟vue2的区别吗？ 一、Vue3介绍 关于vue3的重构背景，尤大是这样说的： 「Vue 新版本的理念成型于 2018 年末，当时 Vue 2 的代码库已经有两岁半了。比起通用软件的生命周期来这好像也没那么久，但在这段时期，前端世界已经今昔非比了 在我们更新（和重写）Vue 的主要版本时，主要考虑两点因素：首先是新的 JavaScript 语言特性在主流浏览器中的受支持水平；其次是当前代码库中随时间推移而逐渐暴露出来的一些设计和架构问题」 简要就是： 利用新的语言特性(es6) 解决架构问题 哪些变化 从上图中，我们可以概览Vue3的新特性，如下： 速度更快 体积减少 更易维护 更接近原生 更易使用 速度更快 vue3相比vue2 重写了虚拟Dom实现 编译模板的优化 更高效的组件初始化 undate性能提高1.3~2倍 SSR速度提高了2~3倍 体积更小 通过webpack的tree-shaking功能，可以将无用模块“剪辑”，仅打包需要的 能够tree-shaking，有两大好处： 对开发人员，能够对vue实现更多其他的功能，而不必担忧整体体积过大 对使用者，打包出来的包体积变小了 vue可以开发出更多其他的功能，而不必担忧vue打包出来的整体体积过多 更易维护 compositon Api 可与现有的Options API一起使用 灵活的逻辑组合与复用 Vue3模块可以和其他框架搭配使用 更好的Typescript支持 VUE3是基于typescipt编写的，可以享受到自动的类型定义提示 编译器重写 更接近原生 可以自定义渲染 API 更易使用 响应式 Api 暴露出来 轻松识别组件重新渲染原因 二、Vue3新增特性 Vue 3 中需要关注的一些新功能包括： framents Teleport composition Api createRenderer framents 在 Vue3.x 中，组件现在支持有多个根节点 ... ... ... Teleport Teleport 是一种能够将我们的模板移动到 DOM 中 Vue app 之外的其他位置的技术，就有点像哆啦A梦的“任意门” 在vue2中，像 modals,toast 等这样的元素，如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位、z-index 和样式就会变得很困难 通过Teleport，我们可以在组件的逻辑位置写模板代码，然后在 Vue 应用范围之外渲染它 打开 toast 我是一个 Toast 文案 createRenderer 通过createRenderer，我们能够构建自定义渲染器，我们能够将 vue 的开发模型扩展到其他平台 我们可以将其生成在canvas画布上 关于createRenderer，我们了解下基本使用，就不展开讲述了 import { createRenderer } from '@vue/runtime-core' const { render, createApp } = createRenderer({ patchProp, insert, remove, createElement, // ... }) export { render, createApp } export * from '@vue/runtime-core' composition Api composition Api，也就是组合式api，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理 关于compositon api的使用，这里以下图展开 简单使用: export default { setup() { const count = ref(0) const double = computed(() => count.value * 2) function increment() { count.value++ } onMounted(() => console.log('component mounted!')) return { count, double, increment } } } 三、非兼容变更 Global API 全局 Vue API 已更改为使用应用程序实例 全局和内部 API 已经被重构为可 tree-shakable 模板指令 组件上 v-model 用法已更改 和 非 v-for节点上key用法已更改 在同一元素上使用的 v-if 和 v-for 优先级已更改 v-bind=\"object\" 现在排序敏感 v-for 中的 ref 不再注册 ref 数组 组件 只能使用普通函数创建功能组件 functional 属性在单文件组件 (SFC) 异步组件现在需要 defineAsyncComponent 方法来创建 渲染函数 渲染函数API改变 $scopedSlots property 已删除，所有插槽都通过 $slots 作为函数暴露 自定义指令 API 已更改为与组件生命周期一致 一些转换 class 被重命名了： v-enter -> v-enter-from v-leave -> v-leave-from 组件 watch 选项和实例方法 $watch不再支持点分隔字符串路径，请改用计算函数作为参数 在 Vue 2.x 中，应用根容器的 outerHTML 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。VUE3.x 现在使用应用程序容器的 innerHTML。 其他小改变 destroyed 生命周期选项被重命名为 unmounted beforeDestroy 生命周期选项被重命名为 beforeUnmount [prop default工厂函数不再有权访问 this 是上下文 自定义指令 API 已更改为与组件生命周期一致 data 应始终声明为函数 来自 mixin 的 data 选项现在可简单地合并 attribute 强制策略已更改 一些过渡 class 被重命名 组建 watch 选项和实例方法 $watch不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。 没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 现在被视为普通元素，并将生成原生的 元素，而不是渲染其内部内容。 在Vue 2.x 中，应用根容器的 outerHTML 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 innerHTML，这意味着容器本身不再被视为模板的一部分。 移除 API keyCode 支持作为 v-on 的修饰符 $on，$off和$once 实例方法 过滤filter 内联模板 attribute $destroy 实例方法。用户不应再手动管理单个Vue 组件的生命周期。 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/vnode.html":{"url":"vue/vnode.html","title":"什么是虚拟DOM","keywords":"","body":"面试官：什么是虚拟DOM？如何实现一个虚拟DOM？说说你的思路 一、什么是虚拟DOM 虚拟 DOM （Virtual DOM ）这个概念相信大家都不陌生，从 React 到 Vue ，虚拟 DOM 为这两个框架都带来了跨平台的能力（React-Native 和 Weex） 实际上它只是一层对真实DOM的抽象，以JavaScript 对象 (VNode 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上 在Javascript对象中，虚拟DOM 表现为一个 Object对象。并且最少包含标签名 (tag)、属性 (attrs) 和子元素对象 (children) 三个属性，不同框架对这三个属性的名命可能会有差别 创建虚拟DOM就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟DOM对象的节点与真实DOM的属性一一照应 在vue中同样使用到了虚拟DOM技术 定义真实DOM 节点内容 实例化vue const app = new Vue({ el:\"#app\", data:{ foo:\"foo\" } }) 观察render的render，我们能得到虚拟DOM (function anonymous( ) { with(this){return _c('div',{attrs:{\"id\":\"app\"}},[_c('p',{staticClass:\"p\"}, [_v(\"节点内容\")]),_v(\" \"),_c('h3',[_v(_s(foo))])])}}) 通过VNode，vue可以对这颗抽象树进行创建节点,删除节点以及修改节点的操作， 经过diff算法得出一些需要修改的最小单位,再更新视图，减少了dom操作，提高了性能 二、为什么需要虚拟DOM DOM是很慢的，其元素非常庞大，页面的性能问题，大部分都是由DOM操作引起的 真实的DOM节点，哪怕一个最简单的div也包含着很多属性，可以打印出来直观感受一下： 由此可见，操作DOM的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验 举个例子： 你用传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程 当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程 而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算 很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种GUI 三、如何实现虚拟DOM 首先可以看看vue中VNode的结构 源码位置：src/core/vdom/vnode.js export default class VNode { tag: string | void; data: VNodeData | void; children: ?Array; text: string | void; elm: Node | void; ns: string | void; context: Component | void; // rendered in this component's scope functionalContext: Component | void; // only for functional component root nodes key: string | number | void; componentOptions: VNodeComponentOptions | void; componentInstance: Component | void; // component instance parent: VNode | void; // component placeholder node raw: boolean; // contains raw HTML? (server only) isStatic: boolean; // hoisted static node isRootInsert: boolean; // necessary for enter transition check isComment: boolean; // empty comment placeholder? isCloned: boolean; // is a cloned node? isOnce: boolean; // is a v-once node? constructor ( tag?: string, data?: VNodeData, children?: ?Array, text?: string, elm?: Node, context?: Component, componentOptions?: VNodeComponentOptions ) { /*当前节点的标签名*/ this.tag = tag /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/ this.data = data /*当前节点的子节点，是一个数组*/ this.children = children /*当前节点的文本*/ this.text = text /*当前虚拟节点对应的真实dom节点*/ this.elm = elm /*当前节点的名字空间*/ this.ns = undefined /*编译作用域*/ this.context = context /*函数化组件作用域*/ this.functionalContext = undefined /*节点的key属性，被当作节点的标志，用以优化*/ this.key = data && data.key /*组件的option选项*/ this.componentOptions = componentOptions /*当前节点对应的组件的实例*/ this.componentInstance = undefined /*当前节点的父节点*/ this.parent = undefined /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/ this.raw = false /*静态节点标志*/ this.isStatic = false /*是否作为跟节点插入*/ this.isRootInsert = true /*是否为注释节点*/ this.isComment = false /*是否为克隆节点*/ this.isCloned = false /*是否有v-once指令*/ this.isOnce = false } // DEPRECATED: alias for componentInstance for backwards compat. /* istanbul ignore next https://github.com/answershuto/learnVue*/ get child (): Component | void { return this.componentInstance } } 这里对VNode进行稍微的说明： 所有对象的 context 选项都指向了 Vue 实例 elm 属性则指向了其相对应的真实 DOM 节点 vue是通过createElement生成VNode 源码位置：src/core/vdom/create-element.js export function createElement ( context: Component, tag: any, data: any, children: any, normalizationType: any, alwaysNormalize: boolean ): VNode | Array { if (Array.isArray(data) || isPrimitive(data)) { normalizationType = children children = data data = undefined } if (isTrue(alwaysNormalize)) { normalizationType = ALWAYS_NORMALIZE } return _createElement(context, tag, data, children, normalizationType) } 上面可以看到createElement 方法实际上是对 _createElement 方法的封装，对参数的传入进行了判断 export function _createElement( context: Component, tag?: string | Class | Function | Object, data?: VNodeData, children?: any, normalizationType?: number ): VNode | Array { if (isDef(data) && isDef((data: any).__ob__)) { process.env.NODE_ENV !== 'production' && warn( `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\\n` + 'Always create fresh vnode data objects in each render!', context` ) return createEmptyVNode() } // object syntax in v-bind if (isDef(data) && isDef(data.is)) { tag = data.is } if (!tag) { // in case of component :is set to falsy value return createEmptyVNode() } ... // support single function children as default scoped slot if (Array.isArray(children) && typeof children[0] === 'function' ) { data = data || {} data.scopedSlots = { default: children[0] } children.length = 0 } if (normalizationType === ALWAYS_NORMALIZE) { children = normalizeChildren(children) } else if ( === SIMPLE_NORMALIZE) { children = simpleNormalizeChildren(children) } // 创建VNode ... } 可以看到_createElement接收5个参数： context 表示 VNode 的上下文环境，是 Component 类型 tag 表示标签，它可以是一个字符串，也可以是一个 Component data 表示 VNode 的数据，它是一个 VNodeData 类型 children 表示当前 VNode的子节点，它是任意类型的 normalizationType 表示子节点规范的类型，类型不同规范的方法也就不一样，主要是参考 render 函数是编译生成的还是用户手写的 根据normalizationType 的类型，children会有不同的定义 if (normalizationType === ALWAYS_NORMALIZE) { children = normalizeChildren(children) } else if ( === SIMPLE_NORMALIZE) { children = simpleNormalizeChildren(children) } simpleNormalizeChildren方法调用场景是 render 函数是编译生成的 normalizeChildren方法调用场景分为下面两种： render 函数是用户手写的 编译 slot、v-for 的时候会产生嵌套数组 无论是simpleNormalizeChildren还是normalizeChildren都是对children进行规范（使children 变成了一个类型为 VNode 的 Array），这里就不展开说了 规范化children的源码位置在：src/core/vdom/helpers/normalzie-children.js 在规范化children后，就去创建VNode let vnode, ns // 对tag进行判断 if (typeof tag === 'string') { let Ctor ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag) if (config.isReservedTag(tag)) { // 如果是内置的节点，则直接创建一个普通VNode vnode = new VNode( config.parsePlatformTagName(tag), data, children, undefined, undefined, context ) } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) { // component // 如果是component类型，则会通过createComponent创建VNode节点 vnode = createComponent(Ctor, data, context, children, tag) } else { vnode = new VNode( tag, data, children, undefined, undefined, context ) } } else { // direct component options / constructor vnode = createComponent(tag, data, context, children) } createComponent同样是创建VNode 源码位置：src/core/vdom/create-component.js export function createComponent ( Ctor: Class | Function | Object | void, data: ?VNodeData, context: Component, children: ?Array, tag?: string ): VNode | Array | void { if (isUndef(Ctor)) { return } // 构建子类构造函数 const baseCtor = context.$options._base // plain options object: turn it into a constructor if (isObject(Ctor)) { Ctor = baseCtor.extend(Ctor) } // if at this stage it's not a constructor or an async component factory, // reject. if (typeof Ctor !== 'function') { if (process.env.NODE_ENV !== 'production') { warn(`Invalid Component definition: ${String(Ctor)}`, context) } return } // async component let asyncFactory if (isUndef(Ctor.cid)) { asyncFactory = Ctor Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context) if (Ctor === undefined) { return createAsyncPlaceholder( asyncFactory, data, context, children, tag ) } } data = data || {} // resolve constructor options in case global mixins are applied after // component constructor creation resolveConstructorOptions(Ctor) // transform component v-model data into props & events if (isDef(data.model)) { transformModel(Ctor.options, data) } // extract props const propsData = extractPropsFromVNodeData(data, Ctor, tag) // functional component if (isTrue(Ctor.options.functional)) { return createFunctionalComponent(Ctor, propsData, data, context, children) } // extract listeners, since these needs to be treated as // child component listeners instead of DOM listeners const listeners = data.on // replace with listeners with .native modifier // so it gets processed during parent component patch. data.on = data.nativeOn if (isTrue(Ctor.options.abstract)) { const slot = data.slot data = {} if (slot) { data.slot = slot } } // 安装组件钩子函数，把钩子函数合并到data.hook中 installComponentHooks(data) //实例化一个VNode返回。组件的VNode是没有children的 const name = Ctor.options.name || tag const vnode = new VNode( `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`, data, undefined, undefined, undefined, context, { Ctor, propsData, listeners, tag, children }, asyncFactory ) if (__WEEX__ && isRecyclableComponent(vnode)) { return renderRecyclableComponentTemplate(vnode) } return vnode } 稍微提下createComponent生成VNode的三个关键流程： 构造子类构造函数Ctor installComponentHooks安装组件钩子函数 实例化 vnode 小结 createElement 创建 VNode 的过程，每个 VNode 有 children，children 每个元素也是一个VNode，这样就形成了一个虚拟树结构，用于描述真实的DOM树结构 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/bind.html":{"url":"vue/bind.html","title":"Vue2双向数据绑定","keywords":"","body":"面试官：双向数据绑定是什么 一、什么是双向绑定 我们先从单向绑定切入单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新双向绑定就很容易联想到了，在单向绑定的基础上，用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定举个栗子 当用户填写表单时，View的状态就被更新了，如果此时可以自动更新Model的状态，那就相当于我们把Model和View做了双向绑定关系图如下 二、双向绑定的原理是什么 我们都知道 Vue 是数据双向绑定的框架，双向绑定由三个重要部分构成 数据层（Model）：应用的数据及业务逻辑 视图层（View）：应用的展示效果，各类UI组件 业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来 而上面的这个分层的架构方案，可以用一个专业术语进行称呼：MVVM这里的控制层的核心功能便是 “数据双向绑定” 。自然，我们只需弄懂它是什么，便可以进一步了解数据绑定的原理 理解ViewModel 它的主要职责就是： 数据变化后更新视图 视图变化后更新数据 当然，它还有两个主要部分组成 监听器（Observer）：对所有数据的属性进行监听 解析器（Compiler）：对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数 三、实现双向绑定 我们还是以Vue为例，先来看看Vue中的双向绑定流程是什么的 new Vue()首先执行初始化，对data执行响应化处理，这个过程发生Observe中 同时对模板执行编译，找到其中动态绑定的数据，从data中获取并初始化视图，这个过程发生在Compile中 同时定义⼀个更新函数和Watcher，将来对应数据变化时Watcher会调用更新函数 由于data的某个key在⼀个视图中可能出现多次，所以每个key都需要⼀个管家Dep来管理多个Watcher 将来data中数据⼀旦发生变化，会首先找到对应的Dep，通知所有Watcher执行更新函数 流程图如下： 实现 先来一个构造函数：执行初始化，对data执行响应化处理 class Vue { constructor(options) { this.$options = options; this.$data = options.data; // 对data选项做响应式处理 observe(this.$data); // 代理data到vm上 proxy(this); // 执行编译 new Compile(options.el, this); } } 对data选项执行响应化具体操作 function observe(obj) { if (typeof obj !== \"object\" || obj == null) { return; } new Observer(obj); } class Observer { constructor(value) { this.value = value; this.walk(value); } walk(obj) { Object.keys(obj).forEach((key) => { defineReactive(obj, key, obj[key]); }); } } 编译Compile 对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数 class Compile { constructor(el, vm) { this.$vm = vm; this.$el = document.querySelector(el); // 获取dom if (this.$el) { this.compile(this.$el); } } compile(el) { const childNodes = el.childNodes; Array.from(childNodes).forEach((node) => { // 遍历子元素 if (this.isElement(node)) { // 判断是否为节点 console.log(\"编译元素\" + node.nodeName); } else if (this.isInterpolation(node)) { console.log(\"编译插值⽂本\" + node.textContent); // 判断是否为插值文本 } if (node.childNodes && node.childNodes.length > 0) { // 判断是否有子元素 this.compile(node); // 对子元素进行递归遍历 } }); } isElement(node) { return node.nodeType == 1; } isInterpolation(node) { return node.nodeType == 3 && /\\{\\{(.*)\\}\\}/.test(node.textContent); } } 依赖收集 视图中会用到data中某key，这称为依赖。同⼀个key可能出现多次，每次都需要收集出来用⼀个Watcher来维护它们，此过程称为依赖收集多个Watcher需要⼀个Dep来管理，需要更新时由Dep统⼀通知 实现思路 defineReactive时为每⼀个key创建⼀个Dep实例 初始化视图时读取某个key，例如name1，创建⼀个watcher1 由于触发name1的getter方法，便将watcher1添加到name1对应的Dep中 当name1更新，setter触发时，便可通过对应Dep通知其管理所有Watcher更新 // 负责更新视图 class Watcher { constructor(vm, key, updater) { this.vm = vm this.key = key this.updaterFn = updater // 创建实例时，把当前实例指定到Dep.target静态属性上 Dep.target = this // 读一下key，触发get vm[key] // 置空 Dep.target = null } // 未来执行dom更新函数，由dep调用的 update() { this.updaterFn.call(this.vm, this.vm[this.key]) } } 声明Dep class Dep { constructor() { this.deps = []; // 依赖管理 } addDep(dep) { this.deps.push(dep); } notify() { this.deps.forEach((dep) => dep.update()); } } 创建watcher时触发getter class Watcher { constructor(vm, key, updateFn) { Dep.target = this; this.vm[this.key]; Dep.target = null; } } 依赖收集，创建Dep实例 function defineReactive(obj, key, val) { this.observe(val); const dep = new Dep(); Object.defineProperty(obj, key, { get() { Dep.target && dep.addDep(Dep.target);// Dep.target也就是Watcher实例 return val; }, set(newVal) { if (newVal === val) return; dep.notify(); // 通知dep执行更新方法 }, }); } 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/communication.html":{"url":"vue/communication.html","title":"Vue组件之间的通信方式","keywords":"","body":"面试官：Vue组件之间的通信方式都有哪些？ 一、组件间通信的概念 开始之前，我们把组件间通信这个词进行拆分 组件 通信 都知道组件是vue最强大的功能之一，vue中每一个.vue我们都可以视之为一个组件通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。广义上，任何信息的交通都是通信组件间通信即指组件(.vue)通过某种方式来传递信息以达到某个目的举个栗子我们在使用UI框架中的table组件，可能会往table组件中传入某些数据，这个本质就形成了组件之间的通信 二、组件间通信解决了什么 在古代，人们通过驿站、飞鸽传书、烽火报警、符号、语言、眼神、触碰等方式进行信息传递，到了今天，随着科技水平的飞速发展，通信基本完全利用有线或无线电完成，相继出现了有线电话、固定电话、无线电话、手机、互联网甚至视频电话等各种通信方式从上面这段话，我们可以看到通信的本质是信息同步，共享回到vue中，每个组件之间的都有独自的作用域，组件间的数据是无法共享的但实际开发工作中我们常常需要让组件之间共享数据，这也是组件通信的目的要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统 二、组件间通信的分类 组件间通信的分类可以分成以下 父子组件之间的通信 兄弟组件之间的通信 祖孙与后代组件之间的通信 非关系组件间之间的通信 关系图: 三、组件间通信的方案 整理vue中8种常规的通信方案 通过 props 传递 通过 $emit 触发自定义事件 使用 ref EventBus $parent 或$root attrs 与 listeners Provide 与 Inject Vuex props传递数据 适用场景：父组件传递数据给子组件 子组件设置props属性，定义接收父组件传递过来的参数 父组件在使用子组件标签中通过字面量来传递值 Children.vue props:{ // 字符串形式 name:String // 接收的类型参数 // 对象形式 age:{ type:Number, // 接收的类型为数值 defaule:18, // 默认值为18 require:true // age属性必须传递 } } Father.vue组件 $emit 触发自定义事件 适用场景：子组件传递数据给父组件 子组件通过$emit触发自定义事件，$emit第二个参数为传递的数值 父组件绑定监听器获取到子组件传递过来的参数 Chilfen.vue this.$emit('add', good) Father.vue ref 父组件在使用子组件的时候设置ref 父组件通过设置子组件ref来获取数据 父组件 this.$refs.foo // 获取子组件实例，通过子组件实例我们就能拿到对应的数据 EventBus 使用场景：兄弟组件传值 创建一个中央时间总线EventBus 兄弟组件通过$emit触发自定义事件，$emit第二个参数为传递的数值 另一个兄弟组件通过$on监听自定义事件 Bus.js // 创建一个中央时间总线类 class Bus { constructor() { this.callbacks = {}; // 存放事件的名字 } $on(name, fn) { this.callbacks[name] = this.callbacks[name] || []; this.callbacks[name].push(fn); } $emit(name, args) { if (this.callbacks[name]) { this.callbacks[name].forEach((cb) => cb(args)); } } } // main.js Vue.prototype.$bus = new Bus() // 将$bus挂载到vue实例的原型上 // 另一种方式 Vue.prototype.$bus = new Vue() // Vue已经实现了Bus的功能 Children1.vue this.$bus.$emit('foo') Children2.vue this.$bus.$on('foo', this.handle) $parent 或$ root 通过共同祖辈$parent或者$root搭建通信侨联 兄弟组件 this.$parent.on('add',this.add) 另一个兄弟组件 this.$parent.emit('add') $attrs 与$ listeners 适用场景：祖先传递数据给子孙 设置批量向下传属性$attrs和 $listeners 包含了父级作用域中不作为 prop 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。 可以通过 v-bind=\"$attrs\" 传⼊内部组件 // child：并未在props中声明foo // parent // 给Grandson隔代传值，communication/index.vue // Child2做展开 // Grandson使⽤ provide 与 inject 在祖先组件定义provide属性，返回传递的值 在后代组件通过inject接收组件传递过来的值 祖先组件 provide(){ return { foo:'foo' } } 后代组件 inject:['foo'] // 获取到祖先组件传递过来的值 vuex 适用场景: 复杂关系的组件数据传递 Vuex作用相当于一个用来存储共享变量的容器 state用来存放共享变量的地方 getter，可以增加一个getter派生状态，(相当于store中的计算属性），用来获得共享变量的值 mutations用来存放修改state的方法。 actions也是用来存放修改state的方法，不过action是在mutations的基础上进行。常用来做一些异步操作 小结 父子关系的组件数据传递选择 props 与 $emit进行传递，也可选择ref 兄弟关系的组件数据传递可选择$bus，其次可以选择$parent进行传递 祖先与后代组件数据传递可选择attrs与listeners或者 Provide与 Inject 复杂关系的组件数据传递可以通过vuex存放共享的变量 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/components_plugin.html":{"url":"vue/components_plugin.html","title":"Vue中组件和插件有什么区别","keywords":"","body":"面试官：Vue中组件和插件有什么区别？ 一、组件是什么 回顾以前对组件的定义： 组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在Vue中每一个.vue文件都可以视为一个组件 组件的优势 降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现 调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级 二、插件是什么 插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种： 添加全局方法或者属性。如: vue-custom-element 添加全局资源：指令/过滤器/过渡等。如 vue-touch 通过全局混入来添加一些组件选项。如vue-router 添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。 一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如vue-router 三、两者的区别 两者的区别主要表现在以下几个方面： 编写形式 注册形式 使用场景 编写形式 编写组件 编写一个组件，可以有很多方式，我们最常见的就是vue单文件的这种格式，每一个.vue文件我们都可以看成是一个组件 vue文件标准格式 export default{ ... } 我们还可以通过template属性来编写一个组件，如果组件内容多，我们可以在外部定义template组件内容，如果组件内容并不多，我们可直接写在template属性上 // 组件显示的内容 component! Vue.component('componentA',{ template: '#testComponent' template: `component` // 组件内容少可以通过这种形式 }) 编写插件 vue插件的实现应该暴露一个 install 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象 MyPlugin.install = function (Vue, options) { // 1. 添加全局方法或 property Vue.myGlobalMethod = function () { // 逻辑... } // 2. 添加全局资源 Vue.directive('my-directive', { bind (el, binding, vnode, oldVnode) { // 逻辑... } ... }) // 3. 注入组件选项 Vue.mixin({ created: function () { // 逻辑... } ... }) // 4. 添加实例方法 Vue.prototype.$myMethod = function (methodOptions) { // 逻辑... } } 注册形式 组件注册 vue组件注册主要分为全局注册与局部注册 全局注册通过Vue.component方法，第一个参数为组件的名称，第二个参数为传入的配置项 Vue.component('my-component-name', { /* ... */ }) 局部注册只需在用到的地方通过components属性注册一个组件 const component1 = {...} // 定义一个组件 export default { components:{ component1 // 局部注册 } } 插件注册 插件的注册通过Vue.use()的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项 Vue.use(插件名字,{ /* ... */} ) 注意的是： 注册插件的时候，需要在调用 new Vue() 启动应用之前完成 Vue.use会自动阻止多次注册相同插件，只会注册一次 使用场景 具体的其实在插件是什么章节已经表述了，这里在总结一下 组件 (Component) 是用来构成你的 App 的业务模块，它的目标是 App.vue 插件 (Plugin) 是用来增强你的技术栈的功能模块，它的目标是 Vue 本身 简单来说，插件就是指对Vue的功能的增强或补充 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/data.html":{"url":"vue/data.html","title":"为什么data属性是一个函数而不是一个对象","keywords":"","body":"面试官：为什么data属性是一个函数而不是一个对象？ 一、实例和组件定义data的区别 vue实例的时候定义data属性既可以是一个对象，也可以是一个函数 const app = new Vue({ el:\"#app\", // 对象格式 data:{ foo:\"foo\" }, // 函数格式 data(){ return { foo:\"foo\" } } }) 组件中定义data属性，只能是一个函数 如果为组件data直接定义为一个对象 Vue.component('component1',{ template:`组件`, data:{ foo:\"foo\" } }) 则会得到警告信息 警告说明：返回的data应该是一个函数在每一个组件实例中 二、组件data定义函数与对象的区别 上面讲到组件data必须是一个函数，不知道大家有没有思考过这是为什么呢？ 在我们定义好一个组件的时候，vue最终都会通过Vue.extend()构成组件实例 这里我们模仿组件构造函数，定义data属性，采用对象的形式 function Component(){ } Component.prototype.data = { count : 0 } 创建两个组件实例 const componentA = new Component() const componentB = new Component() 修改componentA组件data属性的值，componentB中的值也发生了改变 console.log(componentB.data.count) // 0 componentA.data.count = 1 console.log(componentB.data.count) // 1 产生这样的原因这是两者共用了同一个内存地址，componentA修改的内容，同样对componentB产生了影响 如果我们采用函数的形式，则不会出现这种情况（函数返回的对象内存地址并不相同） function Component(){ this.data = this.data() } Component.prototype.data = function (){ return { count : 0 } } 修改componentA组件data属性的值，componentB中的值不受影响 console.log(componentB.data.count) // 0 componentA.data.count = 1 console.log(componentB.data.count) // 0 vue组件可能会有很多个实例，采用函数返回一个全新data形式，使每个实例对象的数据不会受到其他实例对象数据的污染 三、原理分析 首先可以看看vue初始化data的代码，data的定义可以是函数也可以是对象 源码位置：/vue-dev/src/core/instance/state.js function initData (vm: Component) { let data = vm.$options.data data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {} ... } data既能是object也能是function，那为什么还会出现上文警告呢？ 别急，继续看下文 组件在创建的时候，会进行选项的合并 源码位置：/vue-dev/src/core/util/options.js 自定义组件会进入mergeOptions进行选项合并 Vue.prototype._init = function (options?: Object) { ... // merge options if (options && options._isComponent) { // optimize internal component instantiation // since dynamic options merging is pretty slow, and none of the // internal component options needs special treatment. initInternalComponent(vm, options) } else { vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor), options || {}, vm ) } ... } 定义data会进行数据校验 源码位置：/vue-dev/src/core/instance/init.js 这时候vm实例为undefined，进入if判断，若data类型不是function，则出现警告提示 strats.data = function ( parentVal: any, childVal: any, vm?: Component ): ?Function { if (!vm) { if (childVal && typeof childVal !== \"function\") { process.env.NODE_ENV !== \"production\" && warn( 'The \"data\" option should be a function ' + \"that returns a per-instance value in component \" + \"definitions.\", vm ); return parentVal; } return mergeDataOrFn(parentVal, childVal); } return mergeDataOrFn(parentVal, childVal, vm); }; 四、结论 根实例对象data可以是对象也可以是函数（根实例是单例），不会产生数据污染情况 组件实例对象data必须为函数，目的是为了防止多个组件实例对象之间共用一个data，产生数据污染。采用函数的形式，initData时会将其作为工厂函数都会返回全新data对象 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/data_object_add_attrs.html":{"url":"vue/data_object_add_attrs.html","title":"动态给vue的data添加一个新的属性时会发生什么","keywords":"","body":"面试官：动态给vue的data添加一个新的属性时会发生什么？怎样解决？ 一、直接添加属性的问题 我们从一个例子开始 定义一个p标签，通过v-for指令进行遍历 然后给botton标签绑定点击事件，我们预期点击按钮时，数据新增一个属性，界面也 新增一行 动态添加新属性 实例化一个vue实例，定义data属性和methods方法 const app = new Vue({ el:\"#app\", data:()=>{ item:{ oldProperty:\"旧属性\" } }, methods:{ addProperty(){ this.items.newProperty = \"新属性\" // 为items添加新属性 console.log(this.items) // 输出带有newProperty的items } } }) 点击按钮，发现结果不及预期，数据虽然更新了（console打印出了新属性），但页面并没有更新 二、原理分析 为什么产生上面的情况呢？ 下面来分析一下 vue2是用过Object.defineProperty实现数据响应式 const obj = {} Object.defineProperty(obj, 'foo', { get() { console.log(`get foo:${val}`); return val }, set(newVal) { if (newVal !== val) { console.log(`set foo:${newVal}`); val = newVal } } }) } 当我们访问foo属性或者设置foo值的时候都能够触发setter与getter obj.foo obj.foo = 'new' 但是我们为obj添加新属性的时候，却无法触发事件属性的拦截 obj.bar = '新属性' 原因是一开始obj的foo属性被设成了响应式数据，而bar是后面新增的属性，并没有通过Object.defineProperty设置成响应式数据 三、解决方案 Vue 不允许在已经创建的实例上动态添加新的响应式属性 若想实现数据与视图同步更新，可采取下面三种解决方案： Vue.set() Object.assign() $forcecUpdated() Vue.set() Vue.set( target, propertyName/index, value ) 参数 {Object | Array} target {string | number} propertyName/index {any} value 返回值：设置的值 通过Vue.set向响应式对象中添加一个property，并确保这个新 property同样是响应式的，且触发视图更新 关于Vue.set源码（省略了很多与本节不相关的代码） 源码位置：src\\core\\observer\\index.js function set (target: Array | Object, key: any, val: any): any { ... defineReactive(ob.value, key, val) ob.dep.notify() return val } 这里无非再次调用defineReactive方法，实现新增属性的响应式 关于defineReactive方法，内部还是通过Object.defineProperty实现属性拦截 大致代码如下： function defineReactive(obj, key, val) { Object.defineProperty(obj, key, { get() { console.log(`get ${key}:${val}`); return val }, set(newVal) { if (newVal !== val) { console.log(`set ${key}:${newVal}`); val = newVal } } }) } Object.assign() 直接使用Object.assign()添加到对象的新属性不会触发更新 应创建一个新的对象，合并原对象和混入对象的属性 this.someObject = Object.assign({},this.someObject,{newProperty1:1,newProperty2:2 ...}) $forceUpdate 如果你发现你自己需要在 Vue中做一次强制更新，99.9% 的情况，是你在某个地方做错了事 $forceUpdate迫使Vue 实例重新渲染 PS：仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。 小结 如果为对象添加少量的新属性，可以直接采用Vue.set() 如果需要为新对象添加大量的新属性，则通过Object.assign()创建新对象 如果你实在不知道怎么操作时，可采取$forceUpdate()进行强制刷新 (不建议) PS：vue3是用过proxy实现数据响应式的，直接动态添加新属性仍可以实现数据响应式 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/diff.html":{"url":"vue/diff.html","title":"Vue的diff算法","keywords":"","body":"面试官：你了解vue的diff算法吗？说说看 一、是什么 diff 算法是一种通过同层的树节点进行比较的高效算法 其有两个特点： 比较只会在同层级进行, 不会跨层级比较 在diff比较的过程中，循环从两边向中间比较 diff 算法的在很多场景下都有应用，在 vue 中，作用于虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较 二、比较方式 diff整体策略为：深度优先，同层比较 比较只会在同层级进行, 不会跨层级比较 比较的过程中，循环从两边向中间收拢 下面举个vue通过diff算法更新的例子： 新旧VNode节点如下图所示： 第一次循环后，发现旧节点D与新节点D相同，直接复用旧节点D作为diff后的第一个真实节点，同时旧节点endIndex移动到C，新节点的 startIndex 移动到了 C 第二次循环后，同样是旧节点的末尾和新节点的开头(都是 C)相同，同理，diff 后创建了 C 的真实节点插入到第一次创建的 B 节点后面。同时旧节点的 endIndex 移动到了 B，新节点的 startIndex 移动到了 E 第三次循环中，发现E没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 startIndex 移动到了 A。旧节点的 startIndex 和 endIndex 都保持不动 第四次循环中，发现了新旧节点的开头(都是 A)相同，于是 diff 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 startIndex 移动到了 B，新节点的startIndex 移动到了 B 第五次循环中，情形同第四次循环一样，因此 diff 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 startIndex移动到了 C，新节点的 startIndex 移动到了 F 新节点的 startIndex 已经大于 endIndex 了，需要创建 newStartIdx 和 newEndIdx 之间的所有节点，也就是节点F，直接创建 F 节点对应的真实节点放到 B 节点后面 三、原理分析 当数据发生改变时，set方法会调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图 源码位置：src/core/vdom/patch.js function patch(oldVnode, vnode, hydrating, removeOnly) { if (isUndef(vnode)) { // 没有新节点，直接执行destory钩子函数 if (isDef(oldVnode)) invokeDestroyHook(oldVnode) return } let isInitialPatch = false const insertedVnodeQueue = [] if (isUndef(oldVnode)) { isInitialPatch = true createElm(vnode, insertedVnodeQueue) // 没有旧节点，直接用新节点生成dom元素 } else { const isRealElement = isDef(oldVnode.nodeType) if (!isRealElement && sameVnode(oldVnode, vnode)) { // 判断旧节点和新节点自身一样，一致执行patchVnode patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly) } else { // 否则直接销毁及旧节点，根据新节点生成dom元素 if (isRealElement) { if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) { oldVnode.removeAttribute(SSR_ATTR) hydrating = true } if (isTrue(hydrating)) { if (hydrate(oldVnode, vnode, insertedVnodeQueue)) { invokeInsertHook(vnode, insertedVnodeQueue, true) return oldVnode } } oldVnode = emptyNodeAt(oldVnode) } return vnode.elm } } } patch函数前两个参数位为oldVnode 和 Vnode ，分别代表新的节点和之前的旧节点，主要做了四个判断： 没有新节点，直接触发旧节点的destory钩子 没有旧节点，说明是页面刚开始初始化的时候，此时，根本不需要比较了，直接全是新建，所以只调用 createElm 旧节点和新节点自身一样，通过 sameVnode 判断节点是否一样，一样时，直接调用 patchVnode去处理这两个节点 旧节点和新节点自身不一样，当两个节点不一样的时候，直接创建新节点，删除旧节点 下面主要讲的是patchVnode部分 function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) { // 如果新旧节点一致，什么都不做 if (oldVnode === vnode) { return } // 让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化 const elm = vnode.elm = oldVnode.elm // 异步占位符 if (isTrue(oldVnode.isAsyncPlaceholder)) { if (isDef(vnode.asyncFactory.resolved)) { hydrate(oldVnode.elm, vnode, insertedVnodeQueue) } else { vnode.isAsyncPlaceholder = true } return } // 如果新旧都是静态节点，并且具有相同的key // 当vnode是克隆节点或是v-once指令控制的节点时，只需要把oldVnode.elm和oldVnode.child都复制到vnode上 // 也不用再有其他操作 if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce)) ) { vnode.componentInstance = oldVnode.componentInstance return } let i const data = vnode.data if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) { i(oldVnode, vnode) } const oldCh = oldVnode.children const ch = vnode.children if (isDef(data) && isPatchable(vnode)) { for (i = 0; i patchVnode主要做了几个判断： 新节点是否是文本节点，如果是，则直接更新dom的文本内容为新节点的文本内容 新节点和旧节点如果都有子节点，则处理比较更新子节点 只有新节点有子节点，旧节点没有，那么不用比较了，所有节点都是全新的，所以直接全部新建就好了，新建是指创建出所有新DOM，并且添加进父节点 只有旧节点有子节点而新节点没有，说明更新后的页面，旧节点全部都不见了，那么要做的，就是把所有的旧节点删除，也就是直接把DOM 删除 子节点不完全一致，则调用updateChildren function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) { let oldStartIdx = 0 // 旧头索引 let newStartIdx = 0 // 新头索引 let oldEndIdx = oldCh.length - 1 // 旧尾索引 let newEndIdx = newCh.length - 1 // 新尾索引 let oldStartVnode = oldCh[0] // oldVnode的第一个child let oldEndVnode = oldCh[oldEndIdx] // oldVnode的最后一个child let newStartVnode = newCh[0] // newVnode的第一个child let newEndVnode = newCh[newEndIdx] // newVnode的最后一个child let oldKeyToIdx, idxInOld, vnodeToMove, refElm // removeOnly is a special flag used only by // to ensure removed elements stay in correct relative positions // during leaving transitions const canMove = !removeOnly // 如果oldStartVnode和oldEndVnode重合，并且新的也都重合了，证明diff完了，循环结束 while (oldStartIdx while循环主要处理了以下五种情景： 当新老 VNode 节点的 start 相同时，直接 patchVnode ，同时新老 VNode 节点的开始索引都加 1 当新老 VNode 节点的 end相同时，同样直接 patchVnode ，同时新老 VNode 节点的结束索引都减 1 当老 VNode 节点的 start 和新 VNode 节点的 end 相同时，这时候在 patchVnode 后，还需要将当前真实 dom 节点移动到 oldEndVnode 的后面，同时老 VNode 节点开始索引加 1，新 VNode 节点的结束索引减 1 当老 VNode 节点的 end 和新 VNode 节点的 start 相同时，这时候在 patchVnode 后，还需要将当前真实 dom 节点移动到 oldStartVnode 的前面，同时老 VNode 节点结束索引减 1，新 VNode 节点的开始索引加 1 如果都不满足以上四种情形，那说明没有相同的节点可以复用，则会分为以下两种情况： 从旧的 VNode 为 key 值，对应 index 序列为 value 值的哈希表中找到与 newStartVnode 一致 key 的旧的 VNode 节点，再进行patchVnode，同时将这个真实 dom移动到 oldStartVnode 对应的真实 dom 的前面 调用 createElm 创建一个新的 dom 节点放到当前 newStartIdx 的位置 小结 当数据发生改变时，订阅者watcher就会调用patch给真实的DOM打补丁 通过isSameVnode进行判断，相同则调用patchVnode方法 patchVnode做了以下操作： 找到对应的真实dom，称为el 如果都有都有文本节点且不相等，将el文本节点设置为Vnode的文本节点 如果oldVnode有子节点而VNode没有，则删除el子节点 如果oldVnode没有子节点而VNode有，则将VNode的子节点真实化后添加到el 如果两者都有子节点，则执行updateChildren函数比较子节点 updateChildren主要做了以下操作： 设置新旧VNode的头尾指针 新旧头尾指针进行比较，循环向中间靠拢，根据情况调用patchVnode进行patch重复流程、调用createElem创建一个新节点，从哈希表寻找 key一致的VNode 节点再分情况操作 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/directive.html":{"url":"vue/directive.html","title":"Vue自定义指令","keywords":"","body":"面试官：你有写过自定义指令吗？自定义指令的应用场景有哪些？ 一、什么是指令 开始之前我们先学习一下指令系统这个词 指令系统是计算机硬件的语言系统，也叫机器语言，它是系统程序员看到的计算机的主要属性。因此指令系统表征了计算机的基本功能决定了机器所要求的能力 在vue中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统 我们看到的v-开头的行内属性，都是指令，不同的指令可以完成或实现不同的功能 除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令 指令使用的几种方式： //会实例化一个指令，但这个指令没有参数 `v-xxx` // -- 将值传到指令中 `v-xxx=\"value\"` // -- 将字符串传入到指令中，如`v-html=\"'内容'\"` `v-xxx=\"'string'\"` // -- 传参数（`arg`），如`v-bind:class=\"className\"` `v-xxx:arg=\"value\"` // -- 使用修饰符（`modifier`） `v-xxx:arg.modifier=\"value\"` 二、如何实现 注册一个自定义指令有全局注册与局部注册 全局注册注册主要是用过Vue.directive方法进行注册 Vue.directive第一个参数是指令的名字（不需要写上v-前缀），第二个参数可以是对象数据，也可以是一个指令函数 // 注册一个全局自定义指令 `v-focus` Vue.directive('focus', { // 当被绑定的元素插入到 DOM 中时…… inserted: function (el) { // 聚焦元素 el.focus() // 页面加载完成之后自动让输入框获取到焦点的小功能 } }) 局部注册通过在组件options选项中设置directive属性 directives: { focus: { // 指令的定义 inserted: function (el) { el.focus() // 页面加载完成之后自动让输入框获取到焦点的小功能 } } } 然后你可以在模板中任何元素上使用新的 v-focus property，如下： 自定义指令也像组件那样存在钩子函数： bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置 inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中) update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用 unbind：只调用一次，指令与元素解绑时调用 所有的钩子函数的参数都有以下： el：指令所绑定的元素，可以用来直接操作 DOM binding：一个对象，包含以下 property： name：指令名，不包括 v- 前缀。 value：指令的绑定值，例如：v-my-directive=\"1 + 1\" 中，绑定值为 2。 oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。 expression：字符串形式的指令表达式。例如 v-my-directive=\"1 + 1\" 中，表达式为 \"1 + 1\"。 arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \"foo\"。 modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true } vnode：Vue 编译生成的虚拟节点 oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用 除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行 举个例子： Vue.directive('demo', function (el, binding) { console.log(binding.value.color) // \"white\" console.log(binding.value.text) // \"hello!\" }) 三、应用场景 使用自定义组件组件可以满足我们日常一些场景，这里给出几个自定义组件的案例： 防抖 图片懒加载 一键 Copy的功能 输入框防抖 防抖这种情况设置一个v-throttle自定义指令来实现 举个例子： // 1.设置v-throttle自定义指令 Vue.directive('throttle', { bind: (el, binding) => { let throttleTime = binding.value; // 防抖时间 if (!throttleTime) { // 用户若不设置防抖时间，则默认2s throttleTime = 2000; } let cbFun; el.addEventListener('click', event => { if (!cbFun) { // 第一次执行 cbFun = setTimeout(() => { cbFun = null; }, throttleTime); } else { event && event.stopImmediatePropagation(); } }, true); }, }); // 2.为button标签设置v-throttle自定义指令 提交 图片懒加载 设置一个v-lazy自定义组件完成图片懒加载 const LazyLoad = { // install方法 install(Vue,options){ // 代替图片的loading图 let defaultSrc = options.default; Vue.directive('lazy',{ bind(el,binding){ LazyLoad.init(el,binding.value,defaultSrc); }, inserted(el){ // 兼容处理 if('IntersectionObserver' in window){ LazyLoad.observe(el); }else{ LazyLoad.listenerScroll(el); } }, }) }, // 初始化 init(el,val,def){ // data-src 储存真实src el.setAttribute('data-src',val); // 设置src为loading图 el.setAttribute('src',def); }, // 利用IntersectionObserver监听el observe(el){ let io = new IntersectionObserver(entries => { let realSrc = el.dataset.src; if(entries[0].isIntersecting){ if(realSrc){ el.src = realSrc; el.removeAttribute('data-src'); } } }); io.observe(el); }, // 监听scroll事件 listenerScroll(el){ let handler = LazyLoad.throttle(LazyLoad.load,300); LazyLoad.load(el); window.addEventListener('scroll',() => { handler(el); }); }, // 加载真实图片 load(el){ let windowHeight = document.documentElement.clientHeight let elTop = el.getBoundingClientRect().top; let elBtm = el.getBoundingClientRect().bottom; let realSrc = el.dataset.src; if(elTop - windowHeight 0){ if(realSrc){ el.src = realSrc; el.removeAttribute('data-src'); } } }, // 节流 throttle(fn,delay){ let timer; let prevTime; return function(...args){ let currTime = Date.now(); let context = this; if(!prevTime) prevTime = currTime; clearTimeout(timer); if(currTime - prevTime > delay){ prevTime = currTime; fn.apply(context,args); clearTimeout(timer); return; } timer = setTimeout(function(){ prevTime = Date.now(); timer = null; fn.apply(context,args); },delay); } } } export default LazyLoad; 一键 Copy的功能 import { Message } from 'ant-design-vue'; const vCopy = { // /* bind 钩子函数，第一次绑定时调用，可以在这里做初始化设置 el: 作用的 dom 对象 value: 传给指令的值，也就是我们要 copy 的值 */ bind(el, { value }) { el.$value = value; // 用一个全局属性来存传进来的值，因为这个值在别的钩子函数里还会用到 el.handler = () => { if (!el.$value) { // 值为空的时候，给出提示，我这里的提示是用的 ant-design-vue 的提示，你们随意 Message.warning('无复制内容'); return; } // 动态创建 textarea 标签 const textarea = document.createElement('textarea'); // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域 textarea.readOnly = 'readonly'; textarea.style.position = 'absolute'; textarea.style.left = '-9999px'; // 将要 copy 的值赋给 textarea 标签的 value 属性 textarea.value = el.$value; // 将 textarea 插入到 body 中 document.body.appendChild(textarea); // 选中值并复制 textarea.select(); // textarea.setSelectionRange(0, textarea.value.length); const result = document.execCommand('Copy'); if (result) { Message.success('复制成功'); } document.body.removeChild(textarea); }; // 绑定点击事件，就是所谓的一键 copy 啦 el.addEventListener('click', el.handler); }, // 当传进来的值更新的时候触发 componentUpdated(el, { value }) { el.$value = value; }, // 指令与元素解绑的时候，移除事件绑定 unbind(el) { el.removeEventListener('click', el.handler); }, }; export default vCopy; 关于自定义组件还有很多应用场景，如：拖拽指令、页面水印、权限校验等等应用场景 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/keepalive.html":{"url":"vue/keepalive.html","title":"Vue中keep-alive的理解","keywords":"","body":"面试官：说说你对keep-alive的理解是什么？ 一、Keep-alive 是什么 keep-alive是vue中的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM keep-alive 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们 keep-alive可以设置以下props属性： include - 字符串或正则表达式。只有名称匹配的组件会被缓存 exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存 max - 数字。最多可以缓存多少组件实例 关于keep-alive的基本用法： 使用includes和exclude： 匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)，匿名组件不能被匹配 设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（activated与deactivated）： 首次进入组件时：beforeRouteEnter > beforeCreate > created> mounted > activated > ... ... > beforeRouteLeave > deactivated 再次进入组件时：beforeRouteEnter >activated > ... ... > beforeRouteLeave > deactivated 二、使用场景 使用原则：当我们在某些场景下不需要让页面重新加载时我们可以使用keepalive 举个栗子: 当我们从首页–>列表页–>商详页–>再返回，这时候列表页应该是需要keep-alive 从首页–>列表页–>商详页–>返回到列表页(需要缓存)–>返回到首页(需要缓存)–>再次进入列表页(不需要缓存)，这时候可以按需来控制页面的keep-alive 在路由中设置keepAlive属性判断是否需要缓存 { path: 'list', name: 'itemList', // 列表页 component (resolve) { require(['@/pages/item/list'], resolve) }, meta: { keepAlive: true, title: '列表页' } } 使用 三、原理分析 keep-alive是vue中内置的一个组件 源码位置：src/core/components/keep-alive.js export default { name: 'keep-alive', abstract: true, props: { include: [String, RegExp, Array], exclude: [String, RegExp, Array], max: [String, Number] }, created () { this.cache = Object.create(null) this.keys = [] }, destroyed () { for (const key in this.cache) { pruneCacheEntry(this.cache, key, this.keys) } }, mounted () { this.$watch('include', val => { pruneCache(this, name => matches(val, name)) }) this.$watch('exclude', val => { pruneCache(this, name => !matches(val, name)) }) }, render() { /* 获取默认插槽中的第一个组件节点 */ const slot = this.$slots.default const vnode = getFirstComponentChild(slot) /* 获取该组件节点的componentOptions */ const componentOptions = vnode && vnode.componentOptions if (componentOptions) { /* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */ const name = getComponentName(componentOptions) const { include, exclude } = this /* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */ if ( (include && (!name || !matches(include, name))) || // excluded (exclude && name && matches(exclude, name)) ) { return vnode } const { cache, keys } = this /* 获取组件的key值 */ const key = vnode.key == null // same constructor may get registered as different local components // so cid alone is not enough (#3269) ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '') : vnode.key /* 拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存 */ if (cache[key]) { vnode.componentInstance = cache[key].componentInstance // make current key freshest remove(keys, key) keys.push(key) } /* 如果没有命中缓存，则将其设置进缓存 */ else { cache[key] = vnode keys.push(key) // prune oldest entry /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */ if (this.max && keys.length > parseInt(this.max)) { pruneCacheEntry(cache, keys[0], keys, this._vnode) } } vnode.data.keepAlive = true } return vnode || (slot && slot[0]) } } 可以看到该组件没有template，而是用了render，在组件渲染的时候会自动执行render函数 this.cache是一个对象，用来存储需要缓存的组件，它将以如下形式存储： this.cache = { 'key1':'组件1', 'key2':'组件2', // ... } 在组件销毁的时候执行pruneCacheEntry函数 function pruneCacheEntry ( cache: VNodeCache, key: string, keys: Array, current?: VNode ) { const cached = cache[key] /* 判断当前没有处于被渲染状态的组件，将其销毁*/ if (cached && (!current || cached.tag !== current.tag)) { cached.componentInstance.$destroy() } cache[key] = null remove(keys, key) } 在mounted钩子函数中观测 include 和 exclude 的变化，如下： mounted () { this.$watch('include', val => { pruneCache(this, name => matches(val, name)) }) this.$watch('exclude', val => { pruneCache(this, name => !matches(val, name)) }) } 如果include 或exclude 发生了变化，即表示定义需要缓存的组件的规则或者不需要缓存的组件的规则发生了变化，那么就执行pruneCache函数，函数如下： function pruneCache (keepAliveInstance, filter) { const { cache, keys, _vnode } = keepAliveInstance for (const key in cache) { const cachedNode = cache[key] if (cachedNode) { const name = getComponentName(cachedNode.componentOptions) if (name && !filter(name)) { pruneCacheEntry(cache, key, keys, _vnode) } } } } 在该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用pruneCacheEntry函数将其从this.cache对象剔除即可 关于keep-alive的最强大缓存功能是在render函数中实现 首先获取组件的key值： const key = vnode.key == null? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '') : vnode.key 拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存，如下： /* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */ if (cache[key]) { vnode.componentInstance = cache[key].componentInstance /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */ remove(keys, key) keys.push(key) } 直接从缓存中拿 vnode 的组件实例，此时重新调整该组件key的顺序，将其从原来的地方删掉并重新放在this.keys中最后一个 this.cache对象中没有该key值的情况，如下： /* 如果没有命中缓存，则将其设置进缓存 */ else { cache[key] = vnode keys.push(key) /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */ if (this.max && keys.length > parseInt(this.max)) { pruneCacheEntry(cache, keys[0], keys, this._vnode) } } 表明该组件还没有被缓存过，则以该组件的key为键，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中 此时再判断this.keys中缓存组件的数量是否超过了设置的最大缓存数量值this.max，如果超过了，则把第一个缓存组件删掉 四、思考题：缓存后如何获取数据 解决方案可以有以下两种： beforeRouteEnter actived beforeRouteEnter 每次组件渲染的时候，都会执行beforeRouteEnter beforeRouteEnter(to, from, next){ next(vm=>{ console.log(vm) // 每次进入路由执行 vm.getData() // 获取数据 }) }, actived 在keep-alive缓存的组件被激活的时候，都会执行actived钩子 activated(){ this.getData() // 获取数据 }, 注意：服务器端渲染期间avtived不被调用 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/mixin.html":{"url":"vue/mixin.html","title":"Vue中mixin的理解","keywords":"","body":"面试官：说说你对vue的mixin的理解，有什么应用场景？ 一、mixin是什么 Mixin是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问mixin类的方法而不必成为其子类 Mixin类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂 Vue中的mixin 先来看一下官方定义 mixin（混入），提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。 本质其实就是一个js对象，它可以包含我们组件中任意功能选项，如data、components、methods、created、computed等等 我们只要将共用的功能以对象的方式传入 mixins选项中，当组件使用 mixins对象时所有mixins对象的选项都将被混入该组件本身的选项中来 在Vue中我们可以局部混入跟全局混入 局部混入 定义一个mixin对象，有组件options的data、methods属性 var myMixin = { created: function () { this.hello() }, methods: { hello: function () { console.log('hello from mixin!') } } } 组件通过mixins属性调用mixin对象 Vue.component('componentA',{ mixins: [myMixin] }) 该组件在使用的时候，混合了mixin里面的方法，在自动执行create生命钩子，执行hello方法 全局混入 通过Vue.mixin()进行全局的混入 Vue.mixin({ created: function () { console.log(\"全局混入\") } }) 使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件） PS：全局混入常用于插件的编写 注意事项： 当组件存在与mixin对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖mixin的选项 但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行mixin的钩子，再执行组件的钩子 二、使用场景 在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立 这时，可以通过Vue的mixin功能将相同或者相似的代码提出来 举个例子 定义一个modal弹窗组件，内部通过isShowing来控制显示 const Modal = { template: '#modal', data() { return { isShowing: false } }, methods: { toggleShow() { this.isShowing = !this.isShowing; } } } 定义一个tooltip提示框，内部通过isShowing来控制显示 const Tooltip = { template: '#tooltip', data() { return { isShowing: false } }, methods: { toggleShow() { this.isShowing = !this.isShowing; } } } 通过观察上面两个组件，发现两者的逻辑是相同，代码控制显示也是相同的，这时候mixin就派上用场了 首先抽出共同代码，编写一个mixin const toggle = { data() { return { isShowing: false } }, methods: { toggleShow() { this.isShowing = !this.isShowing; } } } 两个组件在使用上，只需要引入mixin const Modal = { template: '#modal', mixins: [toggle] }; const Tooltip = { template: '#tooltip', mixins: [toggle] } 通过上面小小的例子，让我们知道了Mixin对于封装一些可复用的功能如此有趣、方便、实用 三、源码分析 首先从Vue.mixin入手 源码位置：/src/core/global-api/mixin.js export function initMixin (Vue: GlobalAPI) { Vue.mixin = function (mixin: Object) { this.options = mergeOptions(this.options, mixin) return this } } 主要是调用merOptions方法 源码位置：/src/core/util/options.js export function mergeOptions ( parent: Object, child: Object, vm?: Component ): Object { if (child.mixins) { // 判断有没有mixin 也就是mixin里面挂mixin的情况 有的话递归进行合并 for (let i = 0, l = child.mixins.length; i 从上面的源码，我们得到以下几点： 优先递归处理 mixins 先遍历合并parent 中的key，调用mergeField方法进行合并，然后保存在变量options 再遍历 child，合并补上 parent 中没有的key，调用mergeField方法进行合并，保存在变量options 通过 mergeField 函数进行了合并 下面是关于Vue的几种类型的合并策略 替换型 合并型 队列型 叠加型 替换型 替换型合并有props、methods、inject、computed strats.props = strats.methods = strats.inject = strats.computed = function ( parentVal: ?Object, childVal: ?Object, vm?: Component, key: string ): ?Object { if (!parentVal) return childVal // 如果parentVal没有值，直接返回childVal const ret = Object.create(null) // 创建一个第三方对象 ret extend(ret, parentVal) // extend方法实际是把parentVal的属性复制到ret中 if (childVal) extend(ret, childVal) // 把childVal的属性复制到ret中 return ret } strats.provide = mergeDataOrFn 同名的props、methods、inject、computed会被后来者代替 合并型 和并型合并有：data strats.data = function(parentVal, childVal, vm) { return mergeDataOrFn( parentVal, childVal, vm ) }; function mergeDataOrFn(parentVal, childVal, vm) { return function mergedInstanceDataFn() { var childData = childVal.call(vm, vm) // 执行data挂的函数得到对象 var parentData = parentVal.call(vm, vm) if (childData) { return mergeData(childData, parentData) // 将2个对象进行合并 } else { return parentData // 如果没有childData 直接返回parentData } } } function mergeData(to, from) { if (!from) return to var key, toVal, fromVal; var keys = Object.keys(from); for (var i = 0; i mergeData函数遍历了要合并的 data 的所有属性，然后根据不同情况进行合并： 当目标 data 对象不包含当前属性时，调用 set 方法进行合并（set方法其实就是一些合并重新赋值的方法） 当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为了防止对象存在新增属性 队列性 队列性合并有：全部生命周期和watch function mergeHook ( parentVal: ?Array, childVal: ?Function | ?Array ): ?Array { return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal } LIFECYCLE_HOOKS.forEach(hook => { strats[hook] = mergeHook }) // watch strats.watch = function ( parentVal, childVal, vm, key ) { // work around Firefox's Object.prototype.watch... if (parentVal === nativeWatch) { parentVal = undefined; } if (childVal === nativeWatch) { childVal = undefined; } /* istanbul ignore if */ if (!childVal) { return Object.create(parentVal || null) } { assertObjectType(key, childVal, vm); } if (!parentVal) { return childVal } var ret = {}; extend(ret, parentVal); for (var key$1 in childVal) { var parent = ret[key$1]; var child = childVal[key$1]; if (parent && !Array.isArray(parent)) { parent = [parent]; } ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child]; } return ret }; 生命周期钩子和watch被合并为一个数组，然后正序遍历一次执行 叠加型 叠加型合并有：component、directives、filters strats.components= strats.directives= strats.filters = function mergeAssets( parentVal, childVal, vm, key ) { var res = Object.create(parentVal || null); if (childVal) { for (var key in childVal) { res[key] = childVal[key]; } } return res } 叠加型主要是通过原型链进行层层的叠加 小结： 替换型策略有props、methods、inject、computed，就是将新的同名参数替代旧的参数 合并型策略是data, 通过set方法进行合并和重新赋值 队列型策略有生命周期函数和watch，原理是将函数存入一个数组，然后正序遍历依次执行 叠加型有component、directives、filters，通过原型链进行层层的叠加 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/spa.html":{"url":"vue/spa.html","title":"SPA单页面的理解以及它的优缺点","keywords":"","body":"面试官：你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢 一、什么是SPA SPA（single-page application），翻译过来就是单页应用SPA是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（HTML、JavaScript和CSS）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面页面在任何时间点都不会重新加载，也不会将控制转移到其他页面举个例子来讲就是一个杯子，早上装的牛奶，中午装的是开水，晚上装的是茶，我们发现，变的始终是杯子里的内容，而杯子始终是那个杯子结构如下图 我们熟知的JS框架如react,vue,angular,ember都属于SPA 二、SPA和MPA的区别 上面大家已经对单页面有所了解了，下面来讲讲多页应用MPA（MultiPage-page application），翻译过来就是多页应用在MPA中，每个页面都是一个主页面，都是独立的当我们在访问另一个页面的时候，都需要重新加载html、css、js文件，公共文件则根据需求按需加载如下图 单页应用与多页应用的区别 单页面应用（SPA） 多页面应用（MPA） 组成 一个主页面和多个页面片段 多个主页面 刷新方式 局部刷新 整页刷新 url模式 哈希模式 历史模式 SEO搜索引擎优化 难实现，可使用SSR方式改善 容易实现 数据传递 容易 通过url、cookie、localStorage等传递 页面切换 速度快，用户体验良好 切换加载资源，速度慢，用户体验差 维护成本 相对容易 相对复杂 单页应用优缺点 优点： 具有桌面应用的即时性、网站的可移植性和可访问性 用户体验好、快，内容的改变不需要重新加载整个页面 良好的前后端分离，分工更明确 缺点： 不利于搜索引擎的抓取 首次渲染速度相对较慢 三、实现一个SPA 原理 监听地址栏中hash变化驱动界面变化 用pushsate记录浏览器的历史，驱动界面发送变化 实现 hash 模式 核心通过监听url中的hash来进行路由跳转 // 定义 Router class Router { constructor () { this.routes = {}; // 存放路由path及callback this.currentUrl = ''; // 监听路由change调用相对应的路由回调 window.addEventListener('load', this.refresh, false); window.addEventListener('hashchange', this.refresh, false); } route(path, callback){ this.routes[path] = callback; } push(path) { this.routes[path] && this.routes[path]() } } // 使用 router window.miniRouter = new Router(); miniRouter.route('/', () => console.log('page1')) miniRouter.route('/page2', () => console.log('page2')) miniRouter.push('/') // page1 miniRouter.push('/page2') // page2 history模式 history 模式核心借用 HTML5 history api，api 提供了丰富的 router 相关属性先了解一个几个相关的api history.pushState 浏览器历史纪录添加记录 history.replaceState修改浏览器历史纪录中当前纪录 history.popState 当 history 发生变化时触发 // 定义 Router class Router { constructor () { this.routes = {}; this.listerPopState() } init(path) { history.replaceState({path: path}, null, path); this.routes[path] && this.routes[path](); } route(path, callback){ this.routes[path] = callback; } push(path) { history.pushState({path: path}, null, path); this.routes[path] && this.routes[path](); } listerPopState () { window.addEventListener('popstate' , e => { const path = e.state && e.state.path; this.routers[path] && this.routers[path]() }) } } // 使用 Router window.miniRouter = new Router(); miniRouter.route('/', ()=> console.log('page1')) miniRouter.route('/page2', ()=> console.log('page2')) // 跳转 miniRouter.push('/page2') // page2 四、题外话：如何给SPA做SEO 下面给出基于Vue的SPA如何实现SEO的三种方式 SSR服务端渲染 将组件或页面通过服务器生成html，再返回给浏览器，如nuxt.js 静态化 目前主流的静态化主要有两种：（1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中（2）另外一种是通过WEB服务器的 URL Rewrite的方式，它的原理是通过web服务器内部模块按一定规则将外部的URL请求转化为内部的文件地址，一句话来说就是把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。这两种方法都达到了实现URL静态化的效果 使用Phantomjs针对爬虫处理 原理是通过Nginx配置，判断访问来源是否为爬虫，如果是则搜索引擎的爬虫请求会转发到一个node server，再通过PhantomJS来解析完整的HTML，返回给爬虫。下面是大致流程图 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/ssr.html":{"url":"vue/ssr.html","title":"服务端渲染SSR","keywords":"","body":"面试官：SSR解决了什么问题？有做过SSR吗？你是怎么做的？ 一、是什么 Server-Side Rendering 我们称其为SSR，意为服务端渲染 指由服务侧完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程 先来看看Web3个阶段的发展史： 传统服务端渲染SSR 单页面应用SPA 服务端渲染SSR 传统web开发 网页内容在服务端渲染完成，⼀次性传输到浏览器 打开页面查看源码，浏览器拿到的是全部的dom结构 单页应用SPA 单页应用优秀的用户体验，使其逐渐成为主流，页面内容由JS渲染出来，这种方式称为客户端渲染 打开页面查看源码，浏览器拿到的仅有宿主元素#app，并没有内容 服务端渲染SSR SSR解决方案，后端渲染出完整的首屏的dom结构返回，前端拿到的内容包括首屏及完整spa结构，应用激活后依然按照spa方式运行 看完前端发展，我们再看看Vue官方对SSR的解释： Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记\"激活\"为客户端上完全可交互的应用程序 服务器渲染的 Vue.js 应用程序也可以被认为是\"同构\"或\"通用\"，因为应用程序的大部分代码都可以在服务器和客户端上运行 我们从上门解释得到以下结论： Vue SSR是一个在SPA上进行改良的服务端渲染 通过Vue SSR渲染的页面，需要在客户端激活才能实现交互 Vue SSR将包含两部分：服务端渲染的首屏，包含交互的SPA 二、解决了什么 SSR主要解决了以下两种问题： seo：搜索引擎优先爬取页面HTML结构，使用ssr时，服务端已经生成了和业务想关联的HTML，有利于seo 首屏呈现渲染：用户无需等待页面所有js加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端） 但是使用SSR同样存在以下的缺点： 复杂度：整个项目的复杂度 库的支持性，代码兼容 性能问题 每个请求都是n个实例的创建，不然会污染，消耗会变得很大 缓存 node serve、 nginx判断当前用户有没有过期，如果没过期的话就缓存，用刚刚的结果。 降级：监控cpu、内存占用过多，就spa，返回单个的壳 服务器负载变大，相对于前后端分离务器只需要提供静态资源来说，服务器负载更大，所以要慎重使用 所以在我们选择是否使用SSR前，我们需要慎重问问自己这些问题： 需要SEO的页面是否只是少数几个，这些是否可以使用预渲染（Prerender SPA Plugin）实现 首屏的请求响应逻辑是否复杂，数据返回是否大量且缓慢 三、如何实现 对于同构开发，我们依然使用webpack打包，我们要解决两个问题：服务端首屏渲染和客户端激活 这里需要生成一个服务器bundle文件用于服务端首屏渲染和一个客户端bundle文件用于客户端激活 代码结构 除了两个不同入口之外，其他结构和之前vue应用完全相同 src ├── router ├────── index.js # 路由声明 ├── store ├────── index.js # 全局状态 ├── main.js # ⽤于创建vue实例 ├── entry-client.js # 客户端⼊⼝，⽤于静态内容“激活” └── entry-server.js # 服务端⼊⼝，⽤于⾸屏内容渲染 路由配置 import Vue from \"vue\"; import Router from \"vue-router\"; Vue.use(Router); //导出⼯⼚函数 export function createRouter() { return new Router({ mode: 'history', routes: [ // 客户端没有编译器，这⾥要写成渲染函数 { path: \"/\", component: { render: h => h('div', 'index page') } }, { path: \"/detail\", component: { render: h => h('div', 'detail page') } } ] }); } 主文件main.js 跟之前不同，主文件是负责创建vue实例的工厂，每次请求均会有独立的vue实例创建 import Vue from \"vue\"; import App from \"./App.vue\"; import { createRouter } from \"./router\"; // 导出Vue实例⼯⼚函数，为每次请求创建独⽴实例 // 上下⽂⽤于给vue实例传递参数 export function createApp(context) { const router = createRouter(); const app = new Vue({ router, context, render: h => h(App) }); return { app, router }; } 编写服务端入口src/entry-server.js 它的任务是创建Vue实例并根据传入url指定首屏 import { createApp } from \"./main\"; // 返回⼀个函数，接收请求上下⽂，返回创建的vue实例 export default context => { // 这⾥返回⼀个Promise，确保路由或组件准备就绪 return new Promise((resolve, reject) => { const { app, router } = createApp(context); // 跳转到⾸屏的地址 router.push(context.url); // 路由就绪，返回结果 router.onReady(() => { resolve(app); }, reject); }); }; 编写客户端入口entry-client.js 客户端入口只需创建vue实例并执行挂载，这⼀步称为激活 import { createApp } from \"./main\"; // 创建vue、router实例 const { app, router } = createApp(); // 路由就绪，执⾏挂载 router.onReady(() => { app.$mount(\"#app\"); }); 对webpack进行配置 安装依赖 npm install webpack-node-externals lodash.merge -D 对vue.config.js进行配置 // 两个插件分别负责打包客户端和服务端 const VueSSRServerPlugin = require(\"vue-server-renderer/server-plugin\"); const VueSSRClientPlugin = require(\"vue-server-renderer/client-plugin\"); const nodeExternals = require(\"webpack-node-externals\"); const merge = require(\"lodash.merge\"); // 根据传⼊环境变量决定⼊⼝⽂件和相应配置项 const TARGET_NODE = process.env.WEBPACK_TARGET === \"node\"; const target = TARGET_NODE ? \"server\" : \"client\"; module.exports = { css: { extract: false }, outputDir: './dist/'+target, configureWebpack: () => ({ // 将 entry 指向应⽤程序的 server / client ⽂件 entry: `./src/entry-${target}.js`, // 对 bundle renderer 提供 source map ⽀持 devtool: 'source-map', // target设置为node使webpack以Node适⽤的⽅式处理动态导⼊， // 并且还会在编译Vue组件时告知`vue-loader`输出⾯向服务器代码。 target: TARGET_NODE ? \"node\" : \"web\", // 是否模拟node全局变量 node: TARGET_NODE ? undefined : false, output: { // 此处使⽤Node⻛格导出模块 libraryTarget: TARGET_NODE ? \"commonjs2\" : undefined }, // https://webpack.js.org/configuration/externals/#function // https://github.com/liady/webpack-node-externals // 外置化应⽤程序依赖模块。可以使服务器构建速度更快，并⽣成较⼩的打包⽂件。 externals: TARGET_NODE ? nodeExternals({ // 不要外置化webpack需要处理的依赖模块。 // 可以在这⾥添加更多的⽂件类型。例如，未处理 *.vue 原始⽂件， // 还应该将修改`global`（例如polyfill）的依赖模块列⼊⽩名单 whitelist: [/\\.css$/] }) : undefined, optimization: { splitChunks: undefined }, // 这是将服务器的整个输出构建为单个 JSON ⽂件的插件。 // 服务端默认⽂件名为 `vue-ssr-server-bundle.json` // 客户端默认⽂件名为 `vue-ssr-client-manifest.json`。 plugins: [TARGET_NODE ? new VueSSRServerPlugin() : new VueSSRClientPlugin()] }), chainWebpack: config => { // cli4项⽬添加 if (TARGET_NODE) { config.optimization.delete('splitChunks') } config.module .rule(\"vue\") .use(\"vue-loader\") .tap(options => { merge(options, { optimizeSSR: false }); }); } }; 对脚本进行配置，安装依赖 npm i cross-env -D 定义创建脚本package.json \"scripts\": { \"build:client\": \"vue-cli-service build\", \"build:server\": \"cross-env WEBPACK_TARGET=node vue-cli-service build\", \"build\": \"npm run build:server && npm run build:client\" } 执行打包：npm run build 最后修改宿主文件/public/index.html Document 是服务端渲染入口位置，注意不能为了好看而在前后加空格 安装vuex npm install -S vuex 创建vuex工厂函数 import Vue from 'vue' import Vuex from 'vuex' Vue.use(Vuex) export function createStore () { return new Vuex.Store({ state: { count:108 }, mutations: { add(state){ state.count += 1; } } }) } 在main.js文件中挂载store import { createStore } from './store' export function createApp (context) { // 创建实例 const store = createStore() const app = new Vue({ store, // 挂载 render: h => h(App) }) return { app, router, store } } 服务器端渲染的是应用程序的\"快照\"，如果应用依赖于⼀些异步数据，那么在开始渲染之前，需要先预取和解析好这些数据 在store进行一步数据获取 export function createStore() { return new Vuex.Store({ mutations: { // 加⼀个初始化 init(state, count) { state.count = count; }, }, actions: { // 加⼀个异步请求count的action getCount({ commit }) { return new Promise(resolve => { setTimeout(() => { commit(\"init\", Math.random() * 100); resolve(); }, 1000); }); }, }, }); } 组件中的数据预取逻辑 export default { asyncData({ store, route }) { // 约定预取逻辑编写在预取钩⼦asyncData中 // 触发 action 后，返回 Promise 以便确定请求结果 return store.dispatch(\"getCount\"); } }; 服务端数据预取，entry-server.js import { createApp } from \"./app\"; export default context => { return new Promise((resolve, reject) => { // 拿出store和router实例 const { app, router, store } = createApp(context); router.push(context.url); router.onReady(() => { // 获取匹配的路由组件数组 const matchedComponents = router.getMatchedComponents(); // 若⽆匹配则抛出异常 if (!matchedComponents.length) { return reject({ code: 404 }); } // 对所有匹配的路由组件调⽤可能存在的`asyncData()` Promise.all( matchedComponents.map(Component => { if (Component.asyncData) { return Component.asyncData({ store, route: router.currentRoute, }); } }), ) .then(() => { // 所有预取钩⼦ resolve 后， // store 已经填充⼊渲染应⽤所需状态 // 将状态附加到上下⽂，且 `template` 选项⽤于 renderer 时， // 状态将⾃动序列化为 `window.__INITIAL_STATE__`，并注⼊ HTML context.state = store.state; resolve(app); }) .catch(reject); }, reject); }); }; 客户端在挂载到应用程序之前，store 就应该获取到状态，entry-client.js // 导出store const { app, router, store } = createApp(); // 当使⽤ template 时，context.state 将作为 window.__INITIAL_STATE__ 状态⾃动嵌⼊到最终的 HTML // 在客户端挂载到应⽤程序之前，store 就应该获取到状态： if (window.__INITIAL_STATE__) { store.replaceState(window.__INITIAL_STATE__); } 客户端数据预取处理，main.js Vue.mixin({ beforeMount() { const { asyncData } = this.$options; if (asyncData) { // 将获取数据操作分配给 promise // 以便在组件中，我们可以在数据准备就绪后 // 通过运⾏ `this.dataPromise.then(...)` 来执⾏其他任务 this.dataPromise = asyncData({ store: this.$store, route: this.$route, }); } }, }); 修改服务器启动文件 // 获取⽂件路径 const resolve = dir => require('path').resolve(__dirname, dir) // 第 1 步：开放dist/client⽬录，关闭默认下载index⻚的选项，不然到不了后⾯路由 app.use(express.static(resolve('../dist/client'), {index: false})) // 第 2 步：获得⼀个createBundleRenderer const { createBundleRenderer } = require(\"vue-server-renderer\"); // 第 3 步：服务端打包⽂件地址 const bundle = resolve(\"../dist/server/vue-ssr-server-bundle.json\"); // 第 4 步：创建渲染器 const renderer = createBundleRenderer(bundle, { runInNewContext: false, // https://ssr.vuejs.org/zh/api/#runinnewcontext template: require('fs').readFileSync(resolve(\"../public/index.html\"), \"utf8\"), // 宿主⽂件 clientManifest: require(resolve(\"../dist/client/vue-ssr-clientmanifest.json\")) // 客户端清单 }); app.get('*', async (req,res)=>{ // 设置url和title两个重要参数 const context = { title:'ssr test', url:req.url } const html = await renderer.renderToString(context); res.send(html) }) 小结 使用ssr不存在单例模式，每次用户请求都会创建一个新的vue实例 实现ssr需要实现服务端首屏渲染和客户端激活 服务端异步获取数据asyncData可以分为首屏异步获取和切换组件获取 首屏异步获取数据，在服务端预渲染的时候就应该已经完成 切换组件通过mixin混入，在beforeMount钩子完成数据获取 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/new_vue.html":{"url":"vue/new_vue.html","title":"Vue实例挂载的过程","keywords":"","body":"面试官：Vue实例挂载的过程 一、思考 我们都听过知其然知其所以然这句话 那么不知道大家是否思考过new Vue()这个过程中究竟做了些什么？ 过程中是如何完成数据的绑定，又是如何将数据渲染到视图的等等 一、分析 首先找到vue的构造函数 源码位置：src\\core\\instance\\index.js function Vue (options) { if (process.env.NODE_ENV !== 'production' && !(this instanceof Vue) ) { warn('Vue is a constructor and should be called with the `new` keyword') } this._init(options) } options是用户传递过来的配置项，如data、methods等常用的方法 vue构建函数调用_init方法，但我们发现本文件中并没有此方法，但仔细可以看到文件下方定定义了很多初始化方法 initMixin(Vue); // 定义 _init stateMixin(Vue); // 定义 $set $get $delete $watch 等 eventsMixin(Vue); // 定义事件 $on $once $off $emit lifecycleMixin(Vue);// 定义 _update $forceUpdate $destroy renderMixin(Vue); // 定义 _render 返回虚拟dom 首先可以看initMixin方法，发现该方法在Vue原型上定义了_init方法 源码位置：src\\core\\instance\\init.js Vue.prototype._init = function (options?: Object) { const vm: Component = this // a uid vm._uid = uid++ let startTag, endTag /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { startTag = `vue-perf-start:${vm._uid}` endTag = `vue-perf-end:${vm._uid}` mark(startTag) } // a flag to avoid this being observed vm._isVue = true // merge options // 合并属性，判断初始化的是否是组件，这里合并主要是 mixins 或 extends 的方法 if (options && options._isComponent) { // optimize internal component instantiation // since dynamic options merging is pretty slow, and none of the // internal component options needs special treatment. initInternalComponent(vm, options) } else { // 合并vue属性 vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor), options || {}, vm ) } /* istanbul ignore else */ if (process.env.NODE_ENV !== 'production') { // 初始化proxy拦截器 initProxy(vm) } else { vm._renderProxy = vm } // expose real self vm._self = vm // 初始化组件生命周期标志位 initLifecycle(vm) // 初始化组件事件侦听 initEvents(vm) // 初始化渲染方法 initRender(vm) callHook(vm, 'beforeCreate') // 初始化依赖注入内容，在初始化data、props之前 initInjections(vm) // resolve injections before data/props // 初始化props/data/method/watch/methods initState(vm) initProvide(vm) // resolve provide after data/props callHook(vm, 'created') /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { vm._name = formatComponentName(vm, false) mark(endTag) measure(`vue ${vm._name} init`, startTag, endTag) } // 挂载元素 if (vm.$options.el) { vm.$mount(vm.$options.el) } } 仔细阅读上面的代码，我们得到以下结论： 在调用beforeCreate之前，数据初始化并未完成，像data、props这些属性无法访问到 到了created的时候，数据已经初始化完成，能够访问data、props这些属性，但这时候并未完成dom的挂载，因此无法访问到dom元素 挂载方法是调用vm.$mount方法 initState方法是完成props/data/method/watch/methods的初始化 源码位置：src\\core\\instance\\state.js export function initState (vm: Component) { // 初始化组件的watcher列表 vm._watchers = [] const opts = vm.$options // 初始化props if (opts.props) initProps(vm, opts.props) // 初始化methods方法 if (opts.methods) initMethods(vm, opts.methods) if (opts.data) { // 初始化data initData(vm) } else { observe(vm._data = {}, true /* asRootData */) } if (opts.computed) initComputed(vm, opts.computed) if (opts.watch && opts.watch !== nativeWatch) { initWatch(vm, opts.watch) } } 我们和这里主要看初始化data的方法为initData，它与initState在同一文件上 function initData (vm: Component) { let data = vm.$options.data // 获取到组件上的data data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {} if (!isPlainObject(data)) { data = {} process.env.NODE_ENV !== 'production' && warn( 'data functions should return an object:\\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm ) } // proxy data on instance const keys = Object.keys(data) const props = vm.$options.props const methods = vm.$options.methods let i = keys.length while (i--) { const key = keys[i] if (process.env.NODE_ENV !== 'production') { // 属性名不能与方法名重复 if (methods && hasOwn(methods, key)) { warn( `Method \"${key}\" has already been defined as a data property.`, vm ) } } // 属性名不能与state名称重复 if (props && hasOwn(props, key)) { process.env.NODE_ENV !== 'production' && warn( `The data property \"${key}\" is already declared as a prop. ` + `Use prop default value instead.`, vm ) } else if (!isReserved(key)) { // 验证key值的合法性 // 将_data中的数据挂载到组件vm上,这样就可以通过this.xxx访问到组件上的数据 proxy(vm, `_data`, key) } } // observe data // 响应式监听data是数据的变化 observe(data, true /* asRootData */) } 仔细阅读上面的代码，我们可以得到以下结论： 初始化顺序：props、methods、data data定义的时候可选择函数形式或者对象形式（组件只能为函数形式） 关于数据响应式在这就不展开详细说明 上文提到挂载方法是调用vm.$mount方法 源码位置： Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { // 获取或查询元素 el = el && query(el) /* istanbul ignore if */ // vue 不允许直接挂载到body或页面文档上 if (el === document.body || el === document.documentElement) { process.env.NODE_ENV !== 'production' && warn( `Do not mount Vue to or - mount to normal elements instead.` ) return this } const options = this.$options // resolve template/el and convert to render function if (!options.render) { let template = options.template // 存在template模板，解析vue模板文件 if (template) { if (typeof template === 'string') { if (template.charAt(0) === '#') { template = idToTemplate(template) /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && !template) { warn( `Template element not found or is empty: ${options.template}`, this ) } } } else if (template.nodeType) { template = template.innerHTML } else { if (process.env.NODE_ENV !== 'production') { warn('invalid template option:' + template, this) } return this } } else if (el) { // 通过选择器获取元素内容 template = getOuterHTML(el) } if (template) { /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { mark('compile') } /** * 1.将temmplate解析ast tree * 2.将ast tree转换成render语法字符串 * 3.生成render方法 */ const { render, staticRenderFns } = compileToFunctions(template, { outputSourceRange: process.env.NODE_ENV !== 'production', shouldDecodeNewlines, shouldDecodeNewlinesForHref, delimiters: options.delimiters, comments: options.comments }, this) options.render = render options.staticRenderFns = staticRenderFns /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { mark('compile end') measure(`vue ${this._name} compile`, 'compile', 'compile end') } } } return mount.call(this, el, hydrating) } 阅读上面代码，我们能得到以下结论： 不要将根元素放到body或者html上 可以在对象中定义template/render或者直接使用template、el表示元素选择器 最终都会解析成render函数，调用compileToFunctions，会将template解析成render函数 对template的解析步骤大致分为以下几步： 将html文档片段解析成ast描述符 将ast描述符解析成字符串 生成render函数 生成render函数，挂载到vm上后，会再次调用mount方法 源码位置：src\\platforms\\web\\runtime\\index.js // public mount method Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el && inBrowser ? query(el) : undefined // 渲染组件 return mountComponent(this, el, hydrating) } 调用mountComponent渲染组件 export function mountComponent ( vm: Component, el: ?Element, hydrating?: boolean ): Component { vm.$el = el // 如果没有获取解析的render函数，则会抛出警告 // render是解析模板文件生成的 if (!vm.$options.render) { vm.$options.render = createEmptyVNode if (process.env.NODE_ENV !== 'production') { /* istanbul ignore if */ if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') || vm.$options.el || el) { warn( 'You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm ) } else { // 没有获取到vue的模板文件 warn( 'Failed to mount component: template or render function not defined.', vm ) } } } // 执行beforeMount钩子 callHook(vm, 'beforeMount') let updateComponent /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { updateComponent = () => { const name = vm._name const id = vm._uid const startTag = `vue-perf-start:${id}` const endTag = `vue-perf-end:${id}` mark(startTag) const vnode = vm._render() mark(endTag) measure(`vue ${name} render`, startTag, endTag) mark(startTag) vm._update(vnode, hydrating) mark(endTag) measure(`vue ${name} patch`, startTag, endTag) } } else { // 定义更新函数 updateComponent = () => { // 实际调⽤是在lifeCycleMixin中定义的_update和renderMixin中定义的_render vm._update(vm._render(), hydrating) } } // we set this to vm._watcher inside the watcher's constructor // since the watcher's initial patch may call $forceUpdate (e.g. inside child // component's mounted hook), which relies on vm._watcher being already defined // 监听当前组件状态，当有数据变化时，更新组件 new Watcher(vm, updateComponent, noop, { before () { if (vm._isMounted && !vm._isDestroyed) { // 数据更新引发的组件更新 callHook(vm, 'beforeUpdate') } } }, true /* isRenderWatcher */) hydrating = false // manually mounted instance, call mounted on self // mounted is called for render-created child components in its inserted hook if (vm.$vnode == null) { vm._isMounted = true callHook(vm, 'mounted') } return vm } 阅读上面代码，我们得到以下结论： 会触发boforeCreate钩子 定义updateComponent渲染页面视图的方法 监听组件数据，一旦发生变化，触发beforeUpdate生命钩子 updateComponent方法主要执行在vue初始化时声明的render，update方法 render的作用主要是生成vnode 源码位置：src\\core\\instance\\render.js // 定义vue 原型上的render方法 Vue.prototype._render = function (): VNode { const vm: Component = this // render函数来自于组件的option const { render, _parentVnode } = vm.$options if (_parentVnode) { vm.$scopedSlots = normalizeScopedSlots( _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots ) } // set parent vnode. this allows render functions to have access // to the data on the placeholder node. vm.$vnode = _parentVnode // render self let vnode try { // There's no need to maintain a stack because all render fns are called // separately from one another. Nested component's render fns are called // when parent component is patched. currentRenderingInstance = vm // 调用render方法，自己的独特的render方法， 传入createElement参数，生成vNode vnode = render.call(vm._renderProxy, vm.$createElement) } catch (e) { handleError(e, vm, `render`) // return error render result, // or previous vnode to prevent render error causing blank component /* istanbul ignore else */ if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) { try { vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) } catch (e) { handleError(e, vm, `renderError`) vnode = vm._vnode } } else { vnode = vm._vnode } } finally { currentRenderingInstance = null } // if the returned array contains only a single node, allow it if (Array.isArray(vnode) && vnode.length === 1) { vnode = vnode[0] } // return empty vnode in case the render function errored out if (!(vnode instanceof VNode)) { if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) { warn( 'Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm ) } vnode = createEmptyVNode() } // set parent vnode.parent = _parentVnode return vnode } _update主要功能是调用patch，将vnode转换为真实DOM，并且更新到页面中 源码位置：src\\core\\instance\\lifecycle.js Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) { const vm: Component = this const prevEl = vm.$el const prevVnode = vm._vnode // 设置当前激活的作用域 const restoreActiveInstance = setActiveInstance(vm) vm._vnode = vnode // Vue.prototype.__patch__ is injected in entry points // based on the rendering backend used. if (!prevVnode) { // initial render // 执行具体的挂载逻辑 vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */) } else { // updates vm.$el = vm.__patch__(prevVnode, vnode) } restoreActiveInstance() // update __vue__ reference if (prevEl) { prevEl.__vue__ = null } if (vm.$el) { vm.$el.__vue__ = vm } // if parent is an HOC, update its $el as well if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) { vm.$parent.$el = vm.$el } // updated hook is called by the scheduler to ensure that children are // updated in a parent's updated hook. } 三、结论 new Vue的时候调用会调用_init方法 定义 $set、$get 、$delete、$watch 等方法 定义 $on、$off、$emit、$off等事件 定义 _update、$forceUpdate、$destroy生命周期 调用$mount进行页面的挂载 挂载的时候主要是通过mountComponent方法 定义updateComponent更新函数 执行render生成虚拟DOM _update将虚拟DOM生成真实DOM结构，并且渲染到页面中 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/modifier.html":{"url":"vue/modifier.html","title":"Vue常用的修饰符","keywords":"","body":"面试官：Vue常用的修饰符有哪些有什么应用场景 一、修饰符是什么 在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号 在Vue中，修饰符处理了许多DOM事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理 vue中修饰符分为以下五种： 表单修饰符 事件修饰符 鼠标按键修饰符 键值修饰符 v-bind修饰符 二、修饰符的作用 表单修饰符 在我们填写表单的时候用得最多的是input标签，指令用得最多的是v-model 关于表单的修饰符有如下： lazy trim number lazy 在我们填完信息，光标离开标签的时候，才会将值赋予给value，也就是在change事件之后再进行信息同步 trim 自动过滤用户输入的首空格字符，而中间的空格不会过滤 number 自动将用户的输入值转为数值类型，但如果这个值无法被parseFloat解析，则会返回原来的值 事件修饰符 事件修饰符是对事件捕获以及目标进行了处理，有如下修饰符： stop prevent self once capture passive native stop 阻止了事件冒泡，相当于调用了event.stopPropagation方法 ok //只输出1 prevent 阻止了事件的默认行为，相当于调用了event.preventDefault方法 self 只当在 event.target 是当前元素自身时触发处理函数 ... 使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击 once 绑定了事件以后只能触发一次，第二次就不会触发 ok capture 使事件触发从包含这个元素的顶层开始往下触发 obj1 obj2 obj3 obj4 // 输出结构: 1 2 4 3 passive 在移动端，当我们在监听元素滚动事件的时候，会一直触发onscroll事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符 ... 不要把 .passive 和 .prevent 一起使用,因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。 passive 会告诉浏览器你不想阻止事件的默认行为 native 让组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件 使用.native修饰符来操作普通HTML标签是会令事件失效的 鼠标按钮修饰符 鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下： left 左键点击 right 右键点击 middle 中键点击 ok ok ok 键盘修饰符 键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下： keyCode存在很多，但vue为我们提供了别名，分为以下两种： 普通键（enter、tab、delete、space、esc、up...） 系统修饰键（ctrl、alt、meta、shift...） // 只有按键为keyCode的时候才触发 还可以通过以下方式自定义一些全局的键盘码别名 Vue.config.keyCodes.f2 = 113 v-bind修饰符 v-bind修饰符主要是为属性进行操作，用来分别有如下： async prop camel async 能对props进行一个双向绑定 //父组件 //子组件 this.$emit('update:myMessage',params); 以上这种方法相当于以下的简写 //父亲组件 func(e){ this.bar = e; } //子组件js func2(){ this.$emit('update:myMessage',params); } 使用async需要注意以下两点： 使用sync的时候，子组件传递的事件名格式必须为update:value，其中value必须与子组件中props中声明的名称完全一致 注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的 props 设置自定义标签属性，避免暴露数据，防止污染HTML结构 camel 将命名变为驼峰命名法，如将view-Box属性名转换为 viewBox 三、应用场景 根据每一个修饰符的功能，我们可以得到以下修饰符的应用场景： .stop：阻止事件冒泡 .native：绑定原生事件 .once：事件只执行一次 .self ：将事件绑定在自身身上，相当于阻止事件冒泡 .prevent：阻止默认事件 .caption：用于事件捕获 .once：只触发一次 .keyCode：监听特定键盘按下 .right：右键 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/axios.html":{"url":"vue/axios.html","title":"Vue项目中对axios的封装","keywords":"","body":"面试官：Vue项目中有封装过axios吗？主要是封装哪方面的？ 一、axios是什么 axios 是一个轻量的 HTTP客户端 基于 XMLHttpRequest 服务来执行 HTTP 请求，支持丰富的配置，支持 Promise，支持浏览器端和 Node.js 端。自Vue2.0起，尤大宣布取消对 vue-resource 的官方推荐，转而推荐 axios。现在 axios 已经成为大部分 Vue 开发者的首选 特性 从浏览器中创建 XMLHttpRequests 从 node.js 创建 http请求 支持 Promise API 拦截请求和响应 转换请求数据和响应数据 取消请求 自动转换JSON 数据 客户端支持防御XSRF 基本使用 安装 // 项目中安装 npm install axios --S // cdn 引入 导入 import axios from 'axios' 发送请求 axios({ url:'xxx', // 设置请求的地址 method:\"GET\", // 设置请求方法 params:{ // get请求使用params进行参数凭借,如果是post请求用data type: '', page: 1 } }).then(res => { // res为后端返回的数据 console.log(res); }) 并发请求axios.all([]) function getUserAccount() { return axios.get('/user/12345'); } function getUserPermissions() { return axios.get('/user/12345/permissions'); } axios.all([getUserAccount(), getUserPermissions()]) .then(axios.spread(function (res1, res2) { // res1第一个请求的返回的内容，res2第二个请求返回的内容 // 两个请求都执行完成才会执行 })); 二、为什么要封装 axios 的 API 很友好，你完全可以很轻松地在项目中直接使用。 不过随着项目规模增大，如果每发起一次HTTP请求，就要把这些比如设置超时时间、设置请求头、根据项目环境判断使用哪个请求地址、错误处理等等操作，都需要写一遍 这种重复劳动不仅浪费时间，而且让代码变得冗余不堪，难以维护。为了提高我们的代码质量，我们应该在项目中二次封装一下 axios 再使用 举个例子： axios('http://localhost:3000/data', { // 配置代码 method: 'GET', timeout: 1000, withCredentials: true, headers: { 'Content-Type': 'application/json', Authorization: 'xxx', }, transformRequest: [function (data, headers) { return data; }], // 其他请求配置... }) .then((data) => { // todo: 真正业务逻辑代码 console.log(data); }, (err) => { // 错误处理代码 if (err.response.status === 401) { // handle authorization error } if (err.response.status === 403) { // handle server forbidden error } // 其他错误处理..... console.log(err); }); 如果每个页面都发送类似的请求，都要写一堆的配置与错误处理，就显得过于繁琐了 这时候我们就需要对axios进行二次封装，让使用更为便利 三、如何封装 封装的同时，你需要和 后端协商好一些约定，请求头，状态码，请求超时时间....... 设置接口请求前缀：根据开发、测试、生产环境的不同，前缀需要加以区分 请求头 : 来实现一些具体的业务，必须携带一些参数才可以请求(例如：会员业务) 状态码: 根据接口返回的不同status ， 来执行不同的业务，这块需要和后端约定好 请求方法：根据get、post等方法进行一个再次封装，使用起来更为方便 请求拦截器: 根据请求的请求头设定，来决定哪些请求可以访问 响应拦截器： 这块就是根据 后端`返回来的状态码判定执行不同业务 设置接口请求前缀 利用node环境变量来作判断，用来区分开发、测试、生产环境 if (process.env.NODE_ENV === 'development') { axios.defaults.baseURL = 'http://dev.xxx.com' } else if (process.env.NODE_ENV === 'production') { axios.defaults.baseURL = 'http://prod.xxx.com' } 在本地调试的时候，还需要在vue.config.js文件中配置devServer实现代理转发，从而实现跨域 devServer: { proxy: { '/proxyApi': { target: 'http://dev.xxx.com', changeOrigin: true, pathRewrite: { '/proxyApi': '' } } } } 设置请求头与超时时间 大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，这里将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置 const service = axios.create({ ... timeout: 30000, // 请求 30s 超时 headers: { get: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8' // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来 }, post: { 'Content-Type': 'application/json;charset=utf-8' // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来 } }, }) 封装请求方法 先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去 // get 请求 export function httpGet({ url, params = {} }) { return new Promise((resolve, reject) => { axios.get(url, { params }).then((res) => { resolve(res.data) }).catch(err => { reject(err) }) }) } // post // post请求 export function httpPost({ url, data = {}, params = {} }) { return new Promise((resolve, reject) => { axios({ url, method: 'post', transformRequest: [function (data) { let ret = '' for (let it in data) { ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&' } return ret }], // 发送的数据 data, // \burl参数 params }).then(res => { resolve(res.data) }) }) } 把封装的方法放在一个api.js文件中 import { httpGet, httpPost } from './http' export const getorglist = (params = {}) => httpGet({ url: 'apps/api/org/list', params }) 页面中就能直接调用 // .vue import { getorglist } from '@/assets/js/api' getorglist({ id: 200 }).then(res => { console.log(res) }) 这样可以把api统一管理起来，以后维护修改只需要在api.js文件操作即可 请求拦截器 请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便 // 请求拦截器 axios.interceptors.request.use( config => { // 每次发送请求之前判断是否存在token // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的 token && (config.headers.Authorization = token) return config }, error => { return Promise.error(error) }) 响应拦截器 响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权 // 响应拦截器 axios.interceptors.response.use(response => { // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据 // 否则的话抛出错误 if (response.status === 200) { if (response.data.code === 511) { // 未授权调取授权接口 } else if (response.data.code === 510) { // 未登录跳转登录页 } else { return Promise.resolve(response) } } else { return Promise.reject(response) } }, error => { // 我们可以在这里对异常状态作统一处理 if (error.response.status) { // 处理请求失败的情况 // 对不同返回码对相应处理 return Promise.reject(error.response) } }) 小结 封装是编程中很有意义的手段，简单的axios封装，就可以让我们可以领略到它的魅力 封装 axios 没有一个绝对的标准，只要你的封装可以满足你的项目需求，并且用起来方便，那就是一个好的封装方案 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/axiosCode.html":{"url":"vue/axiosCode.html","title":"对axios的理解","keywords":"","body":"面试官：你了解axios的原理吗？有看过它的源码吗？ 一、axios的使用 关于axios的基本使用，上篇文章已经有所涉及，这里再稍微回顾下： 发送请求 import axios from 'axios'; axios(config) // 直接传入配置 axios(url[, config]) // 传入url和配置 axios[method](url[, option]) // 直接调用请求方式方法，传入url和配置 axios[method](url[, data[, option]]) // 直接调用请求方式方法，传入data、url和配置 axios.request(option) // 调用 request 方法 const axiosInstance = axios.create(config) // axiosInstance 也具有以上 axios 的能力 axios.all([axiosInstance1, axiosInstance2]).then(axios.spread(response1, response2)) // 调用 all 和传入 spread 回调 请求拦截器 axios.interceptors.request.use(function (config) { // 这里写发送请求前处理的代码 return config; }, function (error) { // 这里写发送请求错误相关的代码 return Promise.reject(error); }); 响应拦截器 axios.interceptors.response.use(function (response) { // 这里写得到响应数据后处理的代码 return response; }, function (error) { // 这里写得到错误响应处理的代码 return Promise.reject(error); }); 取消请求 // 方式一 const CancelToken = axios.CancelToken; const source = CancelToken.source(); axios.get('xxxx', { cancelToken: source.token }) // 取消请求 (请求原因是可选的) source.cancel('主动取消请求'); // 方式二 const CancelToken = axios.CancelToken; let cancel; axios.get('xxxx', { cancelToken: new CancelToken(function executor(c) { cancel = c; }) }); cancel('主动取消请求'); 二、实现一个简易版axios 构建一个Axios构造函数，核心代码为request class Axios { constructor() { } request(config) { return new Promise(resolve => { const {url = '', method = 'get', data = {}} = config; // 发送ajax请求 const xhr = new XMLHttpRequest(); xhr.open(method, url, true); xhr.onload = function() { console.log(xhr.responseText) resolve(xhr.responseText); } xhr.send(data); }) } } 导出axios实例 // 最终导出axios的方法，即实例的request方法 function CreateAxiosFn() { let axios = new Axios(); let req = axios.request.bind(axios); return req; } // 得到最后的全局变量axios let axios = CreateAxiosFn(); 上述就已经能够实现axios({ })这种方式的请求 下面是来实现下axios.method()这种形式的请求 // 定义get,post...方法，挂在到Axios原型上 const methodsArr = ['get', 'delete', 'head', 'options', 'put', 'patch', 'post']; methodsArr.forEach(met => { Axios.prototype[met] = function() { console.log('执行'+met+'方法'); // 处理单个方法 if (['get', 'delete', 'head', 'options'].includes(met)) { // 2个参数(url[, config]) return this.request({ method: met, url: arguments[0], ...arguments[1] || {} }) } else { // 3个参数(url[,data[,config]]) return this.request({ method: met, url: arguments[0], data: arguments[1] || {}, ...arguments[2] || {} }) } } }) 将Axios.prototype上的方法搬运到request上 首先实现个工具类，实现将b方法混入到a，并且修改this指向 const utils = { extend(a,b, context) { for(let key in b) { if (b.hasOwnProperty(key)) { if (typeof b[key] === 'function') { a[key] = b[key].bind(context); } else { a[key] = b[key] } } } } } 修改导出的方法 function CreateAxiosFn() { let axios = new Axios(); let req = axios.request.bind(axios); // 增加代码 utils.extend(req, Axios.prototype, axios) return req; } 构建拦截器的构造函数 class InterceptorsManage { constructor() { this.handlers = []; } use(fullfield, rejected) { this.handlers.push({ fullfield, rejected }) } } 实现axios.interceptors.response.use和axios.interceptors.request.use class Axios { constructor() { // 新增代码 this.interceptors = { request: new InterceptorsManage, response: new InterceptorsManage } } request(config) { ... } } 执行语句axios.interceptors.response.use和axios.interceptors.request.use的时候，实现获取axios实例上的interceptors对象，然后再获取response或request拦截器，再执行对应的拦截器的use方法 把Axios上的方法和属性搬到request过去 function CreateAxiosFn() { let axios = new Axios(); let req = axios.request.bind(axios); // 混入方法， 处理axios的request方法，使之拥有get,post...方法 utils.extend(req, Axios.prototype, axios) // 新增代码 utils.extend(req, axios) return req; } 现在request也有了interceptors对象，在发送请求的时候，会先获取request拦截器的handlers的方法来执行 首先将执行ajax的请求封装成一个方法 request(config) { this.sendAjax(config) } sendAjax(config){ return new Promise(resolve => { const {url = '', method = 'get', data = {}} = config; // 发送ajax请求 console.log(config); const xhr = new XMLHttpRequest(); xhr.open(method, url, true); xhr.onload = function() { console.log(xhr.responseText) resolve(xhr.responseText); }; xhr.send(data); }) } 获得handlers中的回调 request(config) { // 拦截器和请求组装队列 let chain = [this.sendAjax.bind(this), undefined] // 成对出现的，失败回调暂时不处理 // 请求拦截 this.interceptors.request.handlers.forEach(interceptor => { chain.unshift(interceptor.fullfield, interceptor.rejected) }) // 响应拦截 this.interceptors.response.handlers.forEach(interceptor => { chain.push(interceptor.fullfield, interceptor.rejected) }) // 执行队列，每次执行一对，并给promise赋最新的值 let promise = Promise.resolve(config); while(chain.length > 0) { promise = promise.then(chain.shift(), chain.shift()) } return promise; } chains大概是['fulfilled1','reject1','fulfilled2','reject2','this.sendAjax','undefined','fulfilled2','reject2','fulfilled1','reject1']这种形式 这样就能够成功实现一个简易版axios 三、源码分析 首先看看目录结构 axios发送请求有很多实现的方法，实现入口文件为axios.js function createInstance(defaultConfig) { var context = new Axios(defaultConfig); // instance指向了request方法，且上下文指向context，所以可以直接以 instance(option) 方式调用 // Axios.prototype.request 内对第一个参数的数据类型判断，使我们能够以 instance(url, option) 方式调用 var instance = bind(Axios.prototype.request, context); // 把Axios.prototype上的方法扩展到instance对象上， // 并指定上下文为context，这样执行Axios原型链上的方法时，this会指向context utils.extend(instance, Axios.prototype, context); // Copy context to instance // 把context对象上的自身属性和方法扩展到instance上 // 注：因为extend内部使用的forEach方法对对象做for in 遍历时，只遍历对象本身的属性，而不会遍历原型链上的属性 // 这样，instance 就有了 defaults、interceptors 属性。 utils.extend(instance, context); return instance; } // Create the default instance to be exported 创建一个由默认配置生成的axios实例 var axios = createInstance(defaults); // Factory for creating new instances 扩展axios.create工厂函数，内部也是 createInstance axios.create = function create(instanceConfig) { return createInstance(mergeConfig(axios.defaults, instanceConfig)); }; // Expose all/spread axios.all = function all(promises) { return Promise.all(promises); }; axios.spread = function spread(callback) { return function wrap(arr) { return callback.apply(null, arr); }; }; module.exports = axios; 主要核心是 Axios.prototype.request，各种请求方式的调用实现都是在 request 内部实现的， 简单看下 request 的逻辑 Axios.prototype.request = function request(config) { // Allow for axios('example/url'[, config]) a la fetch API // 判断 config 参数是否是 字符串，如果是则认为第一个参数是 URL，第二个参数是真正的config if (typeof config === 'string') { config = arguments[1] || {}; // 把 url 放置到 config 对象中，便于之后的 mergeConfig config.url = arguments[0]; } else { // 如果 config 参数是否是 字符串，则整体都当做config config = config || {}; } // 合并默认配置和传入的配置 config = mergeConfig(this.defaults, config); // 设置请求方法 config.method = config.method ? config.method.toLowerCase() : 'get'; /* something... 此部分会在后续拦截器单独讲述 */ }; // 在 Axios 原型上挂载 'delete', 'get', 'head', 'options' 且不传参的请求方法，实现内部也是 request utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) { Axios.prototype[method] = function(url, config) { return this.request(utils.merge(config || {}, { method: method, url: url })); }; }); // 在 Axios 原型上挂载 'post', 'put', 'patch' 且传参的请求方法，实现内部同样也是 request utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) { Axios.prototype[method] = function(url, data, config) { return this.request(utils.merge(config || {}, { method: method, url: url, data: data })); }; }); request入口参数为config，可以说config贯彻了axios的一生 axios 中的 config主要分布在这几个地方： 默认配置 defaults.js config.method默认为 get 调用 createInstance 方法创建 axios实例，传入的config 直接或间接调用 request 方法，传入的 config // axios.js // 创建一个由默认配置生成的axios实例 var axios = createInstance(defaults); // 扩展axios.create工厂函数，内部也是 createInstance axios.create = function create(instanceConfig) { return createInstance(mergeConfig(axios.defaults, instanceConfig)); }; // Axios.js // 合并默认配置和传入的配置 config = mergeConfig(this.defaults, config); // 设置请求方法 config.method = config.method ? config.method.toLowerCase() : 'get'; 从源码中，可以看到优先级：默认配置对象default method:get Axios的实例属性this.default request参数 下面重点看看request方法 Axios.prototype.request = function request(config) { /* 先是 mergeConfig ... 等，不再阐述 */ // Hook up interceptors middleware 创建拦截器链. dispatchRequest 是重中之重，后续重点 var chain = [dispatchRequest, undefined]; // push各个拦截器方法 注意：interceptor.fulfilled 或 interceptor.rejected 是可能为undefined this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) { // 请求拦截器逆序 注意此处的 forEach 是自定义的拦截器的forEach方法 chain.unshift(interceptor.fulfilled, interceptor.rejected); }); this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) { // 响应拦截器顺序 注意此处的 forEach 是自定义的拦截器的forEach方法 chain.push(interceptor.fulfilled, interceptor.rejected); }); // 初始化一个promise对象，状态为resolved，接收到的参数为已经处理合并过的config对象 var promise = Promise.resolve(config); // 循环拦截器的链 while (chain.length) { promise = promise.then(chain.shift(), chain.shift()); // 每一次向外弹出拦截器 } // 返回 promise return promise; }; 拦截器interceptors是在构建axios实例化的属性 function Axios(instanceConfig) { this.defaults = instanceConfig; this.interceptors = { request: new InterceptorManager(), // 请求拦截 response: new InterceptorManager() // 响应拦截 }; } InterceptorManager构造函数 // 拦截器的初始化 其实就是一组钩子函数 function InterceptorManager() { this.handlers = []; } // 调用拦截器实例的use时就是往钩子函数中push方法 InterceptorManager.prototype.use = function use(fulfilled, rejected) { this.handlers.push({ fulfilled: fulfilled, rejected: rejected }); return this.handlers.length - 1; }; // 拦截器是可以取消的，根据use的时候返回的ID，把某一个拦截器方法置为null // 不能用 splice 或者 slice 的原因是 删除之后 id 就会变化，导致之后的顺序或者是操作不可控 InterceptorManager.prototype.eject = function eject(id) { if (this.handlers[id]) { this.handlers[id] = null; } }; // 这就是在 Axios的request方法中 中循环拦截器的方法 forEach 循环执行钩子函数 InterceptorManager.prototype.forEach = function forEach(fn) { utils.forEach(this.handlers, function forEachHandler(h) { if (h !== null) { fn(h); } }); } 请求拦截器方法是被 unshift到拦截器中，响应拦截器是被push到拦截器中的。最终它们会拼接上一个叫dispatchRequest的方法被后续的 promise 顺序执行 var utils = require('./../utils'); var transformData = require('./transformData'); var isCancel = require('../cancel/isCancel'); var defaults = require('../defaults'); var isAbsoluteURL = require('./../helpers/isAbsoluteURL'); var combineURLs = require('./../helpers/combineURLs'); // 判断请求是否已被取消，如果已经被取消，抛出已取消 function throwIfCancellationRequested(config) { if (config.cancelToken) { config.cancelToken.throwIfRequested(); } } module.exports = function dispatchRequest(config) { throwIfCancellationRequested(config); // 如果包含baseUrl, 并且不是config.url绝对路径，组合baseUrl以及config.url if (config.baseURL && !isAbsoluteURL(config.url)) { // 组合baseURL与url形成完整的请求路径 config.url = combineURLs(config.baseURL, config.url); } config.headers = config.headers || {}; // 使用/lib/defaults.js中的transformRequest方法，对config.headers和config.data进行格式化 // 比如将headers中的Accept，Content-Type统一处理成大写 // 比如如果请求正文是一个Object会格式化为JSON字符串，并添加application/json;charset=utf-8的Content-Type // 等一系列操作 config.data = transformData( config.data, config.headers, config.transformRequest ); // 合并不同配置的headers，config.headers的配置优先级更高 config.headers = utils.merge( config.headers.common || {}, config.headers[config.method] || {}, config.headers || {} ); // 删除headers中的method属性 utils.forEach( ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) { delete config.headers[method]; } ); // 如果config配置了adapter，使用config中配置adapter的替代默认的请求方法 var adapter = config.adapter || defaults.adapter; // 使用adapter方法发起请求（adapter根据浏览器环境或者Node环境会有不同） return adapter(config).then( // 请求正确返回的回调 function onAdapterResolution(response) { // 判断是否以及取消了请求，如果取消了请求抛出以取消 throwIfCancellationRequested(config); // 使用/lib/defaults.js中的transformResponse方法，对服务器返回的数据进行格式化 // 例如，使用JSON.parse对响应正文进行解析 response.data = transformData( response.data, response.headers, config.transformResponse ); return response; }, // 请求失败的回调 function onAdapterRejection(reason) { if (!isCancel(reason)) { throwIfCancellationRequested(config); if (reason && reason.response) { reason.response.data = transformData( reason.response.data, reason.response.headers, config.transformResponse ); } } return Promise.reject(reason); } ); }; 再来看看axios是如何实现取消请求的，实现文件在CancelToken.js function CancelToken(executor) { if (typeof executor !== 'function') { throw new TypeError('executor must be a function.'); } // 在 CancelToken 上定义一个 pending 状态的 promise ，将 resolve 回调赋值给外部变量 resolvePromise var resolvePromise; this.promise = new Promise(function promiseExecutor(resolve) { resolvePromise = resolve; }); var token = this; // 立即执行 传入的 executor函数，将真实的 cancel 方法通过参数传递出去。 // 一旦调用就执行 resolvePromise 即前面的 promise 的 resolve，就更改promise的状态为 resolve。 // 那么xhr中定义的 CancelToken.promise.then方法就会执行, 从而xhr内部会取消请求 executor(function cancel(message) { // 判断请求是否已经取消过，避免多次执行 if (token.reason) { return; } token.reason = new Cancel(message); resolvePromise(token.reason); }); } CancelToken.source = function source() { // source 方法就是返回了一个 CancelToken 实例，与直接使用 new CancelToken 是一样的操作 var cancel; var token = new CancelToken(function executor(c) { cancel = c; }); // 返回创建的 CancelToken 实例以及取消方法 return { token: token, cancel: cancel }; }; 实际上取消请求的操作是在 xhr.js 中也有响应的配合的 if (config.cancelToken) { config.cancelToken.promise.then(function onCanceled(cancel) { if (!request) { return; } // 取消请求 request.abort(); reject(cancel); }); } 巧妙的地方在 CancelToken中 executor 函数，通过resolve函数的传递与执行，控制promise的状态 小结 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/slot.html":{"url":"vue/slot.html","title":"Vue中slot的理解","keywords":"","body":"面试官：说说你对slot的理解？slot使用场景有哪些？ 一、slot是什么 在HTML中 slot 元素 ，作为 Web Components 技术套件的一部分，是Web组件内的一个占位符 该占位符可以在后期使用自己的标记语言填充 举个栗子 Slot template 1 2 template不会展示到页面中，需要用先获取它的引用，然后添加到DOM中， customElements.define('element-details', class extends HTMLElement { constructor() { super(); const template = document .getElementById('element-details-template') .content; const shadowRoot = this.attachShadow({mode: 'open'}) .appendChild(template.cloneNode(true)); } }) 在Vue中的概念也是如此 Slot 艺名插槽，花名“占坑”，我们可以理解为solt在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中slot位置），作为承载分发内容的出口 可以将其类比为插卡式的FC游戏机，游戏机暴露卡槽（插槽）让用户插入不同的游戏磁条（自定义内容） 放张图感受一下 二、使用场景 通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理 如果父组件在使用到一个复用组件的时候，获取这个组件在不同的地方有少量的更改，如果去重写组件是一件不明智的事情 通过slot插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用 比如布局组件、表格列、下拉选、弹框显示内容等 三、分类 slot可以分来以下三种： 默认插槽 具名插槽 作用域插槽 默认插槽 子组件用标签来确定渲染的位置，标签里面可以放DOM结构，当父组件使用的时候没有往插槽传入内容，标签内DOM结构就会显示在页面 父组件在使用的时候，直接在子组件的标签内写入内容即可 子组件Child.vue 插槽后备的内容 父组件 默认插槽 具名插槽 子组件用name属性来表示插槽的名字，不传为默认插槽 父组件中在使用时在默认插槽的基础上加上slot属性，值为子组件插槽name属性值 子组件Child.vue 插槽后备的内容 插槽后备的内容 父组件 具名插槽 内容... 作用域插槽 子组件在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件v-slot接受的对象上 父组件中在使用时通过v-slot:（简写：#）获取子组件的信息，在内容中使用 子组件Child.vue 没传footer插槽 父组件 来⾃⼦组件数据： 来⾃⼦组件数据： 小结： v-slot属性只能在上使用，但在只有默认插槽时可以在组件标签上使用 默认插槽名为default，可以省略default直接写v-slot 缩写为#时不能不写参数，写成#default 可以通过解构获取v-slot={user}，还可以重命名v-slot=\"{user: newName}\"和定义默认值v-slot=\"{user = '默认值'}\" 四、原理分析 slot本质上是返回VNode的函数，一般情况下，Vue中的组件要渲染到页面上需要经过template -> render function -> VNode -> DOM 过程，这里看看slot如何实现： 编写一个buttonCounter组件，使用匿名插槽 Vue.component('button-counter', { template: ' 我是默认内容' }) 使用该组件 new Vue({ el: '#app', template: '我是slot传入内容', components:{buttonCounter} }) 获取buttonCounter组件渲染函数 (function anonymous( ) { with(this){return _c('div',[_t(\"default\",[_v(\"我是默认内容\")])],2)} }) _v表示穿件普通文本节点，_t表示渲染插槽的函数 渲染插槽函数renderSlot（做了简化） function renderSlot ( name, fallback, props, bindObject ) { // 得到渲染插槽内容的函数 var scopedSlotFn = this.$scopedSlots[name]; var nodes; // 如果存在插槽渲染函数，则执行插槽渲染函数，生成nodes节点返回 // 否则使用默认值 nodes = scopedSlotFn(props) || fallback; return nodes; } name属性表示定义插槽的名字，默认值为default，fallback表示子组件中的slot节点的默认值 关于this.$scopredSlots是什么，我们可以先看看vm.slot function initRender (vm) { ... vm.$slots = resolveSlots(options._renderChildren, renderContext); ... } resolveSlots函数会对children节点做归类和过滤处理，返回slots function resolveSlots ( children, context ) { if (!children || !children.length) { return {} } var slots = {}; for (var i = 0, l = children.length; i _render渲染函数通过normalizeScopedSlots得到vm.$scopedSlots vm.$scopedSlots = normalizeScopedSlots( _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots ); 作用域插槽中父组件能够得到子组件的值是因为在renderSlot的时候执行会传入props，也就是上述_t第三个参数，父组件则能够得到子组件传递过来的值 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/show_if.html":{"url":"vue/show_if.html","title":"v-show和v-if有什么区别","keywords":"","body":"面试官：v-show和v-if有什么区别？使用场景分别是什么？ 一、v-show与v-if的共同点 我们都知道在 vue 中 v-show 与 v-if 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示 在用法上也是相同的 当表达式为true的时候，都会占据页面的位置 当表达式都为false时，都不会占据页面位置 二、v-show与v-if的区别 控制手段不同 编译过程不同 编译条件不同 控制手段：v-show隐藏则是为该元素添加css--display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除 编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换 编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染 v-show 由false变为true的时候不会触发组件的生命周期 v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法 性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗； 三、v-show与v-if原理分析 具体解析流程这里不展开讲，大致流程如下 将模板template转为ast结构的JS对象 用ast得到的JS对象拼装render和staticRenderFns函数 render和staticRenderFns函数被调用后生成虚拟VNODE节点，该节点包含创建DOM节点所需信息 vm.patch函数通过虚拟DOM算法利用VNODE节点创建真实DOM节点 v-show原理 不管初始条件是什么，元素总是会被渲染 我们看一下在vue中是如何实现的 代码很好理解，有transition就执行transition，没有就直接设置display属性 // https://github.com/vuejs/vue-next/blob/3cd30c5245da0733f9eb6f29d220f39c46518162/packages/runtime-dom/src/directives/vShow.ts export const vShow: ObjectDirective = { beforeMount(el, { value }, { transition }) { el._vod = el.style.display === 'none' ? '' : el.style.display if (transition && value) { transition.beforeEnter(el) } else { setDisplay(el, value) } }, mounted(el, { value }, { transition }) { if (transition && value) { transition.enter(el) } }, updated(el, { value, oldValue }, { transition }) { // ... }, beforeUnmount(el, { value }) { setDisplay(el, value) } } v-if原理 v-if在实现上比v-show要复杂的多，因为还有else else-if 等条件需要处理，这里我们也只摘抄源码中处理 v-if 的一小部分 返回一个node节点，render函数通过表达式的值来决定是否生成DOM // https://github.com/vuejs/vue-next/blob/cdc9f336fd/packages/compiler-core/src/transforms/vIf.ts export const transformIf = createStructuralDirectiveTransform( /^(if|else|else-if)$/, (node, dir, context) => { return processIf(node, dir, context, (ifNode, branch, isRoot) => { // ... return () => { if (isRoot) { ifNode.codegenNode = createCodegenNodeForBranch( branch, key, context ) as IfConditionalExpression } else { // attach this branch's codegen node to the v-if root. const parentCondition = getParentCondition(ifNode.codegenNode!) parentCondition.alternate = createCodegenNodeForBranch( branch, key + ifNode.branches.length - 1, context ) } } }) } ) 四、v-show与v-if的使用场景 v-if 与 v-show 都能控制dom元素在页面的显示 v-if 相比 v-show 开销更大的（直接操作dom节点增加与删除） 如果需要非常频繁地切换，则使用 v-show 较好 如果在运行时条件很少改变，则使用 v-if 较好 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/if_for.html":{"url":"vue/if_for.html","title":"v-if和v-for的优先级","keywords":"","body":"面试官：v-if和v-for的优先级是什么？ 一、作用 v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 true值的时候被渲染 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组或者对象，而 item 则是被迭代的数组元素的别名 在 v-for 的时候，建议设置key值，并且保证每个key值是独一无二的，这便于diff算法进行优化 两者在用法上 二、优先级 v-if与v-for都是vue模板系统中的指令 在vue模板编译的时候，会将指令系统转化成可执行的render函数 示例 编写一个p标签，同时使用v-if与 v-for 创建vue实例，存放isShow与items数据 const app = new Vue({ el: \"#app\", data() { return { items: [ { title: \"foo\" }, { title: \"baz\" }] } }, computed: { isShow() { return this.items && this.items.length > 0 } } }) 模板指令的代码都会生成在render函数中，通过app.$options.render就能得到渲染函数 ƒ anonymous() { with (this) { return _c('div', { attrs: { \"id\": \"app\" } }, _l((items), function (item) { return (isShow) ? _c('p', [_v(\"\\n\" + _s(item.title) + \"\\n\")]) : _e() }), 0) } } _l是vue的列表渲染函数，函数内部都会进行一次if判断 初步得到结论：v-for优先级是比v-if高 再将v-for与v-if置于不同标签 再输出下render函数 ƒ anonymous() { with(this){return _c('div',{attrs:{\"id\":\"app\"}}, [(isShow)?[_v(\"\\n\"), _l((items),function(item){return _c('p',[_v(_s(item.title))])})]:_e()],2)} } 这时候我们可以看到，v-for与v-if作用在不同标签时候，是先进行判断，再进行列表的渲染 我们再在查看下vue源码 源码位置：\\vue-dev\\src\\compiler\\codegen\\index.js export function genElement (el: ASTElement, state: CodegenState): string { if (el.parent) { el.pre = el.pre || el.parent.pre } if (el.staticRoot && !el.staticProcessed) { return genStatic(el, state) } else if (el.once && !el.onceProcessed) { return genOnce(el, state) } else if (el.for && !el.forProcessed) { return genFor(el, state) } else if (el.if && !el.ifProcessed) { return genIf(el, state) } else if (el.tag === 'template' && !el.slotTarget && !state.pre) { return genChildren(el, state) || 'void 0' } else if (el.tag === 'slot') { return genSlot(el, state) } else { // component or element ... } 在进行if判断的时候，v-for是比v-if先进行判断 最终结论：v-for优先级比v-if高 三、注意事项 永远不要把 v-if 和 v-for 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断） 如果避免出现这种情况，则在外层嵌套template（页面渲染不生成dom节点），在这一层进行v-if判断，然后在内部进行v-for循环 如果条件出现在循环内部，可通过计算属性computed提前过滤掉那些不需要显示的项 computed: { items: function() { return this.list.filter(function (item) { return item.isShow }) } } 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/key.html":{"url":"vue/key.html","title":"Vue中key的原理","keywords":"","body":"面试官：你知道vue中key的原理吗？说说你对它的理解 一、Key是什么 开始之前，我们先还原两个实际工作场景 当我们在使用v-for时，需要给单元加上key ... 用+new Date()生成的时间戳作为key，手动强制触发重新渲染 那么这背后的逻辑是什么，key的作用又是什么？ 一句话来讲 key是给每一个vnode的唯一id，也是diff的一种优化策略，可以根据key，更准确， 更快的找到对应的vnode节点 场景背后的逻辑 当我们在使用v-for时，需要给单元加上key 如果不用key，Vue会采用就地复地原则：最小化element的移动，并且会尝试尽最大程度在同适当的地方对相同类型的element，做patch或者reuse。 如果使用了key，Vue会根据keys的顺序记录element，曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed 用+new Date()生成的时间戳作为key，手动强制触发重新渲染 当拥有新值的rerender作为key时，拥有了新key的Comp出现了，那么旧key Comp会被移除，新key Comp触发渲染 二、设置key与不设置key区别 举个例子： 创建一个实例，2秒后往items数组插入数据 // 创建实例 const app = new Vue({ el: '#demo', data: { items: ['a', 'b', 'c', 'd', 'e'] }, mounted () { setTimeout(() => { this.items.splice(2, 0, 'f') // }, 2000); }, }); 在不使用key的情况，vue会进行这样的操作： 分析下整体流程： 比较A，A，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较B，B，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较C，F，相同类型的节点，进行patch，数据不同，发生dom操作 比较D，C，相同类型的节点，进行patch，数据不同，发生dom操作 比较E，D，相同类型的节点，进行patch，数据不同，发生dom操作 循环结束，将E插入到DOM中 一共发生了3次更新，1次插入操作 在使用key的情况：vue会进行这样的操作： 比较A，A，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较B，B，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较C，F，不相同类型的节点 比较E、E，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较D、D，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较C、C，相同类型的节点，进行patch，但数据相同，不发生dom操作 循环结束，将F插入到C之前 一共发生了0次更新，1次插入操作 通过上面两个小例子，可见设置key能够大大减少对页面的DOM操作，提高了diff效率 设置key值一定能提高diff效率吗？ 其实不然，文档中也明确表示 当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素 这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出 建议尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升 三、原理分析 源码位置：core/vdom/patch.js 这里判断是否为同一个key，首先判断的是key值是否相等如果没有设置key，那么key为undefined，这时候undefined是恒等于undefined function sameVnode (a, b) { return ( a.key === b.key && ( ( a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) ) || ( isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error) ) ) ) } updateChildren方法中会对新旧vnode进行diff，然后将比对出的结果用来更新真实的DOM function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) { ... while (oldStartIdx 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/first_page_time.html":{"url":"vue/first_page_time.html","title":"如何解决SPA首屏加载速度慢","keywords":"","body":"面试官：SPA首屏加载速度慢的怎么解决？ 一、什么是首屏加载 首屏时间（First Contentful Paint），指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一定要全部渲染完成，但需要展示当前视窗需要的内容 首屏加载可以说是用户体验中最重要的环节 关于计算首屏时间 利用performance.timing提供的数据： 通过DOMContentLoad或者performance来计算出首屏时间 // 方案一： document.addEventListener('DOMContentLoaded', (event) => { console.log('first contentful painting'); }); // 方案二： performance.getEntriesByName(\"first-contentful-paint\")[0].startTime // performance.getEntriesByName(\"first-contentful-paint\")[0] // 会返回一个 PerformancePaintTiming的实例，结构如下： { name: \"first-contentful-paint\", entryType: \"paint\", startTime: 507.80000002123415, duration: 0, }; 二、加载慢的原因 在页面渲染的过程，导致加载速度慢的因素可能如下： 网络延时问题 资源文件体积是否过大 资源是否重复发送请求去加载了 加载脚本的时候，渲染内容堵塞了 三、解决方案 常见的几种SPA首屏优化方式 减小入口文件积 静态资源本地缓存 UI框架按需加载 图片资源的压缩 组件重复打包 开启GZip压缩 使用SSR 减小入口文件体积 常用的手段是路由懒加载，把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度大大增加 在vue-router配置路由的时候，采用动态加载路由的形式 routes:[ path: 'Blogs', name: 'ShowBlogs', component: () => import('./components/ShowBlogs.vue') ] 以函数的形式加载路由，这样就可以把各自的路由文件分别打包，只有在解析给定的路由时，才会加载路由组件 静态资源本地缓存 后端返回资源问题： 采用HTTP缓存，设置Cache-Control，Last-Modified，Etag等响应头 采用Service Worker离线缓存 前端合理利用localStorage UI框架按需加载 在日常使用UI框架，例如element-UI、或者antd，我们经常性直接饮用整个UI库 import ElementUI from 'element-ui' Vue.use(ElementUI) 但实际上我用到的组件只有按钮，分页，表格，输入与警告 所以我们要按需引用 import { Button, Input, Pagination, Table, TableColumn, MessageBox } from 'element-ui'; Vue.use(Button) Vue.use(Input) Vue.use(Pagination) 组件重复打包 假设A.js文件是一个常用的库，现在有多个路由使用了A.js文件，这就造成了重复下载 解决方案：在webpack的config文件中，修改CommonsChunkPlugin的配置 minChunks: 3 minChunks为3表示会把使用3次及以上的包抽离出来，放进公共依赖文件，避免了重复加载组件 图片资源的压缩 图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素 对于所有的图片资源，我们可以进行适当的压缩 对页面上使用到的icon，可以使用在线字体图标，或者雪碧图，将众多小图标合并到同一张图上，用以减轻http请求压力。 开启GZip压缩 拆完包之后，我们再用gzip做一下压缩 安装compression-webpack-plugin cnmp i compression-webpack-plugin -D 在vue.congig.js中引入并修改webpack配置 const CompressionPlugin = require('compression-webpack-plugin') configureWebpack: (config) => { if (process.env.NODE_ENV === 'production') { // 为生产环境修改配置... config.mode = 'production' return { plugins: [new CompressionPlugin({ test: /\\.js$|\\.html$|\\.css/, //匹配文件名 threshold: 10240, //对超过10k的数据进行压缩 deleteOriginalAssets: false //是否删除原文件 })] } } 在服务器我们也要做相应的配置 如果发送请求的浏览器支持gzip，就发送给它gzip格式的文件 我的服务器是用express框架搭建的 只要安装一下compression就能使用 const compression = require('compression') app.use(compression()) // 在其他中间件使用之前调用 使用SSR SSR（Server side ），也就是服务端渲染，组件或页面通过服务器生成html字符串，再发送到浏览器 从头搭建一个服务端渲染是很复杂的，vue应用建议使用Nuxt.js实现服务端渲染 小结： 减少首屏渲染时间的方法有很多，总的来讲可以分成两大部分 ：资源加载优化 和 页面渲染优化 下图是更为全面的首屏优化的方案 大家可以根据自己项目的情况选择各种方式进行首屏渲染的优化 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/observable.html":{"url":"vue/observable.html","title":"Vue中observable的了解","keywords":"","body":"面试官：Vue.observable你有了解过吗？说说看 一、Observable 是什么 Observable 翻译过来我们可以理解成可观察的 我们先来看一下其在Vue中的定义 Vue.observable，让一个对象变成响应式数据。Vue 内部会用它来处理 data 函数返回的对象 返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器 Vue.observable({ count : 1}) 其作用等同于 new vue({ count : 1}) 在 Vue 2.x 中，被传入的对象会直接被 Vue.observable 变更，它和被返回的对象是同一个对象 在 Vue 3.x 中，则会返回一个可响应的代理，而对源对象直接进行变更仍然是不可响应的 二、使用场景 在非父子组件通信时，可以使用通常的bus或者使用vuex，但是实现的功能不是太复杂，而使用上面两个又有点繁琐。这时，observable就是一个很好的选择 创建一个js文件 // 引入vue import Vue from 'vue // 创建state对象，使用observable让state对象可响应 export let state = Vue.observable({ name: '张三', 'age': 38 }) // 创建对应的方法 export let mutations = { changeName(name) { state.name = name }, setAge(age) { state.age = age } } 在.vue文件中直接使用即可 姓名： 年龄： 改变姓名 改变年龄 import { state, mutations } from '@/store export default { // 在计算属性中拿到值 computed: { name() { return state.name }, age() { return state.age } }, // 调用mutations里面的方法，更新数据 methods: { changeName: mutations.changeName, setAge: mutations.setAge } } 三、原理分析 源码位置：src\\core\\observer\\index.js export function observe (value: any, asRootData: ?boolean): Observer | void { if (!isObject(value) || value instanceof VNode) { return } let ob: Observer | void // 判断是否存在__ob__响应式属性 if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) { ob = value.__ob__ } else if ( shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue ) { // 实例化Observer响应式对象 ob = new Observer(value) } if (asRootData && ob) { ob.vmCount++ } return ob } Observer类 export class Observer { value: any; dep: Dep; vmCount: number; // number of vms that have this object as root $data constructor (value: any) { this.value = value this.dep = new Dep() this.vmCount = 0 def(value, '__ob__', this) if (Array.isArray(value)) { if (hasProto) { protoAugment(value, arrayMethods) } else { copyAugment(value, arrayMethods, arrayKeys) } this.observeArray(value) } else { // 实例化对象是一个对象，进入walk方法 this.walk(value) } } walk函数 walk (obj: Object) { const keys = Object.keys(obj) // 遍历key，通过defineReactive创建响应式对象 for (let i = 0; i defineReactive方法 export function defineReactive ( obj: Object, key: string, val: any, customSetter?: ?Function, shallow?: boolean ) { const dep = new Dep() const property = Object.getOwnPropertyDescriptor(obj, key) if (property && property.configurable === false) { return } // cater for pre-defined getter/setters const getter = property && property.get const setter = property && property.set if ((!getter || setter) && arguments.length === 2) { val = obj[key] } let childOb = !shallow && observe(val) // 接下来调用Object.defineProperty()给对象定义响应式属性 Object.defineProperty(obj, key, { enumerable: true, configurable: true, get: function reactiveGetter () { const value = getter ? getter.call(obj) : val if (Dep.target) { dep.depend() if (childOb) { childOb.dep.depend() if (Array.isArray(value)) { dependArray(value) } } } return value }, set: function reactiveSetter (newVal) { const value = getter ? getter.call(obj) : val /* eslint-disable no-self-compare */ if (newVal === value || (newVal !== newVal && value !== value)) { return } /* eslint-enable no-self-compare */ if (process.env.NODE_ENV !== 'production' && customSetter) { customSetter() } // #7981: for accessor properties without setter if (getter && !setter) return if (setter) { setter.call(obj, newVal) } else { val = newVal } childOb = !shallow && observe(newVal) // 对观察者watchers进行通知,state就成了全局响应式对象 dep.notify() } }) } 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/nexttick.html":{"url":"vue/nexttick.html","title":"Vue中的$nextTick作用","keywords":"","body":"面试官：Vue中的$nextTick有什么作用？ 一、NextTick是什么 官方对其的定义 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM 什么意思呢？ 我们可以理解成，Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新 举例一下 Html结构 构建一个vue实例 const vm = new Vue({ el: '#app', data: { message: '原始值' } }) 修改message this.message = '修改后的值1' this.message = '修改后的值2' this.message = '修改后的值3' 这时候想获取页面最新的DOM节点，却发现获取到的是旧值 console.log(vm.$el.textContent) // 原始值 这是因为message数据在发现变化的时候，vue并不会立刻去更新Dom，而是将修改数据的操作放在了一个异步操作队列中 如果我们一直修改相同数据，异步操作队列还会进行去重 等待同一事件循环中的所有数据变化完成之后，会将队列中的事件拿来进行处理，进行DOM的更新 为什么要有nexttick 举个例子 for(let i=0; i 如果没有 nextTick 更新机制，那么 num 每次更新值都会触发视图更新(上面这段代码也就是会更新10万次视图)，有了nextTick机制，只需要更新一次，所以nextTick本质是一种优化策略 二、使用场景 如果想要在修改数据后立刻得到更新后的DOM结构，可以使用Vue.nextTick() 第一个参数为：回调函数（可以获取最近的DOM结构） 第二个参数为：执行函数上下文 // 修改数据 vm.message = '修改后的值' // DOM 还没有更新 console.log(vm.$el.textContent) // 原始的值 Vue.nextTick(function () { // DOM 更新了 console.log(vm.$el.textContent) // 修改后的值 }) 组件内使用 vm.$nextTick() 实例方法只需要通过this.$nextTick()，并且回调函数中的 this 将自动绑定到当前的 Vue 实例上 this.message = '修改后的值' console.log(this.$el.textContent) // => '原始的值' this.$nextTick(function () { console.log(this.$el.textContent) // => '修改后的值' }) $nextTick() 会返回一个 Promise 对象，可以是用async/await完成相同作用的事情 this.message = '修改后的值' console.log(this.$el.textContent) // => '原始的值' await this.$nextTick() console.log(this.$el.textContent) // => '修改后的值' 三、实现原理 源码位置：/src/core/util/next-tick.js callbacks也就是异步操作队列 callbacks新增回调函数后又执行了timerFunc函数，pending是用来标识同一个时间只能执行一次 export function nextTick(cb?: Function, ctx?: Object) { let _resolve; // cb 回调函数会经统一处理压入 callbacks 数组 callbacks.push(() => { if (cb) { // 给 cb 回调函数执行加上了 try-catch 错误处理 try { cb.call(ctx); } catch (e) { handleError(e, ctx, 'nextTick'); } } else if (_resolve) { _resolve(ctx); } }); // 执行异步延迟函数 timerFunc if (!pending) { pending = true; timerFunc(); } // 当 nextTick 没有传入函数参数的时候，返回一个 Promise 化的调用 if (!cb && typeof Promise !== 'undefined') { return new Promise(resolve => { _resolve = resolve; }); } } timerFunc函数定义，这里是根据当前环境支持什么方法则确定调用哪个，分别有： Promise.then、MutationObserver、setImmediate、setTimeout 通过上面任意一种方法，进行降级操作 export let isUsingMicroTask = false if (typeof Promise !== 'undefined' && isNative(Promise)) { //判断1：是否原生支持Promise const p = Promise.resolve() timerFunc = () => { p.then(flushCallbacks) if (isIOS) setTimeout(noop) } isUsingMicroTask = true } else if (!isIE && typeof MutationObserver !== 'undefined' && ( isNative(MutationObserver) || MutationObserver.toString() === '[object MutationObserverConstructor]' )) { //判断2：是否原生支持MutationObserver let counter = 1 const observer = new MutationObserver(flushCallbacks) const textNode = document.createTextNode(String(counter)) observer.observe(textNode, { characterData: true }) timerFunc = () => { counter = (counter + 1) % 2 textNode.data = String(counter) } isUsingMicroTask = true } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) { //判断3：是否原生支持setImmediate timerFunc = () => { setImmediate(flushCallbacks) } } else { //判断4：上面都不行，直接用setTimeout timerFunc = () => { setTimeout(flushCallbacks, 0) } } 无论是微任务还是宏任务，都会放到flushCallbacks使用 这里将callbacks里面的函数复制一份，同时callbacks置空 依次执行callbacks里面的函数 function flushCallbacks () { pending = false const copies = callbacks.slice(0) callbacks.length = 0 for (let i = 0; i 小结： 把回调函数放入callbacks等待执行 将执行函数放到微任务或者宏任务中 事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/lifecycle.html":{"url":"vue/lifecycle.html","title":"Vue生命周期","keywords":"","body":"面试官：请描述下你对vue生命周期的理解？在created和mounted这两个生命周期中请求数据有什么区别呢？ 一、生命周期是什么 生命周期（Life Cycle）的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”（Cradle-to-Grave）的整个过程在Vue中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程我们可以把组件比喻成工厂里面的一条流水线，每个工人（生命周期）站在各自的岗位，当任务流转到工人身边的时候，工人就开始工作PS：在Vue生命周期钩子会自动绑定 this 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () => this.fetchTodos()) 二、生命周期有哪些 Vue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后，以及一些特殊场景的生命周期 生命周期 描述 beforeCreate 组件实例被创建之初 created 组件实例已经完全创建 beforeMount 组件挂载之前 mounted 组件挂载到实例上去之后 beforeUpdate 组件数据发生变化，更新之前 updated 组件数据更新之后 beforeDestroy 组件实例销毁之前 destroyed 组件实例销毁之后 activated keep-alive 缓存的组件激活时 deactivated keep-alive 缓存的组件停用时调用 errorCaptured 捕获一个来自子孙组件的错误时被调用 三、生命周期整体流程 Vue生命周期流程图 具体分析 beforeCreate -> created 初始化vue实例，进行数据观测 created 完成数据观测，属性与方法的运算，watch、event事件回调的配置 可调用methods中的方法，访问和修改data数据触发响应式渲染dom，可通过computed和watch完成数据计算 此时vm.$el 并没有被创建 created -> beforeMount 判断是否存在el选项，若不存在则停止编译，直到调用vm.$mount(el)才会继续编译 优先级：render > template > outerHTML vm.el获取到的是挂载DOM的 beforeMount 在此阶段可获取到vm.el 此阶段vm.el虽已完成DOM初始化，但并未挂载在el选项上 beforeMount -> mounted 此阶段vm.el完成挂载，vm.$el生成的DOM替换了el选项所对应的DOM mounted vm.el已完成DOM的挂载与渲染，此刻打印vm.$el，发现之前的挂载点及内容已被替换成新的DOM beforeUpdate 更新的数据必须是被渲染在模板上的（el、template、render之一） 此时view层还未更新 若在beforeUpdate中再次修改数据，不会再次触发更新方法 updated 完成view层的更新 若在updated中再次修改数据，会再次触发更新方法（beforeUpdate、updated） beforeDestroy 实例被销毁前调用，此时实例属性与方法仍可访问 destroyed 完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器 并不能清除DOM，仅仅销毁实例 使用场景分析 生命周期 描述 beforeCreate 执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务 created 组件初始化完毕，各种数据可以使用，常用于异步数据获取 beforeMount 未执行渲染、更新，dom未创建 mounted 初始化结束，dom已创建，可用于获取访问数据和dom元素 beforeUpdate 更新前，可用于获取更新前各种状态 updated 更新后，所有状态已是最新 beforeDestroy 销毁前，可用于一些定时器或订阅的取消 destroyed 组件已销毁，作用同上 四、题外话：数据请求在created和mouted的区别 created是在组件实例一旦创建完成的时候立刻调用，这时候页面dom节点并未生成mounted是在页面dom节点渲染完毕之后就立刻执行的触发时机上created是比mounted要更早的两者相同点：都能拿到实例对象的属性和方法讨论这个问题本质就是触发的时机，放在mounted请求有可能导致页面闪动（页面dom结构已经生成），但如果在页面加载前完成则不会出现此情况建议：放在create生命周期当中 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/structure.html":{"url":"vue/structure.html","title":"Vue项目的目录结构","keywords":"","body":"面试官：说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？ 一、为什么要划分 使用vue构建项目，项目结构清晰会提高开发效率，熟悉项目的各种配置同样会让开发效率更高 在划分项目结构的时候，需要遵循一些基本的原则： 文件夹和文件夹内部文件的语义一致性 单一入口/出口 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用 公共的文件应该以绝对路径的方式从根目录引用 /src 外的文件不应该被引入 文件夹和文件夹内部文件的语义一致性 我们的目录结构都会有一个文件夹是按照路由模块来划分的，如pages文件夹，这个文件夹里面应该包含我们项目所有的路由模块，并且仅应该包含路由模块，而不应该有别的其他的非路由模块的文件夹 这样做的好处在于一眼就从 pages文件夹看出这个项目的路由有哪些 单一入口/出口 举个例子，在pages文件夹里面存在一个seller文件夹，这时候seller 文件夹应该作为一个独立的模块由外部引入，并且 seller/index.js 应该作为外部引入 seller 模块的唯一入口 // 错误用法 import sellerReducer from 'src/pages/seller/reducer' // 正确用法 import { reducer as sellerReducer } from 'src/pages/seller' 这样做的好处在于，无论你的模块文件夹内部有多乱，外部引用的时候，都是从一个入口文件引入，这样就很好的实现了隔离，如果后续有重构需求，你就会发现这种方式的优点 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用 使用相对路径可以保证模块内部的独立性 // 正确用法 import styles from './index.module.scss' // 错误用法 import styles from 'src/pages/seller/index.module.scss' 举个例子 假设我们现在的 seller 目录是在 src/pages/seller，如果我们后续发生了路由变更，需要加一个层级，变成 src/pages/user/seller。 如果我们采用第一种相对路径的方式，那就可以直接将整个文件夹拖过去就好，seller 文件夹内部不需要做任何变更。 但是如果我们采用第二种绝对路径的方式，移动文件夹的同时，还需要对每个 import 的路径做修改 公共的文件应该以绝对路径的方式从根目录引用 公共指的是多个路由模块共用，如一些公共的组件，我们可以放在src/components下 在使用到的页面中，采用绝对路径的形式引用 // 错误用法 import Input from '../../components/input' // 正确用法 import Input from 'src/components/input' 同样的，如果我们需要对文件夹结构进行调整。将 /src/components/input 变成 /src/components/new/input，如果使用绝对路径，只需要全局搜索替换 再加上绝对路径有全局的语义，相对路径有独立模块的语义 /src 外的文件不应该被引入 vue-cli脚手架已经帮我们做了相关的约束了，正常我们的前端项目都会有个src文件夹，里面放着所有的项目需要的资源，js,css, png, svg 等等。src 外会放一些项目配置，依赖，环境等文件 这样的好处是方便划分项目代码文件和配置文件 二、目录结构 单页面目录结构 project │ .browserslistrc │ .env.production │ .eslintrc.js │ .gitignore │ babel.config.js │ package-lock.json │ package.json │ README.md │ vue.config.js │ yarn-error.log │ yarn.lock │ ├─public │ favicon.ico │ index.html │ |-- src |-- components |-- input |-- index.js |-- index.module.scss |-- pages |-- seller |-- components |-- input |-- index.js |-- index.module.scss |-- reducer.js |-- saga.js |-- index.js |-- index.module.scss |-- buyer |-- index.js |-- index.js 多页面目录结构 my-vue-test:. │ .browserslistrc │ .env.production │ .eslintrc.js │ .gitignore │ babel.config.js │ package-lock.json │ package.json │ README.md │ vue.config.js │ yarn-error.log │ yarn.lock │ ├─public │ favicon.ico │ index.html │ └─src ├─apis //接口文件根据页面或实例模块化 │ index.js │ login.js │ ├─components //全局公共组件 │ └─header │ index.less │ index.vue │ ├─config //配置（环境变量配置不同passid等） │ env.js │ index.js │ ├─contant //常量 │ index.js │ ├─images //图片 │ logo.png │ ├─pages //多页面vue项目，不同的实例 │ ├─index //主实例 │ │ │ index.js │ │ │ index.vue │ │ │ main.js │ │ │ router.js │ │ │ store.js │ │ │ │ │ ├─components //业务组件 │ │ └─pages //此实例中的各个路由 │ │ ├─amenu │ │ │ index.vue │ │ │ │ │ └─bmenu │ │ index.vue │ │ │ └─login //另一个实例 │ index.js │ index.vue │ main.js │ ├─scripts //包含各种常用配置，工具函数 │ │ map.js │ │ │ └─utils │ helper.js │ ├─store //vuex仓库 │ │ index.js │ │ │ ├─index │ │ actions.js │ │ getters.js │ │ index.js │ │ mutation-types.js │ │ mutations.js │ │ state.js │ │ │ └─user │ actions.js │ getters.js │ index.js │ mutation-types.js │ mutations.js │ state.js │ └─styles //样式统一配置 │ components.less │ ├─animation │ index.less │ slide.less │ ├─base │ index.less │ style.less │ var.less │ widget.less │ └─common index.less reset.less style.less transition.less 小结 项目的目录结构很重要，因为目录结构能体现很多东西，怎么规划目录结构可能每个人有自己的理解，但是按照一定的规范去进行目录的设计，能让项目整个架构看起来更为简洁，更加易用 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/permission.html":{"url":"vue/permission.html","title":"Vue项目中的权限管理","keywords":"","body":"面试官：vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？ 一、是什么 权限是对特定资源的访问许可，所谓权限控制，也就是确保用户只能访问到被分配的资源 而前端权限归根结底是请求的发起权，请求的发起可能有下面两种形式触发 页面加载触发 页面上的按钮点击触发 总的来说，所有的请求发起都触发自前端路由或视图 所以我们可以从这两方面入手，对触发权限的源头进行控制，最终要实现的目标是： 路由方面，用户登录后只能看到自己有权访问的导航菜单，也只能访问自己有权访问的路由地址，否则将跳转 4xx 提示页 视图方面，用户只能看到自己有权浏览的内容和有权操作的控件 最后再加上请求控制作为最后一道防线，路由可能配置失误，按钮可能忘了加权限，这种时候请求控制可以用来兜底，越权请求将在前端被拦截 二、如何做 前端权限控制可以分为四个方面： 接口权限 按钮权限 菜单权限 路由权限 接口权限 接口权限目前一般采用jwt的形式来验证，没有通过的话一般返回401，跳转到登录页面重新进行登录 登录完拿到token，将token存起来，通过axios请求拦截器进行拦截，每次请求的时候头部携带token axios.interceptors.request.use(config => { config.headers['token'] = cookie.get('token') return config }) axios.interceptors.response.use(res=>{},{response}=>{ if (response.data.code === 40099 || response.data.code === 40098) { //token过期或者错误 router.push('/login') } }) 路由权限控制 方案一 初始化即挂载全部路由，并且在路由上标记相应的权限信息，每次路由跳转前做校验 const routerMap = [ { path: '/permission', component: Layout, redirect: '/permission/index', alwaysShow: true, // will always show the root menu meta: { title: 'permission', icon: 'lock', roles: ['admin', 'editor'] // you can set roles in root nav }, children: [{ path: 'page', component: () => import('@/views/permission/page'), name: 'pagePermission', meta: { title: 'pagePermission', roles: ['admin'] // or you can only set roles in sub nav } }, { path: 'directive', component: () => import('@/views/permission/directive'), name: 'directivePermission', meta: { title: 'directivePermission' // if do not set roles, means: this page does not require permission } }] }] 这种方式存在以下四种缺点： 加载所有的路由，如果路由很多，而用户并不是所有的路由都有权限访问，对性能会有影响。 全局路由守卫里，每次路由跳转都要做权限判断。 菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译 菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识 方案二 初始化的时候先挂载不需要权限控制的路由，比如登录页，404等错误页。如果用户通过URL进行强制访问，则会直接进入404，相当于从源头上做了控制 登录后，获取用户的权限信息，然后筛选有权限访问的路由，在全局路由守卫里进行调用addRoutes添加路由 import router from './router' import store from './store' import { Message } from 'element-ui' import NProgress from 'nprogress' // progress bar import 'nprogress/nprogress.css'// progress bar style import { getToken } from '@/utils/auth' // getToken from cookie NProgress.configure({ showSpinner: false })// NProgress Configuration // permission judge function function hasPermission(roles, permissionRoles) { if (roles.indexOf('admin') >= 0) return true // admin permission passed directly if (!permissionRoles) return true return roles.some(role => permissionRoles.indexOf(role) >= 0) } const whiteList = ['/login', '/authredirect']// no redirect whitelist router.beforeEach((to, from, next) => { NProgress.start() // start progress bar if (getToken()) { // determine if there has token /* has token*/ if (to.path === '/login') { next({ path: '/' }) NProgress.done() // if current page is dashboard will not trigger afterEach hook, so manually handle it } else { if (store.getters.roles.length === 0) { // 判断当前用户是否已拉取完user_info信息 store.dispatch('GetUserInfo').then(res => { // 拉取user_info const roles = res.data.roles // note: roles must be a array! such as: ['editor','develop'] store.dispatch('GenerateRoutes', { roles }).then(() => { // 根据roles权限生成可访问的路由表 router.addRoutes(store.getters.addRouters) // 动态添加可访问路由表 next({ ...to, replace: true }) // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record }) }).catch((err) => { store.dispatch('FedLogOut').then(() => { Message.error(err || 'Verification failed, please login again') next({ path: '/' }) }) }) } else { // 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓ if (hasPermission(store.getters.roles, to.meta.roles)) { next()// } else { next({ path: '/401', replace: true, query: { noGoBack: true }}) } // 可删 ↑ } } } else { /* has no token*/ if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入 next() } else { next('/login') // 否则全部重定向到登录页 NProgress.done() // if current page is login will not trigger afterEach hook, so manually handle it } } }) router.afterEach(() => { NProgress.done() // finish progress bar }) 按需挂载，路由就需要知道用户的路由权限，也就是在用户登录进来的时候就要知道当前用户拥有哪些路由权限 这种方式也存在了以下的缺点： 全局路由守卫里，每次路由跳转都要做判断 菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译 菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识 菜单权限 菜单权限可以理解成将页面与理由进行解耦 方案一 菜单与路由分离，菜单由后端返回 前端定义路由信息 { name: \"login\", path: \"/login\", component: () => import(\"@/pages/Login.vue\") } name字段都不为空，需要根据此字段与后端返回菜单做关联，后端返回的菜单信息中必须要有name对应的字段，并且做唯一性校验 全局路由守卫里做判断 function hasPermission(router, accessMenu) { if (whiteList.indexOf(router.path) !== -1) { return true; } let menu = Util.getMenuByName(router.name, accessMenu); if (menu.name) { return true; } return false; } Router.beforeEach(async (to, from, next) => { if (getToken()) { let userInfo = store.state.user.userInfo; if (!userInfo.name) { try { await store.dispatch(\"GetUserInfo\") await store.dispatch('updateAccessMenu') if (to.path === '/login') { next({ name: 'home_index' }) } else { //Util.toDefaultPage([...routers], to.name, router, next); next({ ...to, replace: true })//菜单权限更新完成,重新进一次当前路由 } } catch (e) { if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入 next() } else { next('/login') } } } else { if (to.path === '/login') { next({ name: 'home_index' }) } else { if (hasPermission(to, store.getters.accessMenu)) { Util.toDefaultPage(store.getters.accessMenu,to, routes, next); } else { next({ path: '/403',replace:true }) } } } } else { if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入 next() } else { next('/login') } } let menu = Util.getMenuByName(to.name, store.getters.accessMenu); Util.title(menu.title); }); Router.afterEach((to) => { window.scrollTo(0, 0); }); 每次路由跳转的时候都要判断权限，这里的判断也很简单，因为菜单的name与路由的name是一一对应的，而后端返回的菜单就已经是经过权限过滤的 如果根据路由name找不到对应的菜单，就表示用户有没权限访问 如果路由很多，可以在应用初始化的时候，只挂载不需要权限控制的路由。取得后端返回的菜单后，根据菜单与路由的对应关系，筛选出可访问的路由，通过addRoutes动态挂载 这种方式的缺点： 菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用 全局路由守卫里，每次路由跳转都要做判断 方案二 菜单和路由都由后端返回 前端统一定义路由组件 const Home = () => import(\"../pages/Home.vue\"); const UserInfo = () => import(\"../pages/UserInfo.vue\"); export default { home: Home, userInfo: UserInfo }; 后端路由组件返回以下格式 [ { name: \"home\", path: \"/\", component: \"home\" }, { name: \"home\", path: \"/userinfo\", component: \"userInfo\" } ] 在将后端返回路由通过addRoutes动态挂载之间，需要将数据处理一下，将component字段换为真正的组件 如果有嵌套路由，后端功能设计的时候，要注意添加相应的字段，前端拿到数据也要做相应的处理 这种方法也会存在缺点： 全局路由守卫里，每次路由跳转都要做判断 前后端的配合要求更高 按钮权限 方案一 按钮权限也可以用v-if判断 但是如果页面过多，每个页面页面都要获取用户权限role和路由表里的meta.btnPermissions，然后再做判断 这种方式就不展开举例了 方案二 通过自定义指令进行按钮权限的判断 首先配置路由 { path: '/permission', component: Layout, name: '权限测试', meta: { btnPermissions: ['admin', 'supper', 'normal'] }, //页面需要的权限 children: [{ path: 'supper', component: _import('system/supper'), name: '权限测试页', meta: { btnPermissions: ['admin', 'supper'] } //页面需要的权限 }, { path: 'normal', component: _import('system/normal'), name: '权限测试页', meta: { btnPermissions: ['admin'] } //页面需要的权限 }] } 自定义权限鉴定指令 import Vue from 'vue' /**权限指令**/ const has = Vue.directive('has', { bind: function (el, binding, vnode) { // 获取页面按钮权限 let btnPermissionsArr = []; if(binding.value){ // 如果指令传值，获取指令参数，根据指令参数和当前登录人按钮权限做比较。 btnPermissionsArr = Array.of(binding.value); }else{ // 否则获取路由中的参数，根据路由的btnPermissionsArr和当前登录人按钮权限做比较。 btnPermissionsArr = vnode.context.$route.meta.btnPermissions; } if (!Vue.prototype.$_has(btnPermissionsArr)) { el.parentNode.removeChild(el); } } }); // 权限检查方法 Vue.prototype.$_has = function (value) { let isExist = false; // 获取用户按钮权限 let btnPermissionsStr = sessionStorage.getItem(\"btnPermissions\"); if (btnPermissionsStr == undefined || btnPermissionsStr == null) { return false; } if (value.indexOf(btnPermissionsStr) > -1) { isExist = true; } return isExist; }; export {has} 在使用的按钮中只需要引用v-has指令 编辑 小结 关于权限如何选择哪种合适的方案，可以根据自己项目的方案项目，如考虑路由与菜单是否分离 权限需要前后端结合，前端尽可能的去控制，更多的需要后台判断 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/404.html":{"url":"vue/404.html","title":"Vue项目本地开发完成后部署到服务器后报404","keywords":"","body":"面试官：vue项目本地开发完成后部署到服务器后报404是什么原因呢？ 一、如何部署 前后端分离开发模式下，前后端是独立布署的，前端只需要将最后的构建物上传至目标服务器的web容器指定的静态目录下即可 我们知道vue项目在构建后，是生成一系列的静态文件 常规布署我们只需要将这个目录上传至目标服务器即可 // scp 上传 user为主机登录用户，host为主机外网ip, xx为web容器静态资源路径 scp dist.zip user@host:/xx/xx/xx 让web容器跑起来，以nginx为例 server { listen 80; server_name www.xxx.com; location / { index /data/dist/index.html; } } 配置完成记得重启nginx // 检查配置是否正确 nginx -t // 平滑重启 nginx -s reload 操作完后就可以在浏览器输入域名进行访问了 当然上面只是提到最简单也是最直接的一种布署方式 什么自动化，镜像，容器，流水线布署，本质也是将这套逻辑抽象，隔离，用程序来代替重复性的劳动，本文不展开 二、404问题 这是一个经典的问题，相信很多同学都有遇到过，那么你知道其真正的原因吗？ 我们先还原一下场景： vue项目在本地时运行正常，但部署到服务器中，刷新页面，出现了404错误 先定位一下，HTTP 404 错误意味着链接指向的资源不存在 问题在于为什么不存在？且为什么只有history模式下会出现这个问题？ 为什么history模式下有问题 Vue是属于单页应用（single-page application） 而SPA是一种网络应用程序或网站的模型，所有用户交互是通过动态重写当前页面，前面我们也看到了，不管我们应用有多少页面，构建物都只会产出一个index.html 现在，我们回头来看一下我们的nginx配置 server { listen 80; server_name www.xxx.com; location / { index /data/dist/index.html; } } 可以根据 nginx 配置得出，当我们在地址栏输入 www.xxx.com 时，这时会打开我们 dist 目录下的 index.html 文件，然后我们在跳转路由进入到 www.xxx.com/login 关键在这里，当我们在 website.com/login 页执行刷新操作，nginx location 是没有相关配置的，所以就会出现 404 的情况 为什么hash模式下没有问题 router hash 模式我们都知道是用符号#表示的，如 website.com/#/login, hash 的值为 #/login 它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对服务端完全没有影响，因此改变 hash 不会重新加载页面 hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 website.com/#/login 只有 website.com 会被包含在请求中 ，因此对于服务端来说，即使没有配置location，也不会返回404错误 解决方案 看到这里我相信大部分同学都能想到怎么解决问题了， 产生问题的本质是因为我们的路由是通过JS来执行视图切换的， 当我们进入到子路由时刷新页面，web容器没有相对应的页面此时会出现404 所以我们只需要配置将任意页面都重定向到 index.html，把路由交由前端处理 对nginx配置文件.conf修改，添加try_files $uri $uri/ /index.html; server { listen 80; server_name www.xxx.com; location / { index /data/dist/index.html; try_files $uri $uri/ /index.html; } } 修改完配置文件后记得配置的更新 nginx -s reload 这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件 为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面 const router = new VueRouter({ mode: 'history', routes: [ { path: '*', component: NotFoundComponent } ] }) 关于后端配置方案还有：Apache、nodejs等，思想是一致的，这里就不展开述说了 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/cors.html":{"url":"vue/cors.html","title":"Vue项目如何解决跨域","keywords":"","body":"面试官：Vue项目中你是如何解决跨域的呢？ 一、跨域是什么 跨域本质是浏览器基于同源策略的一种安全手段 同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能 所谓同源（即指在同一个域）具有以下三个相同点 协议相同（protocol） 主机相同（host） 端口相同（port） 反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域 一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。 二、如何解决 解决跨域的方法有很多，下面列举了三种： JSONP CORS Proxy 而在vue项目中，我们主要针对CORS或Proxy这两种方案进行展开 CORS CORS （Cross-Origin Resource Sharing，跨域资源共享）是一个系统，它由一系列传输的HTTP头组成，这些HTTP头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应 CORS 实现起来非常方便，只需要增加一些 HTTP 头，让服务器能声明允许的访问来源 只要后端实现了 CORS，就实现了跨域 以koa框架举例 添加中间件，直接设置Access-Control-Allow-Origin请求头 app.use(async (ctx, next)=> { ctx.set('Access-Control-Allow-Origin', '*'); ctx.set('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild'); ctx.set('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS'); if (ctx.method == 'OPTIONS') { ctx.body = 200; } else { await next(); } }) ps: Access-Control-Allow-Origin 设置为*其实意义不大，可以说是形同虚设，实际应用中，上线前我们会将Access-Control-Allow-Origin 值设为我们目标host Proxy 代理（Proxy）也称网络代理，是一种特殊的网络服务，允许一个（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击 方案一 如果是通过vue-cli脚手架工具搭建项目，我们可以通过webpack为我们起一个本地服务器作为请求的代理对象 通过该服务器转发请求至目标服务器，得到结果再转发给前端，但是最终发布上线时如果web应用和接口服务器不在一起仍会跨域 在vue.config.js文件，新增以下代码 amodule.exports = { devServer: { host: '127.0.0.1', port: 8084, open: true,// vue项目启动时自动打开浏览器 proxy: { '/api': { // '/api'是代理标识，用于告诉node，url前面是/api的就是使用代理的 target: \"http://xxx.xxx.xx.xx:8080\", //目标地址，一般是指后台服务器地址 changeOrigin: true, //是否跨域 pathRewrite: { // pathRewrite 的作用是把实际Request Url中的'/api'用\"\"代替 '^/api': \"\" } } } } } 通过axios发送请求中，配置请求的根路径 axios.defaults.baseURL = '/api' 方案二 此外，还可通过服务端实现代理请求转发 以express框架为例 var express = require('express'); const proxy = require('http-proxy-middleware') const app = express() app.use(express.static(__dirname + '/')) app.use('/api', proxy({ target: 'http://localhost:4000', changeOrigin: false })); module.exports = app 方案三 通过配置nginx实现代理 server { listen 80; # server_name www.josephxia.com; location / { root /var/www/html; index index.html index.htm; try_files $uri $uri/ /index.html; } location /api { proxy_pass http://127.0.0.1:3000; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue/error.html":{"url":"vue/error.html","title":"怎么处理vue项目中的错误","keywords":"","body":"面试官：你是怎么处理vue项目中的错误的？ 一、错误类型 任何一个框架，对于错误的处理都是一种必备的能力 在Vue 中，则是定义了一套对应的错误处理规则给到使用者，且在源代码级别，对部分必要的过程做了一定的错误处理。 主要的错误来源包括： 后端接口错误 代码中本身逻辑错误 二、如何处理 后端接口错误 通过axios的interceptor实现网络请求的response先进行一层拦截 apiClient.interceptors.response.use( response => { return response; }, error => { if (error.response.status == 401) { router.push({ name: \"Login\" }); } else { message.error(\"出错了\"); return Promise.reject(error); } } ); 代码逻辑问题 全局设置错误处理 设置全局错误处理函数 Vue.config.errorHandler = function (err, vm, info) { // handle error // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子 // 只在 2.2.0+ 可用 } errorHandler指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例 不过值得注意的是，在不同Vue 版本中，该全局 API 作用的范围会有所不同： 从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 undefined 时，被捕获的错误会通过 console.error 输出而避免应用崩 从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了 从 2.6.0 起，这个钩子也会捕获 v-on DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理 生命周期钩子 errorCaptured是 2.5.0 新增的一个生命钩子函数，当捕获到一个来自子孙组件的错误时被调用 基本类型 (err: Error, vm: Component, info: string) => ?boolean 此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播 参考官网，错误传播规则如下： 默认情况下，如果全局的 config.errorHandler 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报 如果一个组件的继承或父级从属链路中存在多个 errorCaptured 钩子，则它们将会被相同的错误逐个唤起。 如果此 errorCaptured 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 config.errorHandler 一个 errorCaptured 钩子能够返回 false 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler 下面来看个例子 定义一个父组件cat Vue.component('cat', { template:` Cat: `, props:{ name:{ required:true, type:String } }, errorCaptured(err,vm,info) { console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`); return false; } }); 定义一个子组件kitten，其中dontexist()并没有定义，存在错误 Vue.component('kitten', { template:'Kitten: ', props:{ name:{ required:true, type:String } } }); 页面中使用组件 在父组件的errorCaptured则能够捕获到信息 cat EC: TypeError: dontexist is not a function info: render 三、源码分析 异常处理源码 源码位置：/src/core/util/error.js // Vue 全局配置,也就是上面的Vue.config import config from '../config' import { warn } from './debug' // 判断环境 import { inBrowser, inWeex } from './env' // 判断是否是Promise，通过val.then === 'function' && val.catch === 'function', val ！=== null && val !== undefined import { isPromise } from 'shared/util' // 当错误函数处理错误时，停用deps跟踪以避免可能出现的infinite rendering // 解决以下出现的问题https://github.com/vuejs/vuex/issues/1505的问题 import { pushTarget, popTarget } from '../observer/dep' export function handleError (err: Error, vm: any, info: string) { // Deactivate deps tracking while processing error handler to avoid possible infinite rendering. pushTarget() try { // vm指当前报错的组件实例 if (vm) { let cur = vm // 首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用errorCaptured 方法。 // 在遍历调用完所有 errorCaptured 方法、或 errorCaptured 方法有报错时，调用 globalHandleError 方法 while ((cur = cur.$parent)) { const hooks = cur.$options.errorCaptured // 判断是否存在errorCaptured钩子函数 if (hooks) { // 选项合并的策略，钩子函数会被保存在一个数组中 for (let i = 0; i handleError(e, vm, info + ` (Promise/async)`)) // avoid catch triggering multiple times when nested calls // 避免嵌套调用时catch多次的触发 res._handled = true } } catch (e) { // 处理执行错误 handleError(e, vm, info) } return res } //全局错误处理 function globalHandleError (err, vm, info) { // 获取全局配置，判断是否设置处理函数，默认undefined // 已配置 if (config.errorHandler) { // try{}catch{} 住全局错误处理函数 try { // 执行设置的全局错误处理函数，handle error 想干啥就干啥💗 return config.errorHandler.call(null, err, vm, info) } catch (e) { // 如果开发者在errorHandler函数中手动抛出同样错误信息throw err // 判断err信息是否相等，避免log两次 // 如果抛出新的错误信息throw err Error('你好毒')，将会一起log输出 if (e !== err) { logError(e, null, 'config.errorHandler') } } } // 未配置常规log输出 logError(err, vm, info) } // 错误输出函数 function logError (err, vm, info) { if (process.env.NODE_ENV !== 'production') { warn(`Error in ${info}: \"${err.toString()}\"`, vm) } /* istanbul ignore else */ if ((inBrowser || inWeex) && typeof console !== 'undefined') { console.error(err) } else { throw err } } 小结 handleError在需要捕获异常的地方调用，首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用errorCaptured 方法，在遍历调用完所有 errorCaptured 方法或 errorCaptured 方法有报错时，调用 globalHandleError 方法 globalHandleError调用全局的 errorHandler 方法，再通过logError判断环境输出错误信息 invokeWithErrorHandling更好的处理异步错误信息 logError判断环境，选择不同的抛错方式。非生产环境下，调用warn方法处理错误 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue3/goal.html":{"url":"vue3/goal.html","title":"Vue的设计目标和做了那些优化","keywords":"","body":"面试官：Vue3.0的设计目标是什么？做了哪些优化 一、设计目标 不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下Vue3之前我们或许会面临的问题 随着功能的增长，复杂组件的代码变得越来越难以维护 缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制 类型推断不够友好 bundle的时间太久了 而 Vue3 经过长达两三年时间的筹备，做了哪些事情？ 我们从结果反推 更小 更快 TypeScript支持 API设计一致性 提高自身可维护性 开放更多底层功能 一句话概述，就是更小更快更友好了 更小 Vue3移除一些不常用的 API 引入tree-shaking，可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了 更快 主要体现在编译方面： diff算法优化 静态提升 事件监听缓存 SSR优化 下篇文章我们会进一步介绍 更友好 vue3在兼顾vue2的options API的同时还推出了composition API，大大增加了代码的逻辑组织和代码复用能力 这里代码简单演示下： 存在一个获取鼠标位置的函数 import { toRefs, reactive } from 'vue'; function useMouse(){ const state = reactive({x:0,y:0}); const update = e=>{ state.x = e.pageX; state.y = e.pageY; } onMounted(()=>{ window.addEventListener('mousemove',update); }) onUnmounted(()=>{ window.removeEventListener('mousemove',update); }) return toRefs(state); } 我们只需要调用这个函数，即可获取x、y的坐标，完全不用关注实现过程 试想一下，如果很多类似的第三方库，我们只需要调用即可，不必关注实现过程，开发效率大大提高 同时，VUE3是基于typescipt编写的，可以享受到自动的类型定义提示 三、优化方案 vue3从很多层面都做了优化，可以分成三个方面： 源码 性能 语法 API 源码 源码可以从两个层面展开： 源码管理 TypeScript 源码管理 vue3整个源码是通过 monorepo的方式维护的，根据功能将不同的模块拆分到packages目录下面不同的子目录中 这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性 另外一些 package（比如 reactivity 响应式库）是可以独立于 Vue 使用的，这样用户如果只想使用 Vue3的响应式能力，可以单独依赖这个响应式库而不用去依赖整个 Vue TypeScript Vue3是基于typeScript编写的，提供了更好的类型检查，能支持复杂的类型推导 性能 vue3是从什么哪些方面对性能进行进一步优化呢？ 体积优化 编译优化 数据劫持优化 这里讲述数据劫持： 在vue2中，数据劫持是通过Object.defineProperty，这个 API 有一些缺陷，并不能检测对象属性的添加和删除 Object.defineProperty(data, 'a',{ get(){ // track }, set(){ // trigger } }) 尽管Vue为了解决这个问题提供了 set和delete实例方法，但是对于用户来说，还是增加了一定的心智负担 同时在面对嵌套层级比较深的情况下，就存在性能问题 default { data: { a: { b: { c: { d: 1 } } } } } 相比之下，vue3是通过proxy监听整个对象，那么对于删除还是监听当然也能监听到 同时Proxy 并不能监听到内部深层次的对象变化，而 Vue3 的处理方式是在getter 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归 语法 API 这里当然说的就是composition API，其两大显著的优化： 优化逻辑组织 优化逻辑复用 逻辑组织 一张图，我们可以很直观地感受到 Composition API在逻辑组织方面的优势 相同功能的代码编写在一块，而不像options API那样，各个功能的代码混成一块 逻辑复用 在vue2中，我们是通过mixin实现功能混合，如果多个mixin混合，会存在两个非常明显的问题：命名冲突和数据来源不清晰 而通过composition这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可 同样是上文的获取鼠标位置的例子 import { toRefs, reactive, onUnmounted, onMounted } from 'vue'; function useMouse(){ const state = reactive({x:0,y:0}); const update = e=>{ state.x = e.pageX; state.y = e.pageY; } onMounted(()=>{ window.addEventListener('mousemove',update); }) onUnmounted(()=>{ window.removeEventListener('mousemove',update); }) return toRefs(state); } 组件使用 import useMousePosition from './mouse' export default { setup() { const { x, y } = useMousePosition() return { x, y } } } 可以看到，整个数据来源清晰了，即使去编写更多的hook函数，也不会出现命名冲突的问题 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue3/composition.html":{"url":"vue3/composition.html","title":"Vue3组合式api与vue2配置式api的区别","keywords":"","body":"面试官：Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？ 开始之前 Composition API 可以说是Vue3的最大特点，那么为什么要推出Composition Api，解决了什么问题？ 通常使用Vue2开发的项目，普遍会存在以下问题： 代码的可读性随着组件变大而变差 每一种代码复用的方式，都存在缺点 TypeScript支持有限 以上通过使用Composition Api都能迎刃而解 正文 一、Options Api Options API，即大家常说的选项API，即以vue为后缀的文件，通过定义methods，computed，watch，data等属性与方法，共同处理页面逻辑 如下图： 可以看到Options代码编写方式，如果是组件状态，则写在data属性上，如果是方法，则写在methods属性上... 用组件的选项 (data、computed、methods、watch) 组织逻辑在大多数情况下都有效 然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解 二、Composition Api 在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合） 即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API 三、对比 下面对Composition Api与Options Api进行两大方面的比较 逻辑组织 逻辑复用 逻辑组织 Options API 假设一个组件是一个大型组件，其内部有很多处理逻辑关注点（对应下图不用颜色） 可以看到，这种碎片化使得理解和维护复杂组件变得困难 选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块 Compostion API 而Compositon API正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去 下面举个简单例子，将处理count属性相关的代码放在同一个函数了 function useCount() { let count = ref(10); let double = computed(() => { return count.value * 2; }); const handleConut = () => { count.value = count.value * 2; }; console.log(count); return { count, double, handleConut, }; } 组件上中使用count export default defineComponent({ setup() { const { count, double, handleConut } = useCount(); return { count, double, handleConut } }, }); 再来一张图进行对比，可以很直观地感受到 Composition API在逻辑组织方面的优势，以后修改一个属性功能的时候，只需要跳到控制该属性的方法中即可 逻辑复用 在Vue2中，我们是用过mixin去复用相同的逻辑 下面举个例子，我们会另起一个mixin.js文件 export const MoveMixin = { data() { return { x: 0, y: 0, }; }, methods: { handleKeyup(e) { console.log(e.code); // 上下左右 x y switch (e.code) { case \"ArrowUp\": this.y--; break; case \"ArrowDown\": this.y++; break; case \"ArrowLeft\": this.x--; break; case \"ArrowRight\": this.x++; break; } }, }, mounted() { window.addEventListener(\"keyup\", this.handleKeyup); }, unmounted() { window.removeEventListener(\"keyup\", this.handleKeyup); }, }; 然后在组件中使用 Mouse position: x / y import mousePositionMixin from './mouse' export default { mixins: [mousePositionMixin] } 使用单个mixin似乎问题不大，但是当我们一个组件混入大量不同的 mixins 的时候 mixins: [mousePositionMixin, fooMixin, barMixin, otherMixin] 会存在两个非常明显的问题： 命名冲突 数据来源不清晰 现在通过Compositon API这种方式改写上面的代码 import { onMounted, onUnmounted, reactive } from \"vue\"; export function useMove() { const position = reactive({ x: 0, y: 0, }); const handleKeyup = (e) => { console.log(e.code); // 上下左右 x y switch (e.code) { case \"ArrowUp\": // y.value--; position.y--; break; case \"ArrowDown\": // y.value++; position.y++; break; case \"ArrowLeft\": // x.value--; position.x--; break; case \"ArrowRight\": // x.value++; position.x++; break; } }; onMounted(() => { window.addEventListener(\"keyup\", handleKeyup); }); onUnmounted(() => { window.removeEventListener(\"keyup\", handleKeyup); }); return { position }; } 在组件中使用 Mouse position: x / y import { useMove } from \"./useMove\"; import { toRefs } from \"vue\"; export default { setup() { const { position } = useMove(); const { x, y } = toRefs(position); return { x, y, }; }, }; 可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题 小结 在逻辑组织和逻辑复用方面，Composition API是优于Options API 因为Composition API几乎是函数，会有更好的类型推断。 Composition API对 tree-shaking 友好，代码也更容易压缩 Composition API中见不到this的使用，减少了this指向不明的情况 如果是小型组件，可以继续使用Options API，也是十分友好的 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue3/performance.html":{"url":"vue3/performance.html","title":"Vue3的性能优化体现在哪几方面","keywords":"","body":"面试官：Vue3.0性能提升主要是通过哪几方面体现的？ 一、编译阶段 回顾Vue2，我们知道每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把用到的数据property记录为依赖，当依赖发生改变，触发setter，则会通知watcher，从而使关联的组件重新渲染 试想一下，一个组件结构如下图 静态文本 静态文本 静态文本 ... 静态文本 可以看到，组件内部只有一个动态节点，剩余一堆都是静态节点，所以这里很多 diff 和遍历其实都是不需要的，造成性能浪费 因此，Vue3在编译阶段，做了进一步优化。主要有如下： diff算法优化 静态提升 事件监听缓存 SSR优化 diff算法优化 vue3在diff算法中相比vue2增加了静态标记 关于这个静态标记，其作用是为了会发生变化的地方添加一个flag标记，下次发生变化的时候直接找该地方进行比较 下图这里，已经标记静态节点的p标签在diff过程中则不会比较，把性能进一步提高 关于静态类型枚举如下 export const enum PatchFlags { TEXT = 1,// 动态的文本节点 CLASS = 1 静态提升 Vue3中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用 这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用 你好 没有做静态提升之前 export function render(_ctx, _cache, $props, $setup, $data, $options) { return (_openBlock(), _createBlock(_Fragment, null, [ _createVNode(\"span\", null, \"你好\"), _createVNode(\"div\", null, _toDisplayString(_ctx.message), 1 /* TEXT */) ], 64 /* STABLE_FRAGMENT */)) } 做了静态提升之后 const _hoisted_1 = /*#__PURE__*/_createVNode(\"span\", null, \"你好\", -1 /* HOISTED */) export function render(_ctx, _cache, $props, $setup, $data, $options) { return (_openBlock(), _createBlock(_Fragment, null, [ _hoisted_1, _createVNode(\"div\", null, _toDisplayString(_ctx.message), 1 /* TEXT */) ], 64 /* STABLE_FRAGMENT */)) } // Check the console for the AST 静态内容_hoisted_1被放置在render 函数外，每次渲染的时候只要取 _hoisted_1 即可 同时 _hoisted_1 被打上了 PatchFlag ，静态标记值为 -1 ，特殊标志是负整数表示永远不会用于 Diff 事件监听缓存 默认情况下绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化 点我 没开启事件监听器缓存 export const render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) { return (_openBlock(), _createBlock(\"div\", null, [ _createVNode(\"button\", { onClick: _ctx.onClick }, \"点我\", 8 /* PROPS */, [\"onClick\"]) // PROPS=1 开启事件侦听器缓存后 export function render(_ctx, _cache, $props, $setup, $data, $options) { return (_openBlock(), _createBlock(\"div\", null, [ _createVNode(\"button\", { onClick: _cache[1] || (_cache[1] = (...args) => (_ctx.onClick(...args))) }, \"点我\") ])) } 上述发现开启了缓存后，没有了静态标记。也就是说下次diff算法的时候直接使用 SSR优化 当静态内容大到一定量级时候，会用createStaticVNode方法在客户端去生成一个static node，这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染 div> 你好 ... // 很多个静态属性 编译后 import { mergeProps as _mergeProps } from \"vue\" import { ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate } from \"@vue/server-renderer\" export function ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) { const _cssVars = { style: { color: _ctx.color }} _push(`你好...你好${ _ssrInterpolate(_ctx.message) }`) } 二、源码体积 相比Vue2，Vue3整体体积变小了，除了移出一些不常用的API，再重要的是Tree shanking 任何一个函数，如ref、reavtived、computed等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小 import { computed, defineComponent, ref } from 'vue'; export default defineComponent({ setup(props, context) { const age = ref(18) let state = reactive({ name: 'test' }) const readOnlyAge = computed(() => age.value++) // 19 return { age, state, readOnlyAge } } }); 三、响应式系统 vue2中采用 defineProperty来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加getter和setter，实现响应式 vue3采用proxy重写了响应式系统，因为proxy可以对整个对象进行监听，所以不需要深度遍历 可以监听动态属性的添加 可以监听到数组的索引和数组length属性 可以监听删除属性 关于这两个 API 具体的不同，我们下篇文章会进行一个更加详细的介绍 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue3/proxy.html":{"url":"vue3/proxy.html","title":"Vue3为什么Proxy替代defineProperty","keywords":"","body":"面试官：Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？ 一、Object.defineProperty 定义：Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象 为什么能实现响应式 通过defineProperty 两个属性，get及set get 属性的 getter 函数，当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值 set 属性的 setter 函数，当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined 下面通过代码展示： 定义一个响应式函数defineReactive function update() { app.innerText = obj.foo } function defineReactive(obj, key, val) { Object.defineProperty(obj, key, { get() { console.log(`get ${key}:${val}`); return val }, set(newVal) { if (newVal !== val) { val = newVal update() } } }) } 调用defineReactive，数据发生变化触发update方法，实现数据响应式 const obj = {} defineReactive(obj, 'foo', '') setTimeout(()=>{ obj.foo = new Date().toLocaleTimeString() },1000) 在对象存在多个key情况下，需要进行遍历 function observe(obj) { if (typeof obj !== 'object' || obj == null) { return } Object.keys(obj).forEach(key => { defineReactive(obj, key, obj[key]) }) } 如果存在嵌套对象的情况，还需要在defineReactive中进行递归 function defineReactive(obj, key, val) { observe(val) Object.defineProperty(obj, key, { get() { console.log(`get ${key}:${val}`); return val }, set(newVal) { if (newVal !== val) { val = newVal update() } } }) } 当给key赋值为对象的时候，还需要在set属性中进行递归 set(newVal) { if (newVal !== val) { observe(newVal) // 新值是对象的情况 notifyUpdate() } } 上述例子能够实现对一个对象的基本响应式，但仍然存在诸多问题 现在对一个对象进行删除与添加属性操作，无法劫持到 const obj = { foo: \"foo\", bar: \"bar\" } observe(obj) delete obj.foo // no ok obj.jar = 'xxx' // no ok 当我们对一个数组进行监听的时候，并不那么好使了 const arrData = [1,2,3,4,5]; arrData.forEach((val,index)=>{ defineProperty(arrData,index,val) }) arrData.push() // no ok arrData.pop() // no ok arrDate[0] = 99 // ok 可以看到数据的api无法劫持到，从而无法实现数据响应式， 所以在Vue2中，增加了set、delete API，并且对数组api方法进行一个重写 还有一个问题则是，如果存在深层的嵌套对象关系，需要深层的进行监听，造成了性能的极大问题 小结 检测不到对象属性的添加和删除 数组API方法无法监听到 需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题 二、proxy Proxy的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性了 在ES6系列中，我们详细讲解过Proxy的使用，就不再述说了 下面通过代码进行展示： 定义一个响应式方法reactive function reactive(obj) { if (typeof obj !== 'object' && obj != null) { return obj } // Proxy相当于在对象外层加拦截 const observed = new Proxy(obj, { get(target, key, receiver) { const res = Reflect.get(target, key, receiver) console.log(`获取${key}:${res}`) return res }, set(target, key, value, receiver) { const res = Reflect.set(target, key, value, receiver) console.log(`设置${key}:${value}`) return res }, deleteProperty(target, key) { const res = Reflect.deleteProperty(target, key) console.log(`删除${key}:${res}`) return res } }) return observed } 测试一下简单数据的操作，发现都能劫持 const state = reactive({ foo: 'foo' }) // 1.获取 state.foo // ok // 2.设置已存在属性 state.foo = 'fooooooo' // ok // 3.设置不存在属性 state.dong = 'dong' // ok // 4.删除属性 delete state.dong // ok 再测试嵌套对象情况，这时候发现就不那么 OK 了 const state = reactive({ bar: { a: 1 } }) // 设置嵌套对象属性 state.bar.a = 10 // no ok 如果要解决，需要在get之上再进行一层代理 function reactive(obj) { if (typeof obj !== 'object' && obj != null) { return obj } // Proxy相当于在对象外层加拦截 const observed = new Proxy(obj, { get(target, key, receiver) { const res = Reflect.get(target, key, receiver) console.log(`获取${key}:${res}`) return isObject(res) ? reactive(res) : res }, return observed } 三、总结 Object.defineProperty只能遍历对象属性进行劫持 function observe(obj) { if (typeof obj !== 'object' || obj == null) { return } Object.keys(obj).forEach(key => { defineReactive(obj, key, obj[key]) }) } Proxy直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的 function reactive(obj) { if (typeof obj !== 'object' && obj != null) { return obj } // Proxy相当于在对象外层加拦截 const observed = new Proxy(obj, { get(target, key, receiver) { const res = Reflect.get(target, key, receiver) console.log(`获取${key}:${res}`) return res }, set(target, key, value, receiver) { const res = Reflect.set(target, key, value, receiver) console.log(`设置${key}:${value}`) return res }, deleteProperty(target, key) { const res = Reflect.deleteProperty(target, key) console.log(`删除${key}:${res}`) return res } }) return observed } Proxy可以直接监听数组的变化（push、shift、splice） const obj = [1,2,3] const proxtObj = reactive(obj) obj.psuh(4) // ok Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等，这是Object.defineProperty不具备的 正因为defineProperty自身的缺陷，导致Vue2在实现响应式过程需要实现其他的方法辅助（如重写数组方法、增加额外set、delete方法） // 数组重写 const originalProto = Array.prototype const arrayProto = Object.create(originalProto) ['push', 'pop', 'shift', 'unshift', 'splice', 'reverse', 'sort'].forEach(method => { arrayProto[method] = function () { originalProto[method].apply(this.arguments) dep.notice() } }); // set、delete Vue.set(obj,'bar','newbar') Vue.delete(obj),'bar') Proxy 不兼容IE，也没有 polyfill, defineProperty 能支持到IE9 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"vue3/treeshaking.html":{"url":"vue3/treeshaking.html","title":"Vue3中Treeshaking特性","keywords":"","body":"面试官：说说Vue 3.0中Treeshaking特性？举例说明一下？ 一、是什么 Tree shaking 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 Dead code elimination 简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码 如果把代码打包比作制作蛋糕，传统的方式是把鸡蛋（带壳）全部丢进去搅拌，然后放入烤箱，最后把（没有用的）蛋壳全部挑选并剔除出去 而treeshaking则是一开始就把有用的蛋白蛋黄（import）放入搅拌，最后直接作出蛋糕 也就是说 ，tree shaking 其实是找出使用的代码 在Vue2中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是Vue实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到 import Vue from 'vue' Vue.nextTick(() => {}) 而Vue3源码引入tree shaking特性，将全局 API 进行分块。如果您不使用其某些功能，它们将不会包含在您的基础包中 import { nextTick, observable } from 'vue' nextTick(() => {}) 二、如何做 Tree shaking是基于ES6模板语法（import与exports），主要是借助ES6模块的静态编译思想，在编译时就能确定模块的依赖关系，以及输入和输出的变量 Tree shaking无非就是做了两件事： 编译阶段利用ES6 Module判断哪些模块已经加载 判断那些模块和变量未被使用或者引用，进而删除对应代码 下面就来举个例子： 通过脚手架vue-cli安装Vue2与Vue3项目 vue create vue-demo Vue2 项目 组件中使用data属性 export default { data: () => ({ count: 1, }), }; 对项目进行打包，体积如下图 为组件设置其他属性（compted、watch） export default { data: () => ({ question:\"\", count: 1, }), computed: { double: function () { return this.count * 2; }, }, watch: { question: function (newQuestion, oldQuestion) { this.answer = 'xxxx' } }; 再一次打包，发现打包出来的体积并没有变化 Vue3 项目 组件中简单使用 import { reactive, defineComponent } from \"vue\"; export default defineComponent({ setup() { const state = reactive({ count: 1, }); return { state, }; }, }); 将项目进行打包 在组件中引入computed和watch import { reactive, defineComponent, computed, watch } from \"vue\"; export default defineComponent({ setup() { const state = reactive({ count: 1, }); const double = computed(() => { return state.count * 2; }); watch( () => state.count, (count, preCount) => { console.log(count); console.log(preCount); } ); return { state, double, }; }, }); 再次对项目进行打包，可以看到在引入computer和watch之后，项目整体体积变大了 三、作用 通过Tree shaking，Vue3给我们带来的好处是： 减少程序体积（更小） 减少程序执行时间（更快） 便于将来对程序架构进行优化（更友好） 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/webpack.html":{"url":"webpack/webpack.html","title":"对webpack的理解","keywords":"","body":"面试官：说说你对webpack的理解？解决了什么问题？ 一、背景 Webpack 最初的目标是实现前端项目的模块化，旨在更高效地管理和维护项目中的每一个资源 模块化 最早的时候，我们会通过文件划分的形式实现模块化，也就是将每个功能及其相关状态数据各自单独放到不同的JS 文件中 约定每个文件是一个独立的模块，然后再将这些js文件引入到页面，一个script标签对应一个模块，然后调用模块化的成员 但这种模块弊端十分的明显，模块都是在全局中工作，大量模块成员污染了环境，模块与模块之间并没有依赖关系、维护困难、没有私有空间等问题 项目一旦变大，上述问题会尤其明显 随后，就出现了命名空间方式，规定每个模块只暴露一个全局对象，然后模块的内容都挂载到这个对象中 window.moduleA = { method1: function () { console.log('moduleA#method1') } } 这种方式也并没有解决第一种方式的依赖等问题 再后来，我们使用立即执行函数为模块提供私有空间，通过参数的形式作为依赖声明，如下 // module-a.js (function ($) { var name = 'module-a' function method1 () { console.log(name + '#method1') $('body').animate({ margin: '200px' }) } window.moduleA = { method1: method1 } })(jQuery) 上述的方式都是早期解决模块的方式，但是仍然存在一些没有解决的问题。例如，我们是用过script标签在页面引入这些模块的，这些模块的加载并不受代码的控制，时间一久维护起来也十分的麻烦 理想的解决方式是，在页面中引入一个JS入口文件，其余用到的模块可以通过代码控制，按需加载进来 除了模块加载的问题以外，还需要规定模块化的规范，如今流行的则是CommonJS、ES Modules 二、问题 从后端渲染的JSP、PHP，到前端原生JavaScript，再到jQuery开发，再到目前的三大框架Vue、React、Angular 开发方式，也从javascript到后面的es5、es6、7、8、9、10，再到typescript，包括编写CSS的预处理器less、scss等 现代前端开发已经变得十分的复杂，所以我们开发过程中会遇到如下的问题： 需要通过模块化的方式来开发 使用一些高级的特性来加快我们的开发效率或者安全性，比如通过ES6+、TypeScript开发脚本逻辑，通过sass、less等方式来编写css样式代码 监听文件的变化来并且反映到浏览器上，提高开发的效率 JavaScript 代码需要模块化，HTML 和 CSS 这些资源文件也会面临需要被模块化的问题 开发完成后我们还需要将代码进行压缩、合并以及其他相关的优化 而webpack恰巧可以解决以上问题 三、是什么 webpack 是一个用于现代JavaScript应用程序的静态模块打包工具 静态模块 这里的静态模块指的是开发阶段，可以被 webpack 直接引用的资源（可以直接被获取打包进bundle.js的资源） 当 webpack处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块（不再局限js文件），并生成一个或多个 bundle webpack的能力： 编译代码能力，提高效率，解决浏览器兼容问题 模块整合能力，提高性能，可维护性，解决浏览器频繁请求文件的问题 万物皆可模块能力，项目维护性增强，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载都可以通过代码控制 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/HMR.html":{"url":"webpack/HMR.html","title":"webpack的热更新是如何做到的","keywords":"","body":"面试官：说说webpack的热更新是如何做到的？原理是什么？ 一、是什么 HMR全称 Hot Module Replacement，可以理解为模块热替换，指在应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个应用 例如，我们在应用运行过程中修改了某个模块，通过自动刷新会导致整个应用的整体刷新，那页面中的状态信息都会丢失 如果使用的是 HMR，就可以实现只将修改的模块实时替换至应用中，不必完全刷新整个应用 在webpack中配置开启热模块也非常的简单，如下代码： const webpack = require('webpack') module.exports = { // ... devServer: { // 开启 HMR 特性 hot: true // hotOnly: true } } 通过上述这种配置，如果我们修改并保存css文件，确实能够以不刷新的形式更新到页面中 但是，当我们修改并保存js文件之后，页面依旧自动刷新了，这里并没有触发热模块 所以，HMR并不像 Webpack 的其他特性一样可以开箱即用，需要有一些额外的操作 我们需要去指定哪些模块发生更新时进行HRM，如下代码： if(module.hot){ module.hot.accept('./util.js',()=>{ console.log(\"util.js更新了\") }) } 二、实现原理 首先来看看一张图，如下： Webpack Compile：将 JS 源代码编译成 bundle.js HMR Server：用来将热更新的文件输出给 HMR Runtime Bundle Server：静态资源文件服务器，提供文件访问路径 HMR Runtime：socket服务器，会被注入到浏览器，更新文件的变化 bundle.js：构建输出的文件 在HMR Runtime 和 HMR Server之间建立 websocket，即图上4号线，用于实时更新文件变化 上面图中，可以分成两个阶段： 启动阶段为上图 1 - 2 - A - B 在编写未经过webpack打包的源代码后，Webpack Compile 将源代码和 HMR Runtime 一起编译成 bundle文件，传输给Bundle Server 静态资源服务器 更新阶段为上图 1 - 2 - 3 - 4 当某一个文件或者模块发生变化时，webpack监听到文件变化对文件重新编译打包，编译生成唯一的hash值，这个hash值用来作为下一次热更新的标识 根据变化的内容生成两个补丁文件：manifest（包含了 hash 和 chundId，用来说明变化的内容）和chunk.js 模块 由于socket服务器在HMR Runtime 和 HMR Server之间建立 websocket链接，当文件发生改动的时候，服务端会向浏览器推送一条消息，消息包含文件改动后生成的hash值，如下图的h属性，作为下一次热更细的标识 在浏览器接受到这条消息之前，浏览器已经在上一次socket 消息中已经记住了此时的hash 标识，这时候我们会创建一个 ajax 去服务端请求获取到变化内容的 manifest 文件 mainfest文件包含重新build生成的hash值，以及变化的模块，对应上图的c属性 浏览器根据 manifest 文件获取模块变化的内容，从而触发render流程，实现局部模块更新 三、总结 关于webpack热模块更新的总结如下： 通过webpack-dev-server创建两个服务器：提供静态资源的服务（express）和Socket服务 express server 负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析） socket server 是一个 websocket 的长连接，双方可以通信 当 socket server 监听到对应的模块发生变化时，会生成两个文件.json（manifest文件）和.js文件（update chunk） 通过长连接，socket server 可以直接将这两个文件主动发送给客户端（浏览器） 浏览器拿到两个新的文件后，通过HMR runtime机制，加载这两个文件，并且针对修改的模块进行更新 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/Loader.html":{"url":"webpack/Loader.html","title":"webpack中常见的Loader","keywords":"","body":"面试官：说说webpack中常见的Loader？解决了什么问题？ 一、是什么 loader 用于对模块的\"源代码\"进行转换，在 import 或\"加载\"模块时预处理文件 webpack做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。如下图所示： 在webpack内部中，任何文件都是模块，不仅仅只是js文件 默认情况下，在遇到import或者load加载模块的时候，webpack只支持对js文件打包 像css、sass、png等这些类型的文件的时候，webpack则无能为力，这时候就需要配置对应的loader进行文件内容的解析 在加载模块的时候，执行顺序如下： 当 webpack 碰到不识别的模块的时候，webpack 会在配置的中查找该文件解析规则 关于配置loader的方式有三种： 配置方式（推荐）：在 webpack.config.js文件中指定 loader 内联方式：在每个 import 语句中显式指定 loader CLI 方式：在 shell 命令中指定它们 配置方式 关于loader的配置，我们是写在module.rules属性中，属性介绍如下： rules是一个数组的形式，因此我们可以配置很多个loader 每一个loader对应一个对象的形式，对象属性test 为匹配的规则，一般情况为正则表达式 属性use针对匹配到文件类型，调用对应的 loader 进行处理 代码编写，如下形式： module.exports = { module: { rules: [ { test: /\\.css$/, use: [ { loader: 'style-loader' }, { loader: 'css-loader', options: { modules: true } }, { loader: 'sass-loader' } ] } ] } }; 二、特性 这里继续拿上述代码，来讲讲loader的特性 从上述代码可以看到，在处理css模块的时候，use属性中配置了三个loader分别处理css文件 因为loader支持链式调用，链中的每个loader会处理之前已处理过的资源，最终变为js代码。顺序为相反的顺序执行，即上述执行方式为sass-loader、css-loader、style-loader 除此之外，loader的特性还有如下： loader 可以是同步的，也可以是异步的 loader 运行在 Node.js 中，并且能够执行任何操作 除了常见的通过 package.json 的 main 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 loader 字段直接引用一个模块 插件(plugin)可以为 loader 带来更多特性 loader 能够产生额外的任意文件 可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言翻译和更多其他特性 三、常见的loader 在页面开发过程中，我们经常性加载除了js文件以外的内容，这时候我们就需要配置响应的loader进行加载 常见的loader如下： style-loader: 将css添加到DOM的内联样式标签style里 css-loader :允许将css文件通过require的方式引入，并返回css代码 less-loader: 处理less sass-loader: 处理sass postcss-loader: 用postcss来处理CSS autoprefixer-loader: 处理CSS3属性前缀，已被弃用，建议直接使用postcss file-loader: 分发文件到output目录并返回相对路径 url-loader: 和file-loader类似，但是当文件小于设定的limit时可以返回一个Data Url html-minify-loader: 压缩HTML babel-loader :用babel来转换ES6文件到ES 下面给出一些常见的loader的使用： css-loader 分析 css 模块之间的关系，并合成⼀个 css npm install --save-dev css-loader rules: [ ..., { test: /\\.css$/, use: { loader: \"css-loader\", options: { // 启用/禁用 url() 处理 url: true, // 启用/禁用 @import 处理 import: true, // 启用/禁用 Sourcemap sourceMap: false } } } ] 如果只通过css-loader加载文件，这时候页面代码设置的样式并没有生效 原因在于，css-loader只是负责将.css文件进行一个解析，而并不会将解析后的css插入到页面中 如果我们希望再完成插入style的操作，那么我们还需要另外一个loader，就是style-loader style-loader 把 css-loader 生成的内容，用 style 标签挂载到页面的 head 中 npm install --save-dev style-loader rules: [ ..., { test: /\\.css$/, use: [\"style-loader\", \"css-loader\"] } ] 同一个任务的 loader 可以同时挂载多个，处理顺序为：从右到左，从下往上 less-loader 开发中，我们也常常会使用less、sass、stylus预处理器编写css样式，使开发效率提高，这里需要使用less-loader npm install less-loader -D rules: [ ..., { test: /\\.css$/, use: [\"style-loader\", \"css-loader\",\"less-loader\"] } ] raw-loader 在 webpack中通过 import方式导入文件内容，该loader并不是内置的，所以首先要安装 npm install --save-dev raw-loader 然后在 webpack.config.js 中进行配置 module.exports = { ..., module: { rules: [ { test: /\\.(txt|md)$/, use: 'raw-loader' } ] } } file-loader 把识别出的资源模块，移动到指定的输出⽬目录，并且返回这个资源在输出目录的地址(字符串) npm install --save-dev file-loader rules: [ ..., { test: /\\.(png|jpe?g|gif)$/, use: { loader: \"file-loader\", options: { // placeholder 占位符 [name] 源资源模块的名称 // [ext] 源资源模块的后缀 name: \"[name]_[hash].[ext]\", //打包后的存放位置 outputPath: \"./images\", // 打包后文件的 url publicPath: './images', } } } ] url-loader 可以处理理 file-loader 所有的事情，但是遇到图片格式的模块，可以选择性的把图片转成 base64 格式的字符串，并打包到 js 中，对小体积的图片比较合适，大图片不合适。 npm install --save-dev url-loader rules: [ ..., { test: /\\.(png|jpe?g|gif)$/, use: { loader: \"url-loader\", options: { // placeholder 占位符 [name] 源资源模块的名称 // [ext] 源资源模块的后缀 name: \"[name]_[hash].[ext]\", //打包后的存放位置 outputPath: \"./images\" // 打包后文件的 url publicPath: './images', // 小于 100 字节转成 base64 格式 limit: 100 } } } ] 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/Loader_Plugin.html":{"url":"webpack/Loader_Plugin.html","title":"说说Loader和Plugin的区别","keywords":"","body":"面试官：说说Loader和Plugin的区别？编写Loader，Plugin的思路？ 一、区别 前面两节我们有提到Loader与Plugin对应的概念，先来回顾下 loader 是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中 plugin 赋予了 webpack 各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader 无法实现的其他事 从整个运行时机上来看，如下图所示： 可以看到，两者在运行时机上的区别： loader 运行在打包文件之前 plugins 在整个编译周期都起作用 在Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过Webpack提供的 API改变输出结果 对于loader，实质是一个转换器，将A文件进行编译形成B文件，操作的是文件，比如将A.scss或A.less转变为B.css，单纯的文件转换过程 二、编写loader 在编写 loader 前，我们首先需要了解 loader 的本质 其本质为函数，函数中的 this 作为上下文会被 webpack 填充，因此我们不能将 loader设为一个箭头函数 函数接受一个参数，为 webpack 传递给 loader 的文件源内容 函数中 this 是由 webpack 提供的对象，能够获取当前 loader 所需要的各种信息 函数中有异步操作或同步操作，异步操作通过 this.callback 返回，返回值要求为 string 或者 Buffer 代码如下所示： // 导出一个函数，source为webpack传递给loader的文件源内容 module.exports = function(source) { const content = doSomeThing2JsString(source); // 如果 loader 配置了 options 对象，那么this.query将指向 options const options = this.query; // 可以用作解析其他模块路径的上下文 console.log('this.context'); /* * this.callback 参数： * error：Error | null，当 loader 出错时向外抛出一个 error * content：String | Buffer，经过 loader 编译后需要导出的内容 * sourceMap：为方便调试生成的编译后内容的 source map * ast：本次编译生成的 AST 静态语法树，之后执行的 loader 可以直接使用这个 AST，进而省去重复生成 AST 的过程 */ this.callback(null, content); // 异步 return content; // 同步 } 一般在编写loader的过程中，保持功能单一，避免做多种功能 如less文件转换成 css文件也不是一步到位，而是 less-loader、css-loader、style-loader几个 loader的链式调用才能完成转换 三、编写plugin 由于webpack基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务 在之前也了解过，webpack编译会创建两个核心对象： compiler：包含了 webpack 环境的所有的配置信息，包括 options，loader 和 plugin，和 webpack 整个生命周期相关的钩子 compilation：作为 plugin 内置事件回调函数的参数，包含了当前的模块资源、编译生成资源、变化的文件以及被跟踪依赖的状态信息。当检测到一个文件变化，一次新的 Compilation 将被创建 如果自己要实现plugin，也需要遵循一定的规范： 插件必须是一个函数或者是一个包含 apply 方法的对象，这样才能访问compiler实例 传给每个插件的 compiler 和 compilation 对象都是同一个引用，因此不建议修改 异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住 实现plugin的模板如下： class MyPlugin { // Webpack 会调用 MyPlugin 实例的 apply 方法给插件实例传入 compiler 对象 apply (compiler) { // 找到合适的事件钩子，实现自己的插件功能 compiler.hooks.emit.tap('MyPlugin', compilation => { // compilation: 当前打包构建流程的上下文 console.log(compilation); // do something... }) } } 在 emit 事件发生时，代表源文件的转换和组装已经完成，可以读取到最终将输出的资源、代码块、模块及其依赖，并且可以修改输出资源的内容 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/Plugin.html":{"url":"webpack/Plugin.html","title":"webpack中常见的Plugin","keywords":"","body":"面试官：说说webpack中常见的Plugin？解决了什么问题？ 一、是什么 Plugin（Plug-in）是一种计算机应用程序，它和主应用程序互相交互，以提供特定的功能 是一种遵循一定规范的应用程序接口编写出来的程序，只能运行在程序规定的系统下，因为其需要调用原纯净系统提供的函数库或者数据 webpack中的plugin也是如此，plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在 webpack 的不同阶段（钩子 / 生命周期），贯穿了webpack整个编译周期 目的在于解决loader 无法实现的其他事 配置方式 这里讲述文件的配置方式，一般情况，通过配置文件导出对象中plugins属性传入new实例对象。如下所示： const HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装 const webpack = require('webpack'); // 访问内置的插件 module.exports = { ... plugins: [ new webpack.ProgressPlugin(), new HtmlWebpackPlugin({ template: './src/index.html' }), ], }; 二、特性 其本质是一个具有apply方法javascript对象 apply 方法会被 webpack compiler调用，并且在整个编译生命周期都可以访问 compiler对象 const pluginName = 'ConsoleLogOnBuildWebpackPlugin'; class ConsoleLogOnBuildWebpackPlugin { apply(compiler) { compiler.hooks.run.tap(pluginName, (compilation) => { console.log('webpack 构建过程开始！'); }); } } module.exports = ConsoleLogOnBuildWebpackPlugin; compiler hook 的 tap方法的第一个参数，应是驼峰式命名的插件名称 关于整个编译生命周期钩子，有如下： entry-option ：初始化 option run compile： 真正开始的编译，在创建 compilation 对象之前 compilation ：生成好了 compilation 对象 make 从 entry 开始递归分析依赖，准备对每个模块进行 build after-compile： 编译 build 过程结束 emit ：在将内存中 assets 内容写到磁盘文件夹之前 after-emit ：在将内存中 assets 内容写到磁盘文件夹之后 done： 完成所有的编译过程 failed： 编译失败的时候 三、常见的Plugin 常见的plugin有如图所示： 下面介绍几个常用的插件用法： HtmlWebpackPlugin 在打包结束后，⾃动生成⼀个 html ⽂文件，并把打包生成的js 模块引⼊到该 html 中 npm install --save-dev html-webpack-plugin // webpack.config.js const HtmlWebpackPlugin = require(\"html-webpack-plugin\"); module.exports = { ... plugins: [ new HtmlWebpackPlugin({ title: \"My App\", filename: \"app.html\", template: \"./src/html/index.html\" }) ] }; html-webpack-plugin 在 html 模板中，可以通过 的方式获取配置的值 更多的配置可以自寻查找 clean-webpack-plugin 删除（清理）构建目录 npm install --save-dev clean-webpack-plugin const {CleanWebpackPlugin} = require('clean-webpack-plugin'); module.exports = { ... plugins: [ ..., new CleanWebpackPlugin(), ... ] } mini-css-extract-plugin 提取 CSS 到一个单独的文件中 npm install --save-dev mini-css-extract-plugin const MiniCssExtractPlugin = require('mini-css-extract-plugin'); module.exports = { ..., module: { rules: [ { test: /\\.s[ac]ss$/, use: [ { loader: MiniCssExtractPlugin.loader }, 'css-loader', 'sass-loader' ] } ] }, plugins: [ ..., new MiniCssExtractPlugin({ filename: '[name].css' }), ... ] } DefinePlugin 允许在编译时创建配置的全局对象，是一个webpack内置的插件，不需要安装 const { DefinePlugun } = require('webpack') module.exports = { ... plugins:[ new DefinePlugin({ BASE_URL:'\"./\"' }) ] } 这时候编译template模块的时候，就能通过下述形式获取全局对象 favicon.ico>\" copy-webpack-plugin 复制文件或目录到执行区域，如vue的打包过程中，如果我们将一些文件放到public的目录下，那么这个目录会被复制到dist文件夹中 npm install copy-webpack-plugin -D new CopyWebpackPlugin({ parrerns:[ { from:\"public\", globOptions:{ ignore:[ '**/index.html' ] } } ] }) 复制的规则在patterns属性中设置： from：设置从哪一个源中开始复制 to：复制到的位置，可以省略，会默认复制到打包的目录下 globOptions：设置一些额外的选项，其中可以编写需要忽略的文件 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/Rollup_Parcel_snowpack_Vite.html":{"url":"webpack/Rollup_Parcel_snowpack_Vite.html","title":"与webpack类似的工具还有哪些","keywords":"","body":"面试官：与webpack类似的工具还有哪些？区别？ 一、模块化工具 模块化是一种处理复杂系统分解为更好的可管理模块的方式 可以用来分割，组织和打包应用。每个模块完成一个特定的子功能，所有的模块按某种方法组装起来，成为一个整体(bundle) 在前端领域中，并非只有webpack这一款优秀的模块打包工具，还有其他类似的工具，例如Rollup、Parcel、snowpack，以及最近风头无两的Vite 通过这些模块打包工具，能够提高我们的开发效率，减少开发成本 这里没有提及gulp、grunt是因为它们只是定义为构建工具，不能类比 Rollup Rollup 是一款 ES Modules 打包器，从作用上来看，Rollup 与 Webpack 非常类似。不过相比于 Webpack，Rollup要小巧的多 现在很多我们熟知的库都都使用它进行打包，比如：Vue、React和three.js等 举个例子： // ./src/messages.js export default { hi: 'Hey Guys, I am zce~' } // ./src/logger.js export const log = msg => { console.log('---------- INFO ----------') console.log(msg) console.log('--------------------------') } export const error = msg => { console.error('---------- ERROR ----------') console.error(msg) console.error('---------------------------') } // ./src/index.js import { log } from './logger' import messages from './messages' log(messages.hi) 然后通过rollup进行打包 $ npx rollup ./src/index.js --file ./dist/bundle.js 打包结果如下图 可以看到，代码非常简洁，完成不像webpack那样存在大量引导代码和模块函数 并且error方法由于没有被使用，输出的结果中并无error方法，可以看到，rollup默认开始Tree-shaking 优化输出结果 因此，可以看到Rollup的优点： 代码效率更简洁、效率更高 默认支持 Tree-shaking 但缺点也十分明显，加载其他类型的资源文件或者支持导入 CommonJS 模块，又或是编译 ES 新特性，这些额外的需求 Rollup需要使用插件去完成 综合来看，rollup并不适合开发应用使用，因为需要使用第三方模块，而目前第三方模块大多数使用CommonJs方式导出成员，并且rollup不支持HMR，使开发效率降低 但是在用于打包JavaScript 库时，rollup比 webpack 更有优势，因为其打包出来的代码更小、更快，其存在的缺点可以忽略 Parcel Parcel ，是一款完全零配置的前端打包器，它提供了 “傻瓜式” 的使用体验，只需了解简单的命令，就能构建前端应用程序 Parcel 跟 Webpack 一样都支持以任意类型文件作为打包入口，但建议使用HTML文件作为入口，该HTML文件像平时一样正常编写代码、引用资源。如下所示： Parcel Tutorials main.js文件通过ES Moudle方法导入其他模块成员 // ./src/main.js import { log } from './logger' log('hello parcel') // ./src/logger.js export const log = msg => { console.log('---------- INFO ----------') console.log(msg) } 运行之后，使用命令打包 npx parcel src/index.html 执行命令后，Parcel不仅打包了应用，同时也启动了一个开发服务器，跟webpack Dev Server一样 跟webpack类似，也支持模块热替换，但用法更简单 同时，Parcel有个十分好用的功能：支持自动安装依赖，像webpack开发阶段突然使用安装某个第三方依赖，必然会终止dev server然后安装再启动。而Parcel则免了这繁琐的工作流程 同时，Parcel能够零配置加载其他类型的资源文件，无须像webpack那样配置对应的loader 打包命令如下： npx parcel src/index.html 由于打包过程是多进程同时工作，构建速度会比Webpack 快，输出文件也会被压缩，并且样式代码也会被单独提取到单个文件中 可以感受到，Parcel给开发者一种很大的自由度，只管去实现业务代码，其他事情用Parcel解决 Snowpack Snowpack，是一种闪电般快速的前端构建工具，专为现代Web设计，较复杂的打包工具（如Webpack或Parcel）的替代方案，利用JavaScript的本机模块系统，避免不必要的工作并保持流畅的开发体验 开发阶段，每次保存单个文件时，Webpack和Parcel都需要重新构建和重新打包应用程序的整个bundle。而Snowpack为你的应用程序每个文件构建一次，就可以永久缓存，文件更改时，Snowpack会重新构建该单个文件 下图给出webpack与snowpack打包区别： 在重新构建每次变更时没有任何的时间浪费，只需要在浏览器中进行HMR更新 Vite vite ，是一种新型前端构建工具，能够显著提升前端开发体验 它主要由两部分组成： 一个开发服务器，它基于 原生 ES 模块 提供了丰富的内建功能，如速度快到惊人的 [模块热更新HMR 一套构建指令，它使用 Rollup打包你的代码，并且它是预配置的，可以输出用于生产环境的优化过的静态资源 其作用类似webpack+ webpack-dev-server，其特点如下： 快速的冷启动 即时的模块热更新 真正的按需编译 vite会直接启动开发服务器，不需要进行打包操作，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快 利用现代浏览器支持ES Module的特性，当浏览器请求某个模块的时候，再根据需要对模块的内容进行编译，这种方式大大缩短了编译时间 原理图如下所示： 在热模块HMR方面，当修改一个模块的时候，仅需让浏览器重新请求该模块即可，无须像webpack那样需要把该模块的相关依赖模块全部编译一次，效率更高 webpack 相比上述的模块化工具，webpack大而全，很多常用的功能做到开箱即用。有两大最核心的特点：一切皆模块和按需加载 与其他构建工具相比，有如下优势： 智能解析：对 CommonJS 、 AMD 、ES6 的语法做了兼容 万物模块：对 js、css、图片等资源文件都支持打包 开箱即用：HRM、Tree-shaking等功能 代码分割：可以将代码切割成不同的 chunk，实现按需加载，降低了初始化时间 插件系统，具有强大的 Plugin 接口，具有更好的灵活性和扩展性 易于调试：支持 SourceUrls 和 SourceMaps 快速运行：webpack 使用异步 IO 并具有多级缓存，这使得 webpack 很快且在增量编译上更加快 生态环境好：社区更丰富，出现的问题更容易解决 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/build_process.html":{"url":"webpack/build_process.html","title":"webpack的构建流程","keywords":"","body":"面试官：说说webpack的构建流程? 一、运行流程 webpack 的运行流程是一个串行的过程，它的工作流程就是将各个插件串联起来 在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条webpack机制中，去改变webpack的运作，使得整个系统扩展性良好 从启动到结束会依次执行以下三大步骤： 初始化流程：从配置文件和 Shell 语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数 编译构建流程：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理 输出流程：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统 初始化流程 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数 配置文件默认下为webpack.config.js，也或者通过命令的形式指定配置文件，主要作用是用于激活webpack的加载项和插件 关于文件配置内容分析，如下注释： var path = require('path'); var node_modules = path.resolve(__dirname, 'node_modules'); var pathToReact = path.resolve(node_modules, 'react/dist/react.min.js'); module.exports = { // 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。 entry: './path/to/my/entry/file.js'， // 文件路径指向(可加快打包过程)。 resolve: { alias: { 'react': pathToReact } }, // 生成文件，是模块构建的终点，包括输出文件与输出路径。 output: { path: path.resolve(__dirname, 'build'), filename: '[name].js' }, // 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。 module: { loaders: [ { test: /\\.js$/, loader: 'babel', query: { presets: ['es2015', 'react'] } } ], noParse: [pathToReact] }, // webpack 各插件对象，在 webpack 的事件流中执行对应的方法。 plugins: [ new webpack.HotModuleReplacementPlugin() ] }; webpack 将 webpack.config.js 中的各个配置项拷贝到 options 对象中，并加载用户配置的 plugins 完成上述步骤之后，则开始初始化Compiler编译对象，该对象掌控者webpack声明周期，不执行具体的任务，只是进行一些调度工作 class Compiler extends Tapable { constructor(context) { super(); this.hooks = { beforeCompile: new AsyncSeriesHook([\"params\"]), compile: new SyncHook([\"params\"]), afterCompile: new AsyncSeriesHook([\"compilation\"]), make: new AsyncParallelHook([\"compilation\"]), entryOption: new SyncBailHook([\"context\", \"entry\"]) // 定义了很多不同类型的钩子 }; // ... } } function webpack(options) { var compiler = new Compiler(); ...// 检查options,若watch字段为true,则开启watch线程 return compiler; } ... Compiler 对象继承自 Tapable，初始化时定义了很多钩子函数 编译构建流程 根据配置中的 entry 找出所有的入口文件 module.exports = { entry: './src/file.js' } 初始化完成后会调用Compiler的run来真正启动webpack编译构建流程，主要流程如下： compile 开始编译 make 从入口点分析模块及其依赖的模块，创建这些模块对象 build-module 构建模块 seal 封装构建结果 emit 把各个chunk输出到结果文件 compile 编译 执行了run方法后，首先会触发compile，主要是构建一个Compilation对象 该对象是编译阶段的主要执行者，主要会依次下述流程：执行模块创建、依赖收集、分块、打包等主要任务的对象 make 编译模块 当完成了上述的compilation对象后，就开始从Entry入口文件开始读取，主要执行_addModuleChain()函数，如下： _addModuleChain(context, dependency, onModule, callback) { ... // 根据依赖查找对应的工厂函数 const Dep = /** @type {DepConstructor} */ (dependency.constructor); const moduleFactory = this.dependencyFactories.get(Dep); // 调用工厂函数NormalModuleFactory的create来生成一个空的NormalModule对象 moduleFactory.create({ dependencies: [dependency] ... }, (err, module) => { ... const afterBuild = () => { this.processModuleDependencies(module, err => { if (err) return callback(err); callback(null, module); }); }; this.buildModule(module, false, null, null, err => { ... afterBuild(); }) }) } 过程如下： _addModuleChain中接收参数dependency传入的入口依赖，使用对应的工厂函数NormalModuleFactory.create方法生成一个空的module对象 回调中会把此module存入compilation.modules对象和dependencies.module对象中，由于是入口文件，也会存入compilation.entries中 随后执行buildModule进入真正的构建模块module内容的过程 build module 完成模块编译 这里主要调用配置的loaders，将我们的模块转成标准的JS模块 在用Loader 对一个模块转换完后，使用 acorn 解析转换后的内容，输出对应的抽象语法树（AST），以方便 Webpack后面对代码的分析 从配置的入口模块开始，分析其 AST，当遇到require等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系 输出流程 seal 输出资源 seal方法主要是要生成chunks，对chunks进行一系列的优化操作，并生成要输出的代码 webpack 中的 chunk ，可以理解为配置在 entry 中的模块，或者是动态引入的模块 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表 emit 输出完成 在确定好输出内容后，根据配置确定输出的路径和文件名 output: { path: path.resolve(__dirname, 'build'), filename: '[name].js' } 在 Compiler 开始生成文件前，钩子 emit 会被执行，这是我们修改最终文件的最后一个机会 从而webpack整个打包过程则结束了 小结 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/improve_build.html":{"url":"webpack/improve_build.html","title":"如何提高webpack的构建速度","keywords":"","body":"面试官：如何提高webpack的构建速度？ 一、背景 随着我们的项目涉及到页面越来越多，功能和业务代码也会随着越多，相应的 webpack 的构建时间也会越来越久 构建时间与我们日常开发效率密切相关，当我们本地开发启动 devServer 或者 build 的时候，如果时间过长，会大大降低我们的工作效率 所以，优化webpack 构建速度是十分重要的环节 二、如何优化 常见的提升构建速度的手段有如下： 优化 loader 配置 合理使用 resolve.extensions 优化 resolve.modules 优化 resolve.alias 使用 DLLPlugin 插件 使用 cache-loader terser 启动多线程 合理使用 sourceMap 优化loader配置 在使用loader时，可以通过配置include、exclude、test属性来匹配文件，接触include、exclude规定哪些匹配应用loader 如采用 ES6 的项目为例，在配置 babel-loader时，可以这样： module.exports = { module: { rules: [ { // 如果项目源码中只有 js 文件就不要写成 /\\.jsx?$/，提升正则表达式性能 test: /\\.js$/, // babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启 use: ['babel-loader?cacheDirectory'], // 只对项目根目录下的 src 目录中的文件采用 babel-loader include: path.resolve(__dirname, 'src'), }, ] }, }; 合理使用 resolve.extensions 在开发中我们会有各种各样的模块依赖，这些模块可能来自于自己编写的代码，也可能来自第三方库， resolve可以帮助webpack从每个 require/import 语句中，找到需要引入到合适的模块代码 通过resolve.extensions是解析到文件时自动添加拓展名，默认情况如下： module.exports = { ... extensions:[\".warm\",\".mjs\",\".js\",\".json\"] } 当我们引入文件的时候，若没有文件后缀名，则会根据数组内的值依次查找 当我们配置的时候，则不要随便把所有后缀都写在里面，这会调用多次文件的查找，这样就会减慢打包速度 优化 resolve.modules resolve.modules 用于配置 webpack 去哪些目录下寻找第三方模块。默认值为['node_modules']，所以默认会从node_modules中查找文件 当安装的第三方模块都放在项目根目录下的 ./node_modules目录下时，所以可以指明存放第三方模块的绝对路径，以减少寻找，配置如下： module.exports = { resolve: { // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤 // 其中 __dirname 表示当前工作目录，也就是项目根目录 modules: [path.resolve(__dirname, 'node_modules')] }, }; 优化 resolve.alias alias给一些常用的路径起一个别名，特别当我们的项目目录结构比较深的时候，一个文件的路径可能是./../../的形式 通过配置alias以减少查找过程 module.exports = { ... resolve:{ alias:{ \"@\":path.resolve(__dirname,'./src') } } } 使用 DLLPlugin 插件 DLL全称是 动态链接库，是为软件在winodw种实现共享函数库的一种实现方式，而Webpack也内置了DLL的功能，为的就是可以共享，不经常改变的代码，抽成一个共享的库。这个库在之后的编译过程中，会被引入到其他项目的代码中 使用步骤分成两部分： 打包一个 DLL 库 引入 DLL 库 打包一个 DLL 库 webpack内置了一个DllPlugin可以帮助我们打包一个DLL的库文件 module.exports = { ... plugins:[ new webpack.DllPlugin({ name:'dll_[name]', path:path.resolve(__dirname,\"./dll/[name].mainfest.json\") }) ] } 引入 DLL 库 使用 webpack 自带的 DllReferencePlugin 插件对 mainfest.json 映射文件进行分析，获取要使用的DLL库 然后再通过AddAssetHtmlPlugin插件，将我们打包的DLL库引入到Html模块中 module.exports = { ... new webpack.DllReferencePlugin({ context:path.resolve(__dirname,\"./dll/dll_react.js\"), mainfest:path.resolve(__dirname,\"./dll/react.mainfest.json\") }), new AddAssetHtmlPlugin({ outputPath:\"./auto\", filepath:path.resolve(__dirname,\"./dll/dll_react.js\") }) } 使用 cache-loader 在一些性能开销较大的 loader之前添加 cache-loader，以将结果缓存到磁盘里，显著提升二次构建速度 保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 loader 使用此loader module.exports = { module: { rules: [ { test: /\\.ext$/, use: ['cache-loader', ...loaders], include: path.resolve('src'), }, ], }, }; terser 启动多线程 使用多进程并行运行来提高构建速度 module.exports = { optimization: { minimizer: [ new TerserPlugin({ parallel: true, }), ], }, }; 合理使用 sourceMap 打包生成 sourceMap 的时候，如果信息越详细，打包速度就会越慢。对应属性取值如下所示： 三、总结 可以看到，优化webpack构建的方式有很多，主要可以从优化搜索时间、缩小文件搜索范围、减少不必要的编译等方面入手 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/performance.html":{"url":"webpack/performance.html","title":"如何借助webpack来优化前端性能","keywords":"","body":"面试官：说说如何借助webpack来优化前端性能？ 一、背景 随着前端的项目逐渐扩大，必然会带来的一个问题就是性能 尤其在大型复杂的项目中，前端业务可能因为一个小小的数据依赖，导致整个页面卡顿甚至奔溃 一般项目在完成后，会通过webpack进行打包，利用webpack对前端项目性能优化是一个十分重要的环节 二、如何优化 通过webpack优化前端的手段有： JS代码压缩 CSS代码压缩 Html文件代码压缩 文件大小压缩 图片压缩 Tree Shaking 代码分离 内联 chunk JS代码压缩 terser是一个JavaScript的解释、绞肉机、压缩机的工具集，可以帮助我们压缩、丑化我们的代码，让bundle更小 在production模式下，webpack 默认就是使用 TerserPlugin 来处理我们的代码的。如果想要自定义配置它，配置方法如下： const TerserPlugin = require('terser-webpack-plugin') module.exports = { ... optimization: { minimize: true, minimizer: [ new TerserPlugin({ parallel: true // 电脑cpu核数-1 }) ] } } 属性介绍如下： extractComments：默认值为true，表示会将注释抽取到一个单独的文件中，开发阶段，我们可设置为 false ，不保留注释 parallel：使用多进程并发运行提高构建的速度，默认值是true，并发运行的默认数量： os.cpus().length - 1 terserOptions：设置我们的terser相关的配置： compress：设置压缩相关的选项，mangle：设置丑化相关的选项，可以直接设置为true mangle：设置丑化相关的选项，可以直接设置为true toplevel：底层变量是否进行转换 keep_classnames：保留类的名称 keep_fnames：保留函数的名称 CSS代码压缩 CSS压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等 CSS的压缩我们可以使用另外一个插件：css-minimizer-webpack-plugin npm install css-minimizer-webpack-plugin -D 配置方法如下： const CssMinimizerPlugin = require('css-minimizer-webpack-plugin') module.exports = { // ... optimization: { minimize: true, minimizer: [ new CssMinimizerPlugin({ parallel: true }) ] } } Html文件代码压缩 使用HtmlWebpackPlugin插件来生成HTML的模板时候，通过配置属性minify进行html优化 module.exports = { ... plugin:[ new HtmlwebpackPlugin({ ... minify:{ minifyCSS:false, // 是否压缩css collapseWhitespace:false, // 是否折叠空格 removeComments:true // 是否移除注释 } }) ] } 设置了minify，实际会使用另一个插件html-minifier-terser 文件大小压缩 对文件的大小进行压缩，减少http传输过程中宽带的损耗 npm install compression-webpack-plugin -D new ComepressionPlugin({ test:/\\.(css|js)$/, // 哪些文件需要压缩 threshold:500, // 设置文件多大开始压缩 minRatio:0.7, // 至少压缩的比例 algorithm:\"gzip\", // 采用的压缩算法 }) 图片压缩 一般来说在打包之后，一些图片文件的大小是远远要比 js 或者 css 文件要来的大，所以图片压缩较为重要 配置方法如下： module: { rules: [ { test: /\\.(png|jpg|gif)$/, use: [ { loader: 'file-loader', options: { name: '[name]_[hash].[ext]', outputPath: 'images/', } }, { loader: 'image-webpack-loader', options: { // 压缩 jpeg 的配置 mozjpeg: { progressive: true, quality: 65 }, // 使用 imagemin**-optipng 压缩 png，enable: false 为关闭 optipng: { enabled: false, }, // 使用 imagemin-pngquant 压缩 png pngquant: { quality: '65-90', speed: 4 }, // 压缩 gif 的配置 gifsicle: { interlaced: false, }, // 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式 webp: { quality: 75 } } } ] }, ] } Tree Shaking Tree Shaking 是一个术语，在计算机中表示消除死代码，依赖于ES Module的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系） 在webpack实现Trss shaking有两种不同的方案： usedExports：通过标记某些函数是否被使用，之后通过Terser来进行优化的 sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用 两种不同的配置方案， 有不同的效果 usedExports 配置方法也很简单，只需要将usedExports设为true module.exports = { ... optimization:{ usedExports } } 使用之后，没被用上的代码在webpack打包中会加入unused harmony export mul注释，用来告知 Terser 在优化时，可以删除掉这段代码 如下面sum函数没被用到，webpack打包会添加注释，terser在优化时，则将该函数去掉 sideEffects sideEffects用于告知webpack compiler哪些模块时有副作用，配置方法是在package.json中设置sideEffects属性 如果sideEffects设置为false，就是告知webpack可以安全的删除未用到的exports 如果有些文件需要保留，可以设置为数组的形式 \"sideEffecis\":[ \"./src/util/format.js\", \"*.css\" // 所有的css文件 ] 上述都是关于javascript的tree shaking，css同样也能够实现tree shaking css tree shaking css进行tree shaking优化可以安装PurgeCss插件 npm install purgecss-plugin-webpack -D const PurgeCssPlugin = require('purgecss-webpack-plugin') module.exports = { ... plugins:[ new PurgeCssPlugin({ path:glob.sync(`${path.resolve('./src')}/**/*`), {nodir:true}// src里面的所有文件 satelist:function(){ return { standard:[\"html\"] } } }) ] } paths：表示要检测哪些目录下的内容需要被分析，配合使用glob 默认情况下，Purgecss会将我们的html标签的样式移除掉，如果我们希望保留，可以添加一个safelist的属性 代码分离 将代码分离到不同的bundle中，之后我们可以按需加载，或者并行加载这些文件 默认情况下，所有的JavaScript代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页的加载速度 代码分离可以分出出更小的bundle，以及控制资源加载优先级，提供代码的加载性能 这里通过splitChunksPlugin来实现，该插件webpack已经默认安装和集成，只需要配置即可 默认配置中，chunks仅仅针对于异步（async）请求，我们可以设置为initial或者all module.exports = { ... optimization:{ splitChunks:{ chunks:\"all\" } } } splitChunks主要属性有如下： Chunks，对同步代码还是异步代码进行处理 minSize： 拆分包的大小, 至少为minSize，如何包的大小不超过minSize，这个包不会拆分 maxSize： 将大于maxSize的包，拆分为不小于minSize的包 minChunks：被引入的次数，默认是1 内联chunk 可以通过InlineChunkHtmlPlugin插件将一些chunk的模块内联到html，如runtime的代码（对模块进行解析、加载、模块信息相关的代码），代码量并不大，但是必须加载的 const InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { ... plugin:[ new InlineChunkHtmlPlugin(HtmlWebpackPlugin,[/runtime.+\\.js/] } 三、总结 关于webpack对前端性能的优化，可以通过文件体积大小入手，其次还可通过分包的形式、减少http请求次数等方式，实现对前端性能的优化 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "},"webpack/proxy.html":{"url":"webpack/proxy.html","title":"webpack proxy工作原理","keywords":"","body":"面试官：说说webpack proxy工作原理？为什么能解决跨域? 一、是什么 webpack proxy，即webpack提供的代理服务 基本行为就是接收客户端发送的请求后转发给其他服务器 其目的是为了便于开发者在开发模式下解决跨域问题（浏览器安全策略限制） 想要实现代理首先需要一个中间服务器，webpack中提供服务器的工具为webpack-dev-server webpack-dev-server webpack-dev-server是 webpack 官方推出的一款开发工具，将自动编译和自动刷新浏览器等一系列对开发友好的功能全部集成在了一起 目的是为了提高开发者日常的开发效率，只适用在开发阶段 关于配置方面，在webpack配置对象属性中通过devServer属性提供，如下： // ./webpack.config.js const path = require('path') module.exports = { // ... devServer: { contentBase: path.join(__dirname, 'dist'), compress: true, port: 9000, proxy: { '/api': { target: 'https://api.github.com' } } // ... } } devServetr里面proxy则是关于代理的配置，该属性为对象的形式，对象中每一个属性就是一个代理的规则匹配 属性的名称是需要被代理的请求路径前缀，一般为了辨别都会设置前缀为/api，值为对应的代理匹配规则，对应如下： target：表示的是代理到的目标地址 pathRewrite：默认情况下，我们的 /api-hy 也会被写入到URL中，如果希望删除，可以使用pathRewrite secure：默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false changeOrigin：它表示是否更新代理后请求的 headers 中host地址 二、工作原理 proxy工作原理实质上是利用http-proxy-middleware 这个http代理中间件，实现请求转发给其他服务器 举个例子： 在开发阶段，本地地址为http://localhost:3000，该浏览器发送一个前缀带有/api标识的请求到服务端获取数据，但响应这个请求的服务器只是将请求转发到另一台服务器中 const express = require('express'); const proxy = require('http-proxy-middleware'); const app = express(); app.use('/api', proxy({target: 'http://www.example.org', changeOrigin: true})); app.listen(3000); // http://localhost:3000/api/foo/bar -> http://www.example.org/api/foo/bar 三、跨域 在开发阶段， webpack-dev-server 会启动一个本地开发服务器，所以我们的应用在开发阶段是独立运行在 localhost的一个端口上，而后端服务又是运行在另外一个地址上 所以在开发阶段中，由于浏览器同源策略的原因，当本地访问后端就会出现跨域请求的问题 通过设置webpack proxy实现代理请求后，相当于浏览器与服务端中添加一个代理者 当本地发送请求的时候，代理服务器响应该请求，并将请求转发到目标服务器，目标服务器响应数据后再将数据返回给代理服务器，最终再由代理服务器将数据响应给本地 在代理服务器传递数据给本地浏览器的过程中，两者同源，并不存在跨域行为，这时候浏览器就能正常接收数据 注意：服务器与服务器之间请求数据并不会存在跨域行为，跨域行为是浏览器安全策略限制 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-06-18 "}}